var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key2, value) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __publicField = (obj, key2, value) => __defNormalProp(obj, typeof key2 !== "symbol" ? key2 + "" : key2, value);
import { g as getAugmentedNamespace, a as getDefaultExportFromCjs } from "./vendor-CP16y5pE.js";
var brorand = { exports: {} };
const __viteBrowserExternal = {};
const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: __viteBrowserExternal
}, Symbol.toStringTag, { value: "Module" }));
const require$$0$1 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
var hasRequiredBrorand;
function requireBrorand() {
  if (hasRequiredBrorand) return brorand.exports;
  hasRequiredBrorand = 1;
  var r;
  brorand.exports = function rand2(len) {
    if (!r)
      r = new Rand(null);
    return r.generate(len);
  };
  function Rand(rand2) {
    this.rand = rand2;
  }
  brorand.exports.Rand = Rand;
  Rand.prototype.generate = function generate2(len) {
    return this._rand(len);
  };
  Rand.prototype._rand = function _rand(n2) {
    if (this.rand.getBytes)
      return this.rand.getBytes(n2);
    var res = new Uint8Array(n2);
    for (var i2 = 0; i2 < res.length; i2++)
      res[i2] = this.rand.getByte();
    return res;
  };
  if (typeof self === "object") {
    if (self.crypto && self.crypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n2) {
        var arr = new Uint8Array(n2);
        self.crypto.getRandomValues(arr);
        return arr;
      };
    } else if (self.msCrypto && self.msCrypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n2) {
        var arr = new Uint8Array(n2);
        self.msCrypto.getRandomValues(arr);
        return arr;
      };
    } else if (typeof window === "object") {
      Rand.prototype._rand = function() {
        throw new Error("Not implemented yet");
      };
    }
  } else {
    try {
      var crypto = require$$0$1;
      if (typeof crypto.randomBytes !== "function")
        throw new Error("Not supported");
      Rand.prototype._rand = function _rand(n2) {
        return crypto.randomBytes(n2);
      };
    } catch (e) {
    }
  }
  return brorand.exports;
}
var brorandExports = requireBrorand();
const rand = /* @__PURE__ */ getDefaultExportFromCjs(brorandExports);
var hash$1 = {};
var utils$2 = {};
var minimalisticAssert;
var hasRequiredMinimalisticAssert;
function requireMinimalisticAssert() {
  if (hasRequiredMinimalisticAssert) return minimalisticAssert;
  hasRequiredMinimalisticAssert = 1;
  minimalisticAssert = assert;
  function assert(val, msg) {
    if (!val)
      throw new Error(msg || "Assertion failed");
  }
  assert.equal = function assertEqual(l2, r, msg) {
    if (l2 != r)
      throw new Error(msg || "Assertion failed: " + l2 + " != " + r);
  };
  return minimalisticAssert;
}
var inherits_browser = { exports: {} };
var hasRequiredInherits_browser;
function requireInherits_browser() {
  if (hasRequiredInherits_browser) return inherits_browser.exports;
  hasRequiredInherits_browser = 1;
  if (typeof Object.create === "function") {
    inherits_browser.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    inherits_browser.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
  return inherits_browser.exports;
}
var hasRequiredUtils$2;
function requireUtils$2() {
  if (hasRequiredUtils$2) return utils$2;
  hasRequiredUtils$2 = 1;
  var assert = requireMinimalisticAssert();
  var inherits = requireInherits_browser();
  utils$2.inherits = inherits;
  function isSurrogatePair(msg, i2) {
    if ((msg.charCodeAt(i2) & 64512) !== 55296) {
      return false;
    }
    if (i2 < 0 || i2 + 1 >= msg.length) {
      return false;
    }
    return (msg.charCodeAt(i2 + 1) & 64512) === 56320;
  }
  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === "string") {
      if (!enc) {
        var p2 = 0;
        for (var i2 = 0; i2 < msg.length; i2++) {
          var c2 = msg.charCodeAt(i2);
          if (c2 < 128) {
            res[p2++] = c2;
          } else if (c2 < 2048) {
            res[p2++] = c2 >> 6 | 192;
            res[p2++] = c2 & 63 | 128;
          } else if (isSurrogatePair(msg, i2)) {
            c2 = 65536 + ((c2 & 1023) << 10) + (msg.charCodeAt(++i2) & 1023);
            res[p2++] = c2 >> 18 | 240;
            res[p2++] = c2 >> 12 & 63 | 128;
            res[p2++] = c2 >> 6 & 63 | 128;
            res[p2++] = c2 & 63 | 128;
          } else {
            res[p2++] = c2 >> 12 | 224;
            res[p2++] = c2 >> 6 & 63 | 128;
            res[p2++] = c2 & 63 | 128;
          }
        }
      } else if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (i2 = 0; i2 < msg.length; i2 += 2)
          res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
      }
    } else {
      for (i2 = 0; i2 < msg.length; i2++)
        res[i2] = msg[i2] | 0;
    }
    return res;
  }
  utils$2.toArray = toArray;
  function toHex(msg) {
    var res = "";
    for (var i2 = 0; i2 < msg.length; i2++)
      res += zero2(msg[i2].toString(16));
    return res;
  }
  utils$2.toHex = toHex;
  function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
    return res >>> 0;
  }
  utils$2.htonl = htonl;
  function toHex32(msg, endian) {
    var res = "";
    for (var i2 = 0; i2 < msg.length; i2++) {
      var w = msg[i2];
      if (endian === "little")
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  utils$2.toHex32 = toHex32;
  function zero2(word) {
    if (word.length === 1)
      return "0" + word;
    else
      return word;
  }
  utils$2.zero2 = zero2;
  function zero8(word) {
    if (word.length === 7)
      return "0" + word;
    else if (word.length === 6)
      return "00" + word;
    else if (word.length === 5)
      return "000" + word;
    else if (word.length === 4)
      return "0000" + word;
    else if (word.length === 3)
      return "00000" + word;
    else if (word.length === 2)
      return "000000" + word;
    else if (word.length === 1)
      return "0000000" + word;
    else
      return word;
  }
  utils$2.zero8 = zero8;
  function join32(msg, start, end, endian) {
    var len = end - start;
    assert(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i2 = 0, k = start; i2 < res.length; i2++, k += 4) {
      var w;
      if (endian === "big")
        w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
      else
        w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
      res[i2] = w >>> 0;
    }
    return res;
  }
  utils$2.join32 = join32;
  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i2 = 0, k = 0; i2 < msg.length; i2++, k += 4) {
      var m2 = msg[i2];
      if (endian === "big") {
        res[k] = m2 >>> 24;
        res[k + 1] = m2 >>> 16 & 255;
        res[k + 2] = m2 >>> 8 & 255;
        res[k + 3] = m2 & 255;
      } else {
        res[k + 3] = m2 >>> 24;
        res[k + 2] = m2 >>> 16 & 255;
        res[k + 1] = m2 >>> 8 & 255;
        res[k] = m2 & 255;
      }
    }
    return res;
  }
  utils$2.split32 = split32;
  function rotr32(w, b) {
    return w >>> b | w << 32 - b;
  }
  utils$2.rotr32 = rotr32;
  function rotl32(w, b) {
    return w << b | w >>> 32 - b;
  }
  utils$2.rotl32 = rotl32;
  function sum32(a, b) {
    return a + b >>> 0;
  }
  utils$2.sum32 = sum32;
  function sum32_3(a, b, c2) {
    return a + b + c2 >>> 0;
  }
  utils$2.sum32_3 = sum32_3;
  function sum32_4(a, b, c2, d2) {
    return a + b + c2 + d2 >>> 0;
  }
  utils$2.sum32_4 = sum32_4;
  function sum32_5(a, b, c2, d2, e) {
    return a + b + c2 + d2 + e >>> 0;
  }
  utils$2.sum32_5 = sum32_5;
  function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  utils$2.sum64 = sum64;
  function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  utils$2.sum64_hi = sum64_hi;
  function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  utils$2.sum64_lo = sum64_lo;
  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }
  utils$2.sum64_4_hi = sum64_4_hi;
  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  utils$2.sum64_4_lo = sum64_4_lo;
  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }
  utils$2.sum64_5_hi = sum64_5_hi;
  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
  }
  utils$2.sum64_5_lo = sum64_5_lo;
  function rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
  }
  utils$2.rotr64_hi = rotr64_hi;
  function rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
  }
  utils$2.rotr64_lo = rotr64_lo;
  function shr64_hi(ah, al, num) {
    return ah >>> num;
  }
  utils$2.shr64_hi = shr64_hi;
  function shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
  }
  utils$2.shr64_lo = shr64_lo;
  return utils$2;
}
var common$2 = {};
var hasRequiredCommon$1;
function requireCommon$1() {
  if (hasRequiredCommon$1) return common$2;
  hasRequiredCommon$1 = 1;
  var utils2 = requireUtils$2();
  var assert = requireMinimalisticAssert();
  function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  common$2.BlockHash = BlockHash;
  BlockHash.prototype.update = function update2(msg, enc) {
    msg = utils2.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    if (this.pending.length >= this._delta8) {
      msg = this.pending;
      var r = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r, msg.length);
      if (this.pending.length === 0)
        this.pending = null;
      msg = utils2.join32(msg, 0, msg.length - r, this.endian);
      for (var i2 = 0; i2 < msg.length; i2 += this._delta32)
        this._update(msg, i2, i2 + this._delta32);
    }
    return this;
  };
  BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);
    return this._digest(enc);
  };
  BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 128;
    for (var i2 = 1; i2 < k; i2++)
      res[i2] = 0;
    len <<= 3;
    if (this.endian === "big") {
      for (var t2 = 8; t2 < this.padLength; t2++)
        res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = len >>> 24 & 255;
      res[i2++] = len >>> 16 & 255;
      res[i2++] = len >>> 8 & 255;
      res[i2++] = len & 255;
    } else {
      res[i2++] = len & 255;
      res[i2++] = len >>> 8 & 255;
      res[i2++] = len >>> 16 & 255;
      res[i2++] = len >>> 24 & 255;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      for (t2 = 8; t2 < this.padLength; t2++)
        res[i2++] = 0;
    }
    return res;
  };
  return common$2;
}
var sha = {};
var common$1 = {};
var hasRequiredCommon;
function requireCommon() {
  if (hasRequiredCommon) return common$1;
  hasRequiredCommon = 1;
  var utils2 = requireUtils$2();
  var rotr32 = utils2.rotr32;
  function ft_1(s2, x2, y, z2) {
    if (s2 === 0)
      return ch32(x2, y, z2);
    if (s2 === 1 || s2 === 3)
      return p32(x2, y, z2);
    if (s2 === 2)
      return maj32(x2, y, z2);
  }
  common$1.ft_1 = ft_1;
  function ch32(x2, y, z2) {
    return x2 & y ^ ~x2 & z2;
  }
  common$1.ch32 = ch32;
  function maj32(x2, y, z2) {
    return x2 & y ^ x2 & z2 ^ y & z2;
  }
  common$1.maj32 = maj32;
  function p32(x2, y, z2) {
    return x2 ^ y ^ z2;
  }
  common$1.p32 = p32;
  function s0_256(x2) {
    return rotr32(x2, 2) ^ rotr32(x2, 13) ^ rotr32(x2, 22);
  }
  common$1.s0_256 = s0_256;
  function s1_256(x2) {
    return rotr32(x2, 6) ^ rotr32(x2, 11) ^ rotr32(x2, 25);
  }
  common$1.s1_256 = s1_256;
  function g0_256(x2) {
    return rotr32(x2, 7) ^ rotr32(x2, 18) ^ x2 >>> 3;
  }
  common$1.g0_256 = g0_256;
  function g1_256(x2) {
    return rotr32(x2, 17) ^ rotr32(x2, 19) ^ x2 >>> 10;
  }
  common$1.g1_256 = g1_256;
  return common$1;
}
var _1;
var hasRequired_1;
function require_1() {
  if (hasRequired_1) return _1;
  hasRequired_1 = 1;
  var utils2 = requireUtils$2();
  var common2 = requireCommon$1();
  var shaCommon = requireCommon();
  var rotl32 = utils2.rotl32;
  var sum32 = utils2.sum32;
  var sum32_5 = utils2.sum32_5;
  var ft_1 = shaCommon.ft_1;
  var BlockHash = common2.BlockHash;
  var sha1_K = [
    1518500249,
    1859775393,
    2400959708,
    3395469782
  ];
  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();
    BlockHash.call(this);
    this.h = [
      1732584193,
      4023233417,
      2562383102,
      271733878,
      3285377520
    ];
    this.W = new Array(80);
  }
  utils2.inherits(SHA1, BlockHash);
  _1 = SHA1;
  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;
  SHA1.prototype._update = function _update(msg, start) {
    var W2 = this.W;
    for (var i2 = 0; i2 < 16; i2++)
      W2[i2] = msg[start + i2];
    for (; i2 < W2.length; i2++)
      W2[i2] = rotl32(W2[i2 - 3] ^ W2[i2 - 8] ^ W2[i2 - 14] ^ W2[i2 - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c2 = this.h[2];
    var d2 = this.h[3];
    var e = this.h[4];
    for (i2 = 0; i2 < W2.length; i2++) {
      var s2 = ~~(i2 / 20);
      var t2 = sum32_5(rotl32(a, 5), ft_1(s2, b, c2, d2), e, W2[i2], sha1_K[s2]);
      e = d2;
      d2 = c2;
      c2 = rotl32(b, 30);
      b = a;
      a = t2;
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c2);
    this.h[3] = sum32(this.h[3], d2);
    this.h[4] = sum32(this.h[4], e);
  };
  SHA1.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h, "big");
    else
      return utils2.split32(this.h, "big");
  };
  return _1;
}
var _256;
var hasRequired_256;
function require_256() {
  if (hasRequired_256) return _256;
  hasRequired_256 = 1;
  var utils2 = requireUtils$2();
  var common2 = requireCommon$1();
  var shaCommon = requireCommon();
  var assert = requireMinimalisticAssert();
  var sum32 = utils2.sum32;
  var sum32_4 = utils2.sum32_4;
  var sum32_5 = utils2.sum32_5;
  var ch32 = shaCommon.ch32;
  var maj32 = shaCommon.maj32;
  var s0_256 = shaCommon.s0_256;
  var s1_256 = shaCommon.s1_256;
  var g0_256 = shaCommon.g0_256;
  var g1_256 = shaCommon.g1_256;
  var BlockHash = common2.BlockHash;
  var sha256_K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ];
  function SHA256() {
    if (!(this instanceof SHA256))
      return new SHA256();
    BlockHash.call(this);
    this.h = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils2.inherits(SHA256, BlockHash);
  _256 = SHA256;
  SHA256.blockSize = 512;
  SHA256.outSize = 256;
  SHA256.hmacStrength = 192;
  SHA256.padLength = 64;
  SHA256.prototype._update = function _update(msg, start) {
    var W2 = this.W;
    for (var i2 = 0; i2 < 16; i2++)
      W2[i2] = msg[start + i2];
    for (; i2 < W2.length; i2++)
      W2[i2] = sum32_4(g1_256(W2[i2 - 2]), W2[i2 - 7], g0_256(W2[i2 - 15]), W2[i2 - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c2 = this.h[2];
    var d2 = this.h[3];
    var e = this.h[4];
    var f2 = this.h[5];
    var g2 = this.h[6];
    var h2 = this.h[7];
    assert(this.k.length === W2.length);
    for (i2 = 0; i2 < W2.length; i2++) {
      var T1 = sum32_5(h2, s1_256(e), ch32(e, f2, g2), this.k[i2], W2[i2]);
      var T2 = sum32(s0_256(a), maj32(a, b, c2));
      h2 = g2;
      g2 = f2;
      f2 = e;
      e = sum32(d2, T1);
      d2 = c2;
      c2 = b;
      b = a;
      a = sum32(T1, T2);
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c2);
    this.h[3] = sum32(this.h[3], d2);
    this.h[4] = sum32(this.h[4], e);
    this.h[5] = sum32(this.h[5], f2);
    this.h[6] = sum32(this.h[6], g2);
    this.h[7] = sum32(this.h[7], h2);
  };
  SHA256.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h, "big");
    else
      return utils2.split32(this.h, "big");
  };
  return _256;
}
var _224;
var hasRequired_224;
function require_224() {
  if (hasRequired_224) return _224;
  hasRequired_224 = 1;
  var utils2 = requireUtils$2();
  var SHA256 = require_256();
  function SHA224() {
    if (!(this instanceof SHA224))
      return new SHA224();
    SHA256.call(this);
    this.h = [
      3238371032,
      914150663,
      812702999,
      4144912697,
      4290775857,
      1750603025,
      1694076839,
      3204075428
    ];
  }
  utils2.inherits(SHA224, SHA256);
  _224 = SHA224;
  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;
  SHA224.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h.slice(0, 7), "big");
    else
      return utils2.split32(this.h.slice(0, 7), "big");
  };
  return _224;
}
var _512;
var hasRequired_512;
function require_512() {
  if (hasRequired_512) return _512;
  hasRequired_512 = 1;
  var utils2 = requireUtils$2();
  var common2 = requireCommon$1();
  var assert = requireMinimalisticAssert();
  var rotr64_hi = utils2.rotr64_hi;
  var rotr64_lo = utils2.rotr64_lo;
  var shr64_hi = utils2.shr64_hi;
  var shr64_lo = utils2.shr64_lo;
  var sum64 = utils2.sum64;
  var sum64_hi = utils2.sum64_hi;
  var sum64_lo = utils2.sum64_lo;
  var sum64_4_hi = utils2.sum64_4_hi;
  var sum64_4_lo = utils2.sum64_4_lo;
  var sum64_5_hi = utils2.sum64_5_hi;
  var sum64_5_lo = utils2.sum64_5_lo;
  var BlockHash = common2.BlockHash;
  var sha512_K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
  ];
  function SHA512() {
    if (!(this instanceof SHA512))
      return new SHA512();
    BlockHash.call(this);
    this.h = [
      1779033703,
      4089235720,
      3144134277,
      2227873595,
      1013904242,
      4271175723,
      2773480762,
      1595750129,
      1359893119,
      2917565137,
      2600822924,
      725511199,
      528734635,
      4215389547,
      1541459225,
      327033209
    ];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils2.inherits(SHA512, BlockHash);
  _512 = SHA512;
  SHA512.blockSize = 1024;
  SHA512.outSize = 512;
  SHA512.hmacStrength = 192;
  SHA512.padLength = 128;
  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W2 = this.W;
    for (var i2 = 0; i2 < 32; i2++)
      W2[i2] = msg[start + i2];
    for (; i2 < W2.length; i2 += 2) {
      var c0_hi = g1_512_hi(W2[i2 - 4], W2[i2 - 3]);
      var c0_lo = g1_512_lo(W2[i2 - 4], W2[i2 - 3]);
      var c1_hi = W2[i2 - 14];
      var c1_lo = W2[i2 - 13];
      var c2_hi = g0_512_hi(W2[i2 - 30], W2[i2 - 29]);
      var c2_lo = g0_512_lo(W2[i2 - 30], W2[i2 - 29]);
      var c3_hi = W2[i2 - 32];
      var c3_lo = W2[i2 - 31];
      W2[i2] = sum64_4_hi(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo
      );
      W2[i2 + 1] = sum64_4_lo(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo
      );
    }
  };
  SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W2 = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert(this.k.length === W2.length);
    for (var i2 = 0; i2 < W2.length; i2 += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i2];
      var c3_lo = this.k[i2 + 1];
      var c4_hi = W2[i2];
      var c4_lo = W2[i2 + 1];
      var T1_hi = sum64_5_hi(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo,
        c4_hi,
        c4_lo
      );
      var T1_lo = sum64_5_lo(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo,
        c4_hi,
        c4_lo
      );
      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      eh = sum64_hi(dh, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);
      dh = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
  };
  SHA512.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h, "big");
    else
      return utils2.split32(this.h, "big");
  };
  function ch64_hi(xh, xl, yh, yl, zh2) {
    var r = xh & yh ^ ~xh & zh2;
    if (r < 0)
      r += 4294967296;
    return r;
  }
  function ch64_lo(xh, xl, yh, yl, zh2, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0)
      r += 4294967296;
    return r;
  }
  function maj64_hi(xh, xl, yh, yl, zh2) {
    var r = xh & yh ^ xh & zh2 ^ yh & zh2;
    if (r < 0)
      r += 4294967296;
    return r;
  }
  function maj64_lo(xh, xl, yh, yl, zh2, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0)
      r += 4294967296;
    return r;
  }
  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2);
    var c2_hi = rotr64_hi(xl, xh, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 4294967296;
    return r;
  }
  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2);
    var c2_lo = rotr64_lo(xl, xh, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 4294967296;
    return r;
  }
  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 4294967296;
    return r;
  }
  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 4294967296;
    return r;
  }
  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 4294967296;
    return r;
  }
  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 4294967296;
    return r;
  }
  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29);
    var c2_hi = shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 4294967296;
    return r;
  }
  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29);
    var c2_lo = shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 4294967296;
    return r;
  }
  return _512;
}
var _384;
var hasRequired_384;
function require_384() {
  if (hasRequired_384) return _384;
  hasRequired_384 = 1;
  var utils2 = requireUtils$2();
  var SHA512 = require_512();
  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();
    SHA512.call(this);
    this.h = [
      3418070365,
      3238371032,
      1654270250,
      914150663,
      2438529370,
      812702999,
      355462360,
      4144912697,
      1731405415,
      4290775857,
      2394180231,
      1750603025,
      3675008525,
      1694076839,
      1203062813,
      3204075428
    ];
  }
  utils2.inherits(SHA384, SHA512);
  _384 = SHA384;
  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;
  SHA384.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h.slice(0, 12), "big");
    else
      return utils2.split32(this.h.slice(0, 12), "big");
  };
  return _384;
}
var hasRequiredSha;
function requireSha() {
  if (hasRequiredSha) return sha;
  hasRequiredSha = 1;
  sha.sha1 = require_1();
  sha.sha224 = require_224();
  sha.sha256 = require_256();
  sha.sha384 = require_384();
  sha.sha512 = require_512();
  return sha;
}
var ripemd = {};
var hasRequiredRipemd;
function requireRipemd() {
  if (hasRequiredRipemd) return ripemd;
  hasRequiredRipemd = 1;
  var utils2 = requireUtils$2();
  var common2 = requireCommon$1();
  var rotl32 = utils2.rotl32;
  var sum32 = utils2.sum32;
  var sum32_3 = utils2.sum32_3;
  var sum32_4 = utils2.sum32_4;
  var BlockHash = common2.BlockHash;
  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();
    BlockHash.call(this);
    this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
    this.endian = "little";
  }
  utils2.inherits(RIPEMD160, BlockHash);
  ripemd.ripemd160 = RIPEMD160;
  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;
  RIPEMD160.prototype._update = function update2(msg, start) {
    var A2 = this.h[0];
    var B2 = this.h[1];
    var C2 = this.h[2];
    var D2 = this.h[3];
    var E2 = this.h[4];
    var Ah = A2;
    var Bh = B2;
    var Ch = C2;
    var Dh = D2;
    var Eh = E2;
    for (var j2 = 0; j2 < 80; j2++) {
      var T2 = sum32(
        rotl32(
          sum32_4(A2, f2(j2, B2, C2, D2), msg[r[j2] + start], K2(j2)),
          s2[j2]
        ),
        E2
      );
      A2 = E2;
      E2 = D2;
      D2 = rotl32(C2, 10);
      C2 = B2;
      B2 = T2;
      T2 = sum32(
        rotl32(
          sum32_4(Ah, f2(79 - j2, Bh, Ch, Dh), msg[rh[j2] + start], Kh(j2)),
          sh[j2]
        ),
        Eh
      );
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T2;
    }
    T2 = sum32_3(this.h[1], C2, Dh);
    this.h[1] = sum32_3(this.h[2], D2, Eh);
    this.h[2] = sum32_3(this.h[3], E2, Ah);
    this.h[3] = sum32_3(this.h[4], A2, Bh);
    this.h[4] = sum32_3(this.h[0], B2, Ch);
    this.h[0] = T2;
  };
  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h, "little");
    else
      return utils2.split32(this.h, "little");
  };
  function f2(j2, x2, y, z2) {
    if (j2 <= 15)
      return x2 ^ y ^ z2;
    else if (j2 <= 31)
      return x2 & y | ~x2 & z2;
    else if (j2 <= 47)
      return (x2 | ~y) ^ z2;
    else if (j2 <= 63)
      return x2 & z2 | y & ~z2;
    else
      return x2 ^ (y | ~z2);
  }
  function K2(j2) {
    if (j2 <= 15)
      return 0;
    else if (j2 <= 31)
      return 1518500249;
    else if (j2 <= 47)
      return 1859775393;
    else if (j2 <= 63)
      return 2400959708;
    else
      return 2840853838;
  }
  function Kh(j2) {
    if (j2 <= 15)
      return 1352829926;
    else if (j2 <= 31)
      return 1548603684;
    else if (j2 <= 47)
      return 1836072691;
    else if (j2 <= 63)
      return 2053994217;
    else
      return 0;
  }
  var r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
  ];
  var rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
  ];
  var s2 = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
  ];
  var sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
  ];
  return ripemd;
}
var hmac;
var hasRequiredHmac;
function requireHmac() {
  if (hasRequiredHmac) return hmac;
  hasRequiredHmac = 1;
  var utils2 = requireUtils$2();
  var assert = requireMinimalisticAssert();
  function Hmac(hash2, key2, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash2, key2, enc);
    this.Hash = hash2;
    this.blockSize = hash2.blockSize / 8;
    this.outSize = hash2.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils2.toArray(key2, enc));
  }
  hmac = Hmac;
  Hmac.prototype._init = function init2(key2) {
    if (key2.length > this.blockSize)
      key2 = new this.Hash().update(key2).digest();
    assert(key2.length <= this.blockSize);
    for (var i2 = key2.length; i2 < this.blockSize; i2++)
      key2.push(0);
    for (i2 = 0; i2 < key2.length; i2++)
      key2[i2] ^= 54;
    this.inner = new this.Hash().update(key2);
    for (i2 = 0; i2 < key2.length; i2++)
      key2[i2] ^= 106;
    this.outer = new this.Hash().update(key2);
  };
  Hmac.prototype.update = function update2(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };
  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };
  return hmac;
}
var hasRequiredHash;
function requireHash() {
  if (hasRequiredHash) return hash$1;
  hasRequiredHash = 1;
  (function(exports) {
    var hash2 = exports;
    hash2.utils = requireUtils$2();
    hash2.common = requireCommon$1();
    hash2.sha = requireSha();
    hash2.ripemd = requireRipemd();
    hash2.hmac = requireHmac();
    hash2.sha1 = hash2.sha.sha1;
    hash2.sha256 = hash2.sha.sha256;
    hash2.sha224 = hash2.sha.sha224;
    hash2.sha384 = hash2.sha.sha384;
    hash2.sha512 = hash2.sha.sha512;
    hash2.ripemd160 = hash2.ripemd.ripemd160;
  })(hash$1);
  return hash$1;
}
var hashExports = requireHash();
var bn$1 = { exports: {} };
var bn = bn$1.exports;
var hasRequiredBn;
function requireBn() {
  if (hasRequiredBn) return bn$1.exports;
  hasRequiredBn = 1;
  (function(module) {
    (function(module2, exports) {
      function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN2(number, base2, endian) {
        if (BN2.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN2;
      } else {
        exports.BN = BN2;
      }
      BN2.BN = BN2;
      BN2.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require$$0$1.Buffer;
        }
      } catch (e) {
      }
      BN2.isBN = function isBN(num) {
        if (num instanceof BN2) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
      };
      BN2.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN2.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN2.prototype._init = function init2(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base2 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN2.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN2.prototype._initArray = function _initArray(number, base2, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var j2, w;
        var off = 0;
        if (endian === "be") {
          for (i2 = number.length - 1, j2 = 0; i2 >= 0; i2 -= 3) {
            w = number[i2] | number[i2 - 1] << 8 | number[i2 - 2] << 16;
            this.words[j2] |= w << off & 67108863;
            this.words[j2 + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j2++;
            }
          }
        } else if (endian === "le") {
          for (i2 = 0, j2 = 0; i2 < number.length; i2 += 3) {
            w = number[i2] | number[i2 + 1] << 8 | number[i2 + 2] << 16;
            this.words[j2] |= w << off & 67108863;
            this.words[j2 + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j2++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c2 = string.charCodeAt(index);
        if (c2 >= 65 && c2 <= 70) {
          return c2 - 55;
        } else if (c2 >= 97 && c2 <= 102) {
          return c2 - 87;
        } else {
          return c2 - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN2.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var off = 0;
        var j2 = 0;
        var w;
        if (endian === "be") {
          for (i2 = number.length - 1; i2 >= start; i2 -= 2) {
            w = parseHexByte(number, start, i2) << off;
            this.words[j2] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j2 += 1;
              this.words[j2] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number.length; i2 += 2) {
            w = parseHexByte(number, start, i2) << off;
            this.words[j2] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j2 += 1;
              this.words[j2] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i2 = start; i2 < len; i2++) {
          var c2 = str.charCodeAt(i2) - 48;
          r *= mul;
          if (c2 >= 49) {
            r += c2 - 49 + 10;
          } else if (c2 >= 17) {
            r += c2 - 17 + 10;
          } else {
            r += c2;
          }
        }
        return r;
      }
      BN2.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i2 = start; i2 < end; i2 += limbLen) {
          word = parseBase(number, i2, i2 + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i2, number.length, base2);
          for (i2 = 0; i2 < mod; i2++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN2.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          dest.words[i2] = this.words[i2];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN2.prototype.clone = function clone() {
        var r = new BN2(null);
        this.copy(r);
        return r;
      };
      BN2.prototype._expand = function _expand(size2) {
        while (this.length < size2) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN2.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN2.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN2.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN2.prototype.toString = function toString2(base2, padding) {
        base2 = base2 || 10;
        padding = padding | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w = this.words[i2];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i2--;
            }
            if (carry !== 0 || i2 !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c2 = this.clone();
          c2.negative = 0;
          while (!c2.isZero()) {
            var r = c2.modn(groupBase).toString(base2);
            c2 = c2.idivn(groupBase);
            if (!c2.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN2.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN2.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN2.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN2.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i2;
        var q2 = this.clone();
        if (!littleEndian) {
          for (i2 = 0; i2 < reqLength - byteLength; i2++) {
            res[i2] = 0;
          }
          for (i2 = 0; !q2.isZero(); i2++) {
            b = q2.andln(255);
            q2.iushrn(8);
            res[reqLength - i2 - 1] = b;
          }
        } else {
          for (i2 = 0; !q2.isZero(); i2++) {
            b = q2.andln(255);
            q2.iushrn(8);
            res[i2] = b;
          }
          for (; i2 < reqLength; i2++) {
            res[i2] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN2.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN2.prototype._countBits = function _countBits(w) {
          var t2 = w;
          var r = 0;
          if (t2 >= 4096) {
            r += 13;
            t2 >>>= 13;
          }
          if (t2 >= 64) {
            r += 7;
            t2 >>>= 7;
          }
          if (t2 >= 8) {
            r += 4;
            t2 >>>= 4;
          }
          if (t2 >= 2) {
            r += 2;
            t2 >>>= 2;
          }
          return r + t2;
        };
      }
      BN2.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t2 = w;
        var r = 0;
        if ((t2 & 8191) === 0) {
          r += 13;
          t2 >>>= 13;
        }
        if ((t2 & 127) === 0) {
          r += 7;
          t2 >>>= 7;
        }
        if ((t2 & 15) === 0) {
          r += 4;
          t2 >>>= 4;
        }
        if ((t2 & 3) === 0) {
          r += 2;
          t2 >>>= 2;
        }
        if ((t2 & 1) === 0) {
          r++;
        }
        return r;
      };
      BN2.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN2.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var b = this._zeroBits(this.words[i2]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };
      BN2.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN2.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN2.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN2.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN2.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN2.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN2.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i2 = 0; i2 < num.length; i2++) {
          this.words[i2] = this.words[i2] | num.words[i2];
        }
        return this.strip();
      };
      BN2.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN2.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN2.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN2.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = this.words[i2] & num.words[i2];
        }
        this.length = b.length;
        return this.strip();
      };
      BN2.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN2.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN2.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN2.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = a.words[i2] ^ b.words[i2];
        }
        if (this !== a) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN2.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN2.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN2.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN2.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i2 = 0; i2 < bytesNeeded; i2++) {
          this.words[i2] = ~this.words[i2] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN2.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN2.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN2.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r = (a.words[i2] | 0) + (b.words[i2] | 0) + carry;
          this.words[i2] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r = (a.words[i2] | 0) + carry;
          this.words[i2] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        return this;
      };
      BN2.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN2.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r = (a.words[i2] | 0) - (b.words[i2] | 0) + carry;
          carry = r >> 26;
          this.words[i2] = r & 67108863;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r = (a.words[i2] | 0) + carry;
          carry = r >> 26;
          this.words[i2] = r & 67108863;
        }
        if (carry === 0 && i2 < a.length && a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = Math.max(this.length, i2);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN2.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j2 = Math.max(0, k - self2.length + 1); j2 <= maxJ; j2++) {
            var i2 = k - j2 | 0;
            a = self2.words[i2] | 0;
            b = num.words[j2] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c2 = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c2 !== 0) {
          o[19] = c2;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j2 = Math.max(0, k - self2.length + 1); j2 <= maxJ; j2++) {
            var i2 = k - j2;
            var a = self2.words[i2] | 0;
            var b = num.words[j2] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN2.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x2, y) {
        this.x = x2;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N2) {
        var t2 = new Array(N2);
        var l2 = BN2.prototype._countBits(N2) - 1;
        for (var i2 = 0; i2 < N2; i2++) {
          t2[i2] = this.revBin(i2, l2, N2);
        }
        return t2;
      };
      FFTM.prototype.revBin = function revBin(x2, l2, N2) {
        if (x2 === 0 || x2 === N2 - 1) return x2;
        var rb = 0;
        for (var i2 = 0; i2 < l2; i2++) {
          rb |= (x2 & 1) << l2 - i2 - 1;
          x2 >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N2) {
        for (var i2 = 0; i2 < N2; i2++) {
          rtws[i2] = rws[rbt[i2]];
          itws[i2] = iws[rbt[i2]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N2, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N2);
        for (var s2 = 1; s2 < N2; s2 <<= 1) {
          var l2 = s2 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l2);
          var itwdf = Math.sin(2 * Math.PI / l2);
          for (var p2 = 0; p2 < N2; p2 += l2) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j2 = 0; j2 < s2; j2++) {
              var re = rtws[p2 + j2];
              var ie = itws[p2 + j2];
              var ro = rtws[p2 + j2 + s2];
              var io = itws[p2 + j2 + s2];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p2 + j2] = re + ro;
              itws[p2 + j2] = ie + io;
              rtws[p2 + j2 + s2] = re - ro;
              itws[p2 + j2 + s2] = ie - io;
              if (j2 !== l2) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n2, m2) {
        var N2 = Math.max(m2, n2) | 1;
        var odd = N2 & 1;
        var i2 = 0;
        for (N2 = N2 / 2 | 0; N2; N2 = N2 >>> 1) {
          i2++;
        }
        return 1 << i2 + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N2) {
        if (N2 <= 1) return;
        for (var i2 = 0; i2 < N2 / 2; i2++) {
          var t2 = rws[i2];
          rws[i2] = rws[N2 - i2 - 1];
          rws[N2 - i2 - 1] = t2;
          t2 = iws[i2];
          iws[i2] = -iws[N2 - i2 - 1];
          iws[N2 - i2 - 1] = -t2;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N2) {
        var carry = 0;
        for (var i2 = 0; i2 < N2 / 2; i2++) {
          var w = Math.round(ws[2 * i2 + 1] / N2) * 8192 + Math.round(ws[2 * i2] / N2) + carry;
          ws[i2] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N2) {
        var carry = 0;
        for (var i2 = 0; i2 < len; i2++) {
          carry = carry + (ws[i2] | 0);
          rws[2 * i2] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i2 + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i2 = 2 * len; i2 < N2; ++i2) {
          rws[i2] = 0;
        }
        assert(carry === 0);
        assert((carry & -8192) === 0);
      };
      FFTM.prototype.stub = function stub(N2) {
        var ph = new Array(N2);
        for (var i2 = 0; i2 < N2; i2++) {
          ph[i2] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x2, y, out) {
        var N2 = 2 * this.guessLen13b(x2.length, y.length);
        var rbt = this.makeRBT(N2);
        var _ = this.stub(N2);
        var rws = new Array(N2);
        var rwst = new Array(N2);
        var iwst = new Array(N2);
        var nrws = new Array(N2);
        var nrwst = new Array(N2);
        var niwst = new Array(N2);
        var rmws = out.words;
        rmws.length = N2;
        this.convert13b(x2.words, x2.length, rws, N2);
        this.convert13b(y.words, y.length, nrws, N2);
        this.transform(rws, _, rwst, iwst, N2, rbt);
        this.transform(nrws, _, nrwst, niwst, N2, rbt);
        for (var i2 = 0; i2 < N2; i2++) {
          var rx = rwst[i2] * nrwst[i2] - iwst[i2] * niwst[i2];
          iwst[i2] = rwst[i2] * niwst[i2] + iwst[i2] * nrwst[i2];
          rwst[i2] = rx;
        }
        this.conjugate(rwst, iwst, N2);
        this.transform(rwst, iwst, rmws, _, N2, rbt);
        this.conjugate(rmws, _, N2);
        this.normalize13b(rmws, N2);
        out.negative = x2.negative ^ y.negative;
        out.length = x2.length + y.length;
        return out.strip();
      };
      BN2.prototype.mul = function mul(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN2.prototype.mulf = function mulf(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN2.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN2.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var w = (this.words[i2] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i2] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        this.length = num === 0 ? 1 : this.length;
        return this;
      };
      BN2.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN2.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN2.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN2.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN2(1);
        var res = this;
        for (var i2 = 0; i2 < w.length; i2++, res = res.sqr()) {
          if (w[i2] !== 0) break;
        }
        if (++i2 < w.length) {
          for (var q2 = res.sqr(); i2 < w.length; i2++, q2 = q2.sqr()) {
            if (w[i2] === 0) continue;
            res = res.mul(q2);
          }
        }
        return res;
      };
      BN2.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s2 = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i2;
        if (r !== 0) {
          var carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            var newCarry = this.words[i2] & carryMask;
            var c2 = (this.words[i2] | 0) - newCarry << r;
            this.words[i2] = c2 | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i2] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i2 = this.length - 1; i2 >= 0; i2--) {
            this.words[i2 + s2] = this.words[i2];
          }
          for (i2 = 0; i2 < s2; i2++) {
            this.words[i2] = 0;
          }
          this.length += s2;
        }
        return this.strip();
      };
      BN2.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h2;
        if (hint) {
          h2 = (hint - hint % 26) / 26;
        } else {
          h2 = 0;
        }
        var r = bits % 26;
        var s2 = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h2 -= s2;
        h2 = Math.max(0, h2);
        if (maskedWords) {
          for (var i2 = 0; i2 < s2; i2++) {
            maskedWords.words[i2] = this.words[i2];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0) ;
        else if (this.length > s2) {
          this.length -= s2;
          for (i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = this.words[i2 + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h2); i2--) {
          var word = this.words[i2] | 0;
          this.words[i2] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN2.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN2.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN2.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN2.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN2.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s2 = (bit - r) / 26;
        var q2 = 1 << r;
        if (this.length <= s2) return false;
        var w = this.words[s2];
        return !!(w & q2);
      };
      BN2.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s2 = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN2.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN2.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN2.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
          this.words[i2] -= 67108864;
          if (i2 === this.length - 1) {
            this.words[i2 + 1] = 1;
          } else {
            this.words[i2 + 1]++;
          }
        }
        this.length = Math.max(this.length, i2 + 1);
        return this;
      };
      BN2.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
            this.words[i2] += 67108864;
            this.words[i2 + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN2.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN2.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN2.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN2.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i2;
        this._expand(len);
        var w;
        var carry = 0;
        for (i2 = 0; i2 < num.length; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          var right = (num.words[i2] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i2 + shift] = w & 67108863;
        }
        for (; i2 < this.length - shift; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i2 + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i2 = 0; i2 < this.length; i2++) {
          w = -(this.words[i2] | 0) + carry;
          carry = w >> 26;
          this.words[i2] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN2.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m2 = a.length - b.length;
        var q2;
        if (mode !== "mod") {
          q2 = new BN2(null);
          q2.length = m2 + 1;
          q2.words = new Array(q2.length);
          for (var i2 = 0; i2 < q2.length; i2++) {
            q2.words[i2] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m2);
        if (diff.negative === 0) {
          a = diff;
          if (q2) {
            q2.words[m2] = 1;
          }
        }
        for (var j2 = m2 - 1; j2 >= 0; j2--) {
          var qj = (a.words[b.length + j2] | 0) * 67108864 + (a.words[b.length + j2 - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j2);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j2);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q2) {
            q2.words[j2] = qj;
          }
        }
        if (q2) {
          q2.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q2 || null,
          mod: a
        };
      };
      BN2.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN2(0),
            mod: new BN2(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN2(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN2(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN2(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN2.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN2.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN2.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN2.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN2.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p2 = (1 << 26) % num;
        var acc = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          acc = (p2 * acc + (this.words[i2] | 0)) % num;
        }
        return acc;
      };
      BN2.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var w = (this.words[i2] | 0) + carry * 67108864;
          this.words[i2] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN2.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN2.prototype.egcd = function egcd(p2) {
        assert(p2.negative === 0);
        assert(!p2.isZero());
        var x2 = this;
        var y = p2.clone();
        if (x2.negative !== 0) {
          x2 = x2.umod(p2);
        } else {
          x2 = x2.clone();
        }
        var A2 = new BN2(1);
        var B2 = new BN2(0);
        var C2 = new BN2(0);
        var D2 = new BN2(1);
        var g2 = 0;
        while (x2.isEven() && y.isEven()) {
          x2.iushrn(1);
          y.iushrn(1);
          ++g2;
        }
        var yp = y.clone();
        var xp = x2.clone();
        while (!x2.isZero()) {
          for (var i2 = 0, im = 1; (x2.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
          if (i2 > 0) {
            x2.iushrn(i2);
            while (i2-- > 0) {
              if (A2.isOdd() || B2.isOdd()) {
                A2.iadd(yp);
                B2.isub(xp);
              }
              A2.iushrn(1);
              B2.iushrn(1);
            }
          }
          for (var j2 = 0, jm = 1; (y.words[0] & jm) === 0 && j2 < 26; ++j2, jm <<= 1) ;
          if (j2 > 0) {
            y.iushrn(j2);
            while (j2-- > 0) {
              if (C2.isOdd() || D2.isOdd()) {
                C2.iadd(yp);
                D2.isub(xp);
              }
              C2.iushrn(1);
              D2.iushrn(1);
            }
          }
          if (x2.cmp(y) >= 0) {
            x2.isub(y);
            A2.isub(C2);
            B2.isub(D2);
          } else {
            y.isub(x2);
            C2.isub(A2);
            D2.isub(B2);
          }
        }
        return {
          a: C2,
          b: D2,
          gcd: y.iushln(g2)
        };
      };
      BN2.prototype._invmp = function _invmp(p2) {
        assert(p2.negative === 0);
        assert(!p2.isZero());
        var a = this;
        var b = p2.clone();
        if (a.negative !== 0) {
          a = a.umod(p2);
        } else {
          a = a.clone();
        }
        var x1 = new BN2(1);
        var x2 = new BN2(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i2 = 0, im = 1; (a.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
          if (i2 > 0) {
            a.iushrn(i2);
            while (i2-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j2 = 0, jm = 1; (b.words[0] & jm) === 0 && j2 < 26; ++j2, jm <<= 1) ;
          if (j2 > 0) {
            b.iushrn(j2);
            while (j2-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p2);
        }
        return res;
      };
      BN2.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t2 = a;
            a = b;
            b = t2;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN2.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN2.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN2.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN2.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN2.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s2 = (bit - r) / 26;
        var q2 = 1 << r;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q2;
          return this;
        }
        var carry = q2;
        for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
          var w = this.words[i2] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i2] = w;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN2.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN2.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var a = this.words[i2] | 0;
          var b = num.words[i2] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN2.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN2.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN2.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN2.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN2.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN2.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN2.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN2.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN2.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN2.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN2.red = function red(num) {
        return new Red(num);
      };
      BN2.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN2.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN2.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN2.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN2.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN2.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN2.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN2.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN2.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN2.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN2.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN2.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN2.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN2.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN2.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN2.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN2.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p2) {
        this.name = name;
        this.p = new BN2(p2, 16);
        this.n = this.p.bitLength();
        this.k = new BN2(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN2(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i2 = 0; i2 < outLen; i2++) {
          output.words[i2] = input.words[i2];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i2 = 10; i2 < input.length; i2++) {
          var next = input.words[i2] | 0;
          input.words[i2 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i2 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var w = num.words[i2] | 0;
          lo += w * 977;
          num.words[i2] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var hi = (num.words[i2] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i2] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN2._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m2) {
        if (typeof m2 === "string") {
          var prime = BN2._prime(m2);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m2.gtn(1), "modulus must be greater than 1");
          this.m = m2;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN2(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q2 = this.m.subn(1);
        var s2 = 0;
        while (!q2.isZero() && q2.andln(1) === 0) {
          s2++;
          q2.iushrn(1);
        }
        assert(!q2.isZero());
        var one = new BN2(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z2 = this.m.bitLength();
        z2 = new BN2(2 * z2 * z2).toRed(this);
        while (this.pow(z2, lpow).cmp(nOne) !== 0) {
          z2.redIAdd(nOne);
        }
        var c2 = this.pow(z2, q2);
        var r = this.pow(a, q2.addn(1).iushrn(1));
        var t2 = this.pow(a, q2);
        var m2 = s2;
        while (t2.cmp(one) !== 0) {
          var tmp = t2;
          for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
            tmp = tmp.redSqr();
          }
          assert(i2 < m2);
          var b = this.pow(c2, new BN2(1).iushln(m2 - i2 - 1));
          r = r.redMul(b);
          c2 = b.redSqr();
          t2 = t2.redMul(c2);
          m2 = i2;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN2(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN2(1).toRed(this);
        wnd[1] = a;
        for (var i2 = 2; i2 < wnd.length; i2++) {
          wnd[i2] = this.mul(wnd[i2 - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i2 = num.length - 1; i2 >= 0; i2--) {
          var word = num.words[i2];
          for (var j2 = start - 1; j2 >= 0; j2--) {
            var bit = word >> j2 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i2 !== 0 || j2 !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN2.mont = function mont2(num) {
        return new Mont(num);
      };
      function Mont(m2) {
        Red.call(this, m2);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN2(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t2 = a.imul(b);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN2(0)._forceRed(this);
        var t2 = a.mul(b);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, bn);
  })(bn$1);
  return bn$1.exports;
}
var bnExports = requireBn();
const BN = /* @__PURE__ */ getDefaultExportFromCjs(bnExports);
var elliptic = {};
const version$1 = "6.6.1";
const require$$0 = {
  version: version$1
};
var utils$1 = {};
var utils = {};
var hasRequiredUtils$1;
function requireUtils$1() {
  if (hasRequiredUtils$1) return utils;
  hasRequiredUtils$1 = 1;
  (function(exports) {
    var utils2 = exports;
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== "string") {
        for (var i2 = 0; i2 < msg.length; i2++)
          res[i2] = msg[i2] | 0;
        return res;
      }
      if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (var i2 = 0; i2 < msg.length; i2 += 2)
          res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
      } else {
        for (var i2 = 0; i2 < msg.length; i2++) {
          var c2 = msg.charCodeAt(i2);
          var hi = c2 >> 8;
          var lo = c2 & 255;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils2.toArray = toArray;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    utils2.zero2 = zero2;
    function toHex(msg) {
      var res = "";
      for (var i2 = 0; i2 < msg.length; i2++)
        res += zero2(msg[i2].toString(16));
      return res;
    }
    utils2.toHex = toHex;
    utils2.encode = function encode2(arr, enc) {
      if (enc === "hex")
        return toHex(arr);
      else
        return arr;
    };
  })(utils);
  return utils;
}
var hasRequiredUtils;
function requireUtils() {
  if (hasRequiredUtils) return utils$1;
  hasRequiredUtils = 1;
  (function(exports) {
    var utils2 = exports;
    var BN2 = requireBn();
    var minAssert = requireMinimalisticAssert();
    var minUtils = requireUtils$1();
    utils2.assert = minAssert;
    utils2.toArray = minUtils.toArray;
    utils2.zero2 = minUtils.zero2;
    utils2.toHex = minUtils.toHex;
    utils2.encode = minUtils.encode;
    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      var i2;
      for (i2 = 0; i2 < naf.length; i2 += 1) {
        naf[i2] = 0;
      }
      var ws = 1 << w + 1;
      var k = num.clone();
      for (i2 = 0; i2 < naf.length; i2++) {
        var z2;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z2 = (ws >> 1) - mod;
          else
            z2 = mod;
          k.isubn(z2);
        } else {
          z2 = 0;
        }
        naf[i2] = z2;
        k.iushrn(1);
      }
      return naf;
    }
    utils2.getNAF = getNAF;
    function getJSF(k1, k2) {
      var jsf = [
        [],
        []
      ];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils2.getJSF = getJSF;
    function cachedProperty(obj, name, computer) {
      var key2 = "_" + name;
      obj.prototype[name] = function cachedProperty2() {
        return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
      };
    }
    utils2.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
      return typeof bytes === "string" ? utils2.toArray(bytes, "hex") : bytes;
    }
    utils2.parseBytes = parseBytes;
    function intFromLE(bytes) {
      return new BN2(bytes, "hex", "le");
    }
    utils2.intFromLE = intFromLE;
  })(utils$1);
  return utils$1;
}
var curve = {};
var base;
var hasRequiredBase;
function requireBase() {
  if (hasRequiredBase) return base;
  hasRequiredBase = 1;
  var BN2 = requireBn();
  var utils2 = requireUtils();
  var getNAF = utils2.getNAF;
  var getJSF = utils2.getJSF;
  var assert = utils2.assert;
  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN2(conf.p, 16);
    this.red = conf.prime ? BN2.red(conf.prime) : BN2.mont(this.p);
    this.zero = new BN2(0).toRed(this.red);
    this.one = new BN2(1).toRed(this.red);
    this.two = new BN2(2).toRed(this.red);
    this.n = conf.n && new BN2(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  base = BaseCurve;
  BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p2, k) {
    assert(p2.precomputed);
    var doubles = p2._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    var repr = [];
    var j2;
    var nafW;
    for (j2 = 0; j2 < naf.length; j2 += doubles.step) {
      nafW = 0;
      for (var l2 = j2 + doubles.step - 1; l2 >= j2; l2--)
        nafW = (nafW << 1) + naf[l2];
      repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i2 = I; i2 > 0; i2--) {
      for (j2 = 0; j2 < repr.length; j2++) {
        nafW = repr[j2];
        if (nafW === i2)
          b = b.mixedAdd(doubles.points[j2]);
        else if (nafW === -i2)
          b = b.mixedAdd(doubles.points[j2].neg());
      }
      a = a.add(b);
    }
    return a.toP();
  };
  BaseCurve.prototype._wnafMul = function _wnafMul(p2, k) {
    var w = 4;
    var nafPoints = p2._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    var naf = getNAF(k, w, this._bitLength);
    var acc = this.jpoint(null, null, null);
    for (var i2 = naf.length - 1; i2 >= 0; i2--) {
      for (var l2 = 0; i2 >= 0 && naf[i2] === 0; i2--)
        l2++;
      if (i2 >= 0)
        l2++;
      acc = acc.dblp(l2);
      if (i2 < 0)
        break;
      var z2 = naf[i2];
      assert(z2 !== 0);
      if (p2.type === "affine") {
        if (z2 > 0)
          acc = acc.mixedAdd(wnd[z2 - 1 >> 1]);
        else
          acc = acc.mixedAdd(wnd[-z2 - 1 >> 1].neg());
      } else {
        if (z2 > 0)
          acc = acc.add(wnd[z2 - 1 >> 1]);
        else
          acc = acc.add(wnd[-z2 - 1 >> 1].neg());
      }
    }
    return p2.type === "affine" ? acc.toP() : acc;
  };
  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    var max = 0;
    var i2;
    var j2;
    var p2;
    for (i2 = 0; i2 < len; i2++) {
      p2 = points[i2];
      var nafPoints = p2._getNAFPoints(defW);
      wndWidth[i2] = nafPoints.wnd;
      wnd[i2] = nafPoints.points;
    }
    for (i2 = len - 1; i2 >= 1; i2 -= 2) {
      var a = i2 - 1;
      var b = i2;
      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
        naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
        max = Math.max(naf[a].length, max);
        max = Math.max(naf[b].length, max);
        continue;
      }
      var comb = [
        points[a],
        /* 1 */
        null,
        /* 3 */
        null,
        /* 5 */
        points[b]
        /* 7 */
      ];
      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }
      var index = [
        -3,
        /* -1 -1 */
        -1,
        /* -1 0 */
        -5,
        /* -1 1 */
        -7,
        /* 0 -1 */
        0,
        /* 0 0 */
        7,
        /* 0 1 */
        5,
        /* 1 -1 */
        1,
        /* 1 0 */
        3
        /* 1 1 */
      ];
      var jsf = getJSF(coeffs[a], coeffs[b]);
      max = Math.max(jsf[0].length, max);
      naf[a] = new Array(max);
      naf[b] = new Array(max);
      for (j2 = 0; j2 < max; j2++) {
        var ja = jsf[0][j2] | 0;
        var jb = jsf[1][j2] | 0;
        naf[a][j2] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b][j2] = 0;
        wnd[a] = comb;
      }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (i2 = max; i2 >= 0; i2--) {
      var k = 0;
      while (i2 >= 0) {
        var zero2 = true;
        for (j2 = 0; j2 < len; j2++) {
          tmp[j2] = naf[j2][i2] | 0;
          if (tmp[j2] !== 0)
            zero2 = false;
        }
        if (!zero2)
          break;
        k++;
        i2--;
      }
      if (i2 >= 0)
        k++;
      acc = acc.dblp(k);
      if (i2 < 0)
        break;
      for (j2 = 0; j2 < len; j2++) {
        var z2 = tmp[j2];
        if (z2 === 0)
          continue;
        else if (z2 > 0)
          p2 = wnd[j2][z2 - 1 >> 1];
        else if (z2 < 0)
          p2 = wnd[j2][-z2 - 1 >> 1].neg();
        if (p2.type === "affine")
          acc = acc.mixedAdd(p2);
        else
          acc = acc.add(p2);
      }
    }
    for (i2 = 0; i2 < len; i2++)
      wnd[i2] = null;
    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };
  function BasePoint(curve2, type) {
    this.curve = curve2;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;
  BasePoint.prototype.eq = function eq() {
    throw new Error("Not implemented");
  };
  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };
  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils2.toArray(bytes, enc);
    var len = this.p.byteLength();
    if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
      if (bytes[0] === 6)
        assert(bytes[bytes.length - 1] % 2 === 0);
      else if (bytes[0] === 7)
        assert(bytes[bytes.length - 1] % 2 === 1);
      var res = this.point(
        bytes.slice(1, 1 + len),
        bytes.slice(1 + len, 1 + 2 * len)
      );
      return res;
    } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
    }
    throw new Error("Unknown point format");
  };
  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };
  BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x2 = this.getX().toArray("be", len);
    if (compact)
      return [this.getY().isEven() ? 2 : 3].concat(x2);
    return [4].concat(x2, this.getY().toArray("be", len));
  };
  BasePoint.prototype.encode = function encode2(enc, compact) {
    return utils2.encode(this._encode(compact), enc);
  };
  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;
    var precomputed = {
      doubles: null,
      naf: null,
      beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
  };
  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
      return false;
    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };
  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;
    var doubles = [this];
    var acc = this;
    for (var i2 = 0; i2 < power; i2 += step) {
      for (var j2 = 0; j2 < step; j2++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step,
      points: doubles
    };
  };
  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;
    var res = [this];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i2 = 1; i2 < max; i2++)
      res[i2] = res[i2 - 1].add(dbl);
    return {
      wnd,
      points: res
    };
  };
  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };
  BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for (var i2 = 0; i2 < k; i2++)
      r = r.dbl();
    return r;
  };
  return base;
}
var short;
var hasRequiredShort;
function requireShort() {
  if (hasRequiredShort) return short;
  hasRequiredShort = 1;
  var utils2 = requireUtils();
  var BN2 = requireBn();
  var inherits = requireInherits_browser();
  var Base = requireBase();
  var assert = utils2.assert;
  function ShortCurve(conf) {
    Base.call(this, "short", conf);
    this.a = new BN2(conf.a, 16).toRed(this.red);
    this.b = new BN2(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits(ShortCurve, Base);
  short = ShortCurve;
  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new BN2(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new BN2(conf.lambda, 16);
    } else {
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new BN2(vec.a, 16),
          b: new BN2(vec.b, 16)
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }
    return {
      beta,
      lambda,
      basis
    };
  };
  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    var red = num === this.p ? this.red : BN2.mont(num);
    var tinv = new BN2(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s2 = new BN2(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s2).fromRed();
    var l2 = ntinv.redSub(s2).fromRed();
    return [l1, l2];
  };
  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    var u2 = lambda;
    var v2 = this.n.clone();
    var x1 = new BN2(1);
    var y1 = new BN2(0);
    var x2 = new BN2(0);
    var y2 = new BN2(1);
    var a0;
    var b0;
    var a1;
    var b1;
    var a2;
    var b2;
    var prevR;
    var i2 = 0;
    var r;
    var x3;
    while (u2.cmpn(0) !== 0) {
      var q2 = v2.div(u2);
      r = v2.sub(q2.mul(u2));
      x3 = x2.sub(q2.mul(x1));
      var y = y2.sub(q2.mul(y1));
      if (!a1 && r.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r.neg();
        b1 = x3;
      } else if (a1 && ++i2 === 2) {
        break;
      }
      prevR = r;
      v2 = u2;
      u2 = r;
      x2 = x1;
      x1 = x3;
      y2 = y1;
      y1 = y;
    }
    a2 = r.neg();
    b2 = x3;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.negative) {
      a2 = a2.neg();
      b2 = b2.neg();
    }
    return [
      { a: a1, b: b1 },
      { a: a2, b: b2 }
    ];
  };
  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1, k2 };
  };
  ShortCurve.prototype.pointFromX = function pointFromX(x2, odd) {
    x2 = new BN2(x2, 16);
    if (!x2.red)
      x2 = x2.toRed(this.red);
    var y2 = x2.redSqr().redMul(x2).redIAdd(x2.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();
    return this.point(x2, y);
  };
  ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
      return true;
    var x2 = point.x;
    var y = point.y;
    var ax = this.a.redMul(x2);
    var rhs = x2.redSqr().redMul(x2).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };
  ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for (var i2 = 0; i2 < points.length; i2++) {
      var split = this._endoSplit(coeffs[i2]);
      var p2 = points[i2];
      var beta = p2._getBeta();
      if (split.k1.negative) {
        split.k1.ineg();
        p2 = p2.neg(true);
      }
      if (split.k2.negative) {
        split.k2.ineg();
        beta = beta.neg(true);
      }
      npoints[i2 * 2] = p2;
      npoints[i2 * 2 + 1] = beta;
      ncoeffs[i2 * 2] = split.k1;
      ncoeffs[i2 * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i2 * 2, jacobianResult);
    for (var j2 = 0; j2 < i2 * 2; j2++) {
      npoints[j2] = null;
      ncoeffs[j2] = null;
    }
    return res;
  };
  function Point(curve2, x2, y, isRed) {
    Base.BasePoint.call(this, curve2, "affine");
    if (x2 === null && y === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new BN2(x2, 16);
      this.y = new BN2(y, 16);
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits(Point, Base.BasePoint);
  ShortCurve.prototype.point = function point(x2, y, isRed) {
    return new Point(this, x2, y, isRed);
  };
  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
  };
  Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;
    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve2 = this.curve;
      var endoMul = function(p2) {
        return curve2.point(p2.x.redMul(curve2.endo.beta), p2.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul)
        }
      };
    }
    return beta;
  };
  Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [this.x, this.y];
    return [this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      }
    }];
  };
  Point.fromJSON = function fromJSON(curve2, obj, red) {
    if (typeof obj === "string")
      obj = JSON.parse(obj);
    var res = curve2.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;
    function obj2point(obj2) {
      return curve2.point(obj2[0], obj2[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [res].concat(pre.doubles.points.map(obj2point))
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [res].concat(pre.naf.points.map(obj2point))
      }
    };
    return res;
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };
  Point.prototype.add = function add(p2) {
    if (this.inf)
      return p2;
    if (p2.inf)
      return this;
    if (this.eq(p2))
      return this.dbl();
    if (this.neg().eq(p2))
      return this.curve.point(null, null);
    if (this.x.cmp(p2.x) === 0)
      return this.curve.point(null, null);
    var c2 = this.y.redSub(p2.y);
    if (c2.cmpn(0) !== 0)
      c2 = c2.redMul(this.x.redSub(p2.x).redInvm());
    var nx = c2.redSqr().redISub(this.x).redISub(p2.x);
    var ny = c2.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.dbl = function dbl() {
    if (this.inf)
      return this;
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c2 = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c2.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c2.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.getX = function getX() {
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    return this.y.fromRed();
  };
  Point.prototype.mul = function mul(k) {
    k = new BN2(k, 16);
    if (this.isInfinity())
      return this;
    else if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([this], [k]);
    else
      return this.curve._wnafMul(this, k);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };
  Point.prototype.eq = function eq(p2) {
    return this === p2 || this.inf === p2.inf && (this.inf || this.x.cmp(p2.x) === 0 && this.y.cmp(p2.y) === 0);
  };
  Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p2) {
        return p2.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate)
        }
      };
    }
    return res;
  };
  Point.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };
  function JPoint(curve2, x2, y, z2) {
    Base.BasePoint.call(this, curve2, "jacobian");
    if (x2 === null && y === null && z2 === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new BN2(0);
    } else {
      this.x = new BN2(x2, 16);
      this.y = new BN2(y, 16);
      this.z = new BN2(z2, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
  }
  inherits(JPoint, Base.BasePoint);
  ShortCurve.prototype.jpoint = function jpoint(x2, y, z2) {
    return new JPoint(this, x2, y, z2);
  };
  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
  };
  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };
  JPoint.prototype.add = function add(p2) {
    if (this.isInfinity())
      return p2;
    if (p2.isInfinity())
      return this;
    var pz2 = p2.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p2.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p2.z));
    var s2 = p2.y.redMul(z2.redMul(this.z));
    var h2 = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h2.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h22 = h2.redSqr();
    var h3 = h22.redMul(h2);
    var v2 = u1.redMul(h22);
    var nx = r.redSqr().redIAdd(h3).redISub(v2).redISub(v2);
    var ny = r.redMul(v2.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p2.z).redMul(h2);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mixedAdd = function mixedAdd(p2) {
    if (this.isInfinity())
      return p2.toJ();
    if (p2.isInfinity())
      return this;
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p2.x.redMul(z2);
    var s1 = this.y;
    var s2 = p2.y.redMul(z2).redMul(this.z);
    var h2 = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h2.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h22 = h2.redSqr();
    var h3 = h22.redMul(h2);
    var v2 = u1.redMul(h22);
    var nx = r.redSqr().redIAdd(h3).redISub(v2).redISub(v2);
    var ny = r.redMul(v2.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h2);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();
    var i2;
    if (this.curve.zeroA || this.curve.threeA) {
      var r = this;
      for (i2 = 0; i2 < pow; i2++)
        r = r.dbl();
      return r;
    }
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jyd = jy.redAdd(jy);
    for (i2 = 0; i2 < pow; i2++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c2 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var t1 = jx.redMul(jyd2);
      var nx = c2.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c2.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i2 + 1 < pow)
        jz4 = jz4.redMul(jyd4);
      jx = nx;
      jz = nz;
      jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };
  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };
  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s2 = s2.redIAdd(s2);
      var m2 = xx.redAdd(xx).redIAdd(xx);
      var t2 = m2.redSqr().redISub(s2).redISub(s2);
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      nx = t2;
      ny = m2.redMul(s2.redISub(t2)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c2 = b.redSqr();
      var d2 = this.x.redAdd(b).redSqr().redISub(a).redISub(c2);
      d2 = d2.redIAdd(d2);
      var e = a.redAdd(a).redIAdd(a);
      var f2 = e.redSqr();
      var c8 = c2.redIAdd(c2);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);
      nx = f2.redISub(d2).redISub(d2);
      ny = e.redMul(d2.redISub(nx)).redISub(c8);
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s2 = s2.redIAdd(s2);
      var m2 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      var t2 = m2.redSqr().redISub(s2).redISub(s2);
      nx = t2;
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m2.redMul(s2.redISub(t2)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var delta = this.z.redSqr();
      var gamma = this.y.redSqr();
      var beta = this.x.redMul(gamma);
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c2 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c2.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c2.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var zz = this.z.redSqr();
    var yyyy = yy.redSqr();
    var m2 = xx.redAdd(xx).redIAdd(xx);
    var mm = m2.redSqr();
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    var ee = e.redSqr();
    var t2 = yyyy.redIAdd(yyyy);
    t2 = t2.redIAdd(t2);
    t2 = t2.redIAdd(t2);
    t2 = t2.redIAdd(t2);
    var u2 = m2.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t2);
    var yyu4 = yy.redMul(u2);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    var ny = this.y.redMul(u2.redMul(t2.redISub(u2)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN2(k, kbase);
    return this.curve._wnafMul(this, k);
  };
  JPoint.prototype.eq = function eq(p2) {
    if (p2.type === "affine")
      return this.eq(p2.toJ());
    if (this === p2)
      return true;
    var z2 = this.z.redSqr();
    var pz2 = p2.z.redSqr();
    if (this.x.redMul(pz2).redISub(p2.x.redMul(z2)).cmpn(0) !== 0)
      return false;
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p2.z);
    return this.y.redMul(pz3).redISub(p2.y.redMul(z3)).cmpn(0) === 0;
  };
  JPoint.prototype.eqXToP = function eqXToP(x2) {
    var zs = this.z.redSqr();
    var rx = x2.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc = x2.clone();
    var t2 = this.curve.redN.redMul(zs);
    for (; ; ) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t2);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
  };
  JPoint.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  return short;
}
var mont;
var hasRequiredMont;
function requireMont() {
  if (hasRequiredMont) return mont;
  hasRequiredMont = 1;
  var BN2 = requireBn();
  var inherits = requireInherits_browser();
  var Base = requireBase();
  var utils2 = requireUtils();
  function MontCurve(conf) {
    Base.call(this, "mont", conf);
    this.a = new BN2(conf.a, 16).toRed(this.red);
    this.b = new BN2(conf.b, 16).toRed(this.red);
    this.i4 = new BN2(4).toRed(this.red).redInvm();
    this.two = new BN2(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }
  inherits(MontCurve, Base);
  mont = MontCurve;
  MontCurve.prototype.validate = function validate(point) {
    var x2 = point.normalize().x;
    var x22 = x2.redSqr();
    var rhs = x22.redMul(x2).redAdd(x22.redMul(this.a)).redAdd(x2);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
  };
  function Point(curve2, x2, z2) {
    Base.BasePoint.call(this, curve2, "projective");
    if (x2 === null && z2 === null) {
      this.x = this.curve.one;
      this.z = this.curve.zero;
    } else {
      this.x = new BN2(x2, 16);
      this.z = new BN2(z2, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    }
  }
  inherits(Point, Base.BasePoint);
  MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils2.toArray(bytes, enc), 1);
  };
  MontCurve.prototype.point = function point(x2, z2) {
    return new Point(this, x2, z2);
  };
  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };
  Point.prototype.precompute = function precompute() {
  };
  Point.prototype._encode = function _encode() {
    return this.getX().toArray("be", this.curve.p.byteLength());
  };
  Point.fromJSON = function fromJSON(curve2, obj) {
    return new Point(curve2, obj[0], obj[1] || curve2.one);
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  Point.prototype.dbl = function dbl() {
    var a = this.x.redAdd(this.z);
    var aa = a.redSqr();
    var b = this.x.redSub(this.z);
    var bb = b.redSqr();
    var c2 = aa.redSub(bb);
    var nx = aa.redMul(bb);
    var nz = c2.redMul(bb.redAdd(this.curve.a24.redMul(c2)));
    return this.curve.point(nx, nz);
  };
  Point.prototype.add = function add() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point.prototype.diffAdd = function diffAdd(p2, diff) {
    var a = this.x.redAdd(this.z);
    var b = this.x.redSub(this.z);
    var c2 = p2.x.redAdd(p2.z);
    var d2 = p2.x.redSub(p2.z);
    var da = d2.redMul(a);
    var cb = c2.redMul(b);
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
  };
  Point.prototype.mul = function mul(k) {
    var t2 = k.clone();
    var a = this;
    var b = this.curve.point(null, null);
    var c2 = this;
    for (var bits = []; t2.cmpn(0) !== 0; t2.iushrn(1))
      bits.push(t2.andln(1));
    for (var i2 = bits.length - 1; i2 >= 0; i2--) {
      if (bits[i2] === 0) {
        a = a.diffAdd(b, c2);
        b = b.dbl();
      } else {
        b = a.diffAdd(b, c2);
        a = a.dbl();
      }
    }
    return b;
  };
  Point.prototype.mulAdd = function mulAdd() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
  };
  Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
  };
  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
  return mont;
}
var edwards;
var hasRequiredEdwards;
function requireEdwards() {
  if (hasRequiredEdwards) return edwards;
  hasRequiredEdwards = 1;
  var utils2 = requireUtils();
  var BN2 = requireBn();
  var inherits = requireInherits_browser();
  var Base = requireBase();
  var assert = utils2.assert;
  function EdwardsCurve(conf) {
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, "edwards", conf);
    this.a = new BN2(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN2(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN2(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
  }
  inherits(EdwardsCurve, Base);
  edwards = EdwardsCurve;
  EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
      return num.redNeg();
    else
      return this.a.redMul(num);
  };
  EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
      return num;
    else
      return this.c.redMul(num);
  };
  EdwardsCurve.prototype.jpoint = function jpoint(x2, y, z2, t2) {
    return this.point(x2, y, z2, t2);
  };
  EdwardsCurve.prototype.pointFromX = function pointFromX(x2, odd) {
    x2 = new BN2(x2, 16);
    if (!x2.red)
      x2 = x2.toRed(this.red);
    var x22 = x2.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x22));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x22));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();
    return this.point(x2, y);
  };
  EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN2(y, 16);
    if (!y.red)
      y = y.toRed(this.red);
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
      if (odd)
        throw new Error("invalid point");
      else
        return this.point(this.zero, y);
    }
    var x3 = x2.redSqrt();
    if (x3.redSqr().redSub(x2).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    if (x3.fromRed().isOdd() !== odd)
      x3 = x3.redNeg();
    return this.point(x3, y);
  };
  EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
      return true;
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
  };
  function Point(curve2, x2, y, z2, t2) {
    Base.BasePoint.call(this, curve2, "projective");
    if (x2 === null && y === null && z2 === null) {
      this.x = this.curve.zero;
      this.y = this.curve.one;
      this.z = this.curve.one;
      this.t = this.curve.zero;
      this.zOne = true;
    } else {
      this.x = new BN2(x2, 16);
      this.y = new BN2(y, 16);
      this.z = z2 ? new BN2(z2, 16) : this.curve.one;
      this.t = t2 && new BN2(t2, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      if (this.t && !this.t.red)
        this.t = this.t.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
      if (this.curve.extended && !this.t) {
        this.t = this.x.redMul(this.y);
        if (!this.zOne)
          this.t = this.t.redMul(this.z.redInvm());
      }
    }
  }
  inherits(Point, Base.BasePoint);
  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };
  EdwardsCurve.prototype.point = function point(x2, y, z2, t2) {
    return new Point(this, x2, y, z2, t2);
  };
  Point.fromJSON = function fromJSON(curve2, obj) {
    return new Point(curve2, obj[0], obj[1], obj[2]);
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
  };
  Point.prototype._extDbl = function _extDbl() {
    var a = this.x.redSqr();
    var b = this.y.redSqr();
    var c2 = this.z.redSqr();
    c2 = c2.redIAdd(c2);
    var d2 = this.curve._mulA(a);
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    var g2 = d2.redAdd(b);
    var f2 = g2.redSub(c2);
    var h2 = d2.redSub(b);
    var nx = e.redMul(f2);
    var ny = g2.redMul(h2);
    var nt = e.redMul(h2);
    var nz = f2.redMul(g2);
    return this.curve.point(nx, ny, nz, nt);
  };
  Point.prototype._projDbl = function _projDbl() {
    var b = this.x.redAdd(this.y).redSqr();
    var c2 = this.x.redSqr();
    var d2 = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h2;
    var j2;
    if (this.curve.twisted) {
      e = this.curve._mulA(c2);
      var f2 = e.redAdd(d2);
      if (this.zOne) {
        nx = b.redSub(c2).redSub(d2).redMul(f2.redSub(this.curve.two));
        ny = f2.redMul(e.redSub(d2));
        nz = f2.redSqr().redSub(f2).redSub(f2);
      } else {
        h2 = this.z.redSqr();
        j2 = f2.redSub(h2).redISub(h2);
        nx = b.redSub(c2).redISub(d2).redMul(j2);
        ny = f2.redMul(e.redSub(d2));
        nz = f2.redMul(j2);
      }
    } else {
      e = c2.redAdd(d2);
      h2 = this.curve._mulC(this.z).redSqr();
      j2 = e.redSub(h2).redSub(h2);
      nx = this.curve._mulC(b.redISub(e)).redMul(j2);
      ny = this.curve._mulC(e).redMul(c2.redISub(d2));
      nz = e.redMul(j2);
    }
    return this.curve.point(nx, ny, nz);
  };
  Point.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.extended)
      return this._extDbl();
    else
      return this._projDbl();
  };
  Point.prototype._extAdd = function _extAdd(p2) {
    var a = this.y.redSub(this.x).redMul(p2.y.redSub(p2.x));
    var b = this.y.redAdd(this.x).redMul(p2.y.redAdd(p2.x));
    var c2 = this.t.redMul(this.curve.dd).redMul(p2.t);
    var d2 = this.z.redMul(p2.z.redAdd(p2.z));
    var e = b.redSub(a);
    var f2 = d2.redSub(c2);
    var g2 = d2.redAdd(c2);
    var h2 = b.redAdd(a);
    var nx = e.redMul(f2);
    var ny = g2.redMul(h2);
    var nt = e.redMul(h2);
    var nz = f2.redMul(g2);
    return this.curve.point(nx, ny, nz, nt);
  };
  Point.prototype._projAdd = function _projAdd(p2) {
    var a = this.z.redMul(p2.z);
    var b = a.redSqr();
    var c2 = this.x.redMul(p2.x);
    var d2 = this.y.redMul(p2.y);
    var e = this.curve.d.redMul(c2).redMul(d2);
    var f2 = b.redSub(e);
    var g2 = b.redAdd(e);
    var tmp = this.x.redAdd(this.y).redMul(p2.x.redAdd(p2.y)).redISub(c2).redISub(d2);
    var nx = a.redMul(f2).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
      ny = a.redMul(g2).redMul(d2.redSub(this.curve._mulA(c2)));
      nz = f2.redMul(g2);
    } else {
      ny = a.redMul(g2).redMul(d2.redSub(c2));
      nz = this.curve._mulC(f2).redMul(g2);
    }
    return this.curve.point(nx, ny, nz);
  };
  Point.prototype.add = function add(p2) {
    if (this.isInfinity())
      return p2;
    if (p2.isInfinity())
      return this;
    if (this.curve.extended)
      return this._extAdd(p2);
    else
      return this._projAdd(p2);
  };
  Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else
      return this.curve._wnafMul(this, k);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    return this.curve._wnafMulAdd(1, [this, p2], [k1, k2], 2, false);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    return this.curve._wnafMulAdd(1, [this, p2], [k1, k2], 2, true);
  };
  Point.prototype.normalize = function normalize() {
    if (this.zOne)
      return this;
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t)
      this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
  };
  Point.prototype.neg = function neg() {
    return this.curve.point(
      this.x.redNeg(),
      this.y,
      this.z,
      this.t && this.t.redNeg()
    );
  };
  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
  };
  Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
  };
  Point.prototype.eqXToP = function eqXToP(x2) {
    var rx = x2.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc = x2.clone();
    var t2 = this.curve.redN.redMul(this.z);
    for (; ; ) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t2);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  Point.prototype.toP = Point.prototype.normalize;
  Point.prototype.mixedAdd = Point.prototype.add;
  return edwards;
}
var hasRequiredCurve;
function requireCurve() {
  if (hasRequiredCurve) return curve;
  hasRequiredCurve = 1;
  (function(exports) {
    var curve2 = exports;
    curve2.base = requireBase();
    curve2.short = requireShort();
    curve2.mont = requireMont();
    curve2.edwards = requireEdwards();
  })(curve);
  return curve;
}
var curves$1 = {};
var secp256k1;
var hasRequiredSecp256k1;
function requireSecp256k1() {
  if (hasRequiredSecp256k1) return secp256k1;
  hasRequiredSecp256k1 = 1;
  secp256k1 = {
    doubles: {
      step: 4,
      points: [
        [
          "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
          "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
        ],
        [
          "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
          "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
        ],
        [
          "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
          "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
        ],
        [
          "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
          "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
        ],
        [
          "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
          "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
        ],
        [
          "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
          "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
        ],
        [
          "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
          "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
        ],
        [
          "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
          "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
        ],
        [
          "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
          "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
        ],
        [
          "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
          "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
        ],
        [
          "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
          "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
        ],
        [
          "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
          "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
        ],
        [
          "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
          "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
        ],
        [
          "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
          "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
        ],
        [
          "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
          "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
        ],
        [
          "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
          "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
        ],
        [
          "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
          "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
        ],
        [
          "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
          "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
        ],
        [
          "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
          "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
        ],
        [
          "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
          "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
        ],
        [
          "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
          "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
        ],
        [
          "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
          "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
        ],
        [
          "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
          "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
        ],
        [
          "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
          "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
        ],
        [
          "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
          "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
        ],
        [
          "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
          "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
        ],
        [
          "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
          "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
        ],
        [
          "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
          "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
        ],
        [
          "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
          "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
        ],
        [
          "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
          "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
        ],
        [
          "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
          "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
        ],
        [
          "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
          "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
        ],
        [
          "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
          "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
        ],
        [
          "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
          "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
        ],
        [
          "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
          "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
        ],
        [
          "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
          "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
        ],
        [
          "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
          "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
        ],
        [
          "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
          "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
        ],
        [
          "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
          "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
        ],
        [
          "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
          "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
        ],
        [
          "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
          "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
        ],
        [
          "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
          "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
        ],
        [
          "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
          "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
        ],
        [
          "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
          "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
        ],
        [
          "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
          "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
        ],
        [
          "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
          "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
        ],
        [
          "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
          "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
        ],
        [
          "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
          "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
        ],
        [
          "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
          "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
        ],
        [
          "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
          "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
        ],
        [
          "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
          "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
        ],
        [
          "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
          "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
        ],
        [
          "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
          "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
        ],
        [
          "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
          "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
        ],
        [
          "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
          "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
        ],
        [
          "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
          "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
        ],
        [
          "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
          "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
        ],
        [
          "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
          "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
        ],
        [
          "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
          "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
        ],
        [
          "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
          "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
        ],
        [
          "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
          "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
        ],
        [
          "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
          "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
        ],
        [
          "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
          "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
        ],
        [
          "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
          "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
        ],
        [
          "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
          "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
        ]
      ]
    },
    naf: {
      wnd: 7,
      points: [
        [
          "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
          "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
        ],
        [
          "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
          "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
        ],
        [
          "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
          "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
        ],
        [
          "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
          "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
        ],
        [
          "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
          "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
        ],
        [
          "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
          "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
        ],
        [
          "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
          "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
        ],
        [
          "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
          "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
        ],
        [
          "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
          "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
        ],
        [
          "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
          "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
        ],
        [
          "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
          "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
        ],
        [
          "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
          "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
        ],
        [
          "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
          "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
        ],
        [
          "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
          "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
        ],
        [
          "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
          "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
        ],
        [
          "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
          "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
        ],
        [
          "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
          "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
        ],
        [
          "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
          "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
        ],
        [
          "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
          "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
        ],
        [
          "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
          "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
        ],
        [
          "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
          "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
        ],
        [
          "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
          "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
        ],
        [
          "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
          "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
        ],
        [
          "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
          "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
        ],
        [
          "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
          "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
        ],
        [
          "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
          "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
        ],
        [
          "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
          "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
        ],
        [
          "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
          "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
        ],
        [
          "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
          "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
        ],
        [
          "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
          "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
        ],
        [
          "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
          "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
        ],
        [
          "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
          "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
        ],
        [
          "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
          "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
        ],
        [
          "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
          "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
        ],
        [
          "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
          "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
        ],
        [
          "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
          "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
        ],
        [
          "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
          "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
        ],
        [
          "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
          "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
        ],
        [
          "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
          "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
        ],
        [
          "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
          "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
        ],
        [
          "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
          "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
        ],
        [
          "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
          "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
        ],
        [
          "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
          "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
        ],
        [
          "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
          "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
        ],
        [
          "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
          "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
        ],
        [
          "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
          "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
        ],
        [
          "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
          "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
        ],
        [
          "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
          "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
        ],
        [
          "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
          "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
        ],
        [
          "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
          "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
        ],
        [
          "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
          "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
        ],
        [
          "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
          "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
        ],
        [
          "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
          "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
        ],
        [
          "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
          "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
        ],
        [
          "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
          "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
        ],
        [
          "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
          "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
        ],
        [
          "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
          "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
        ],
        [
          "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
          "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
        ],
        [
          "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
          "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
        ],
        [
          "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
          "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
        ],
        [
          "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
          "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
        ],
        [
          "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
          "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
        ],
        [
          "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
          "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
        ],
        [
          "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
          "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
        ],
        [
          "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
          "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
        ],
        [
          "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
          "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
        ],
        [
          "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
          "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
        ],
        [
          "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
          "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
        ],
        [
          "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
          "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
        ],
        [
          "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
          "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
        ],
        [
          "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
          "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
        ],
        [
          "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
          "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
        ],
        [
          "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
          "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
        ],
        [
          "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
          "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
        ],
        [
          "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
          "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
        ],
        [
          "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
          "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
        ],
        [
          "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
          "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
        ],
        [
          "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
          "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
        ],
        [
          "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
          "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
        ],
        [
          "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
          "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
        ],
        [
          "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
          "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
        ],
        [
          "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
          "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
        ],
        [
          "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
          "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
        ],
        [
          "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
          "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
        ],
        [
          "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
          "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
        ],
        [
          "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
          "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
        ],
        [
          "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
          "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
        ],
        [
          "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
          "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
        ],
        [
          "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
          "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
        ],
        [
          "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
          "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
        ],
        [
          "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
          "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
        ],
        [
          "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
          "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
        ],
        [
          "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
          "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
        ],
        [
          "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
          "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
        ],
        [
          "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
          "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
        ],
        [
          "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
          "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
        ],
        [
          "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
          "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
        ],
        [
          "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
          "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
        ],
        [
          "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
          "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
        ],
        [
          "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
          "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
        ],
        [
          "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
          "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
        ],
        [
          "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
          "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
        ],
        [
          "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
          "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
        ],
        [
          "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
          "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
        ],
        [
          "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
          "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
        ],
        [
          "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
          "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
        ],
        [
          "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
          "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
        ],
        [
          "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
          "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
        ],
        [
          "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
          "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
        ],
        [
          "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
          "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
        ],
        [
          "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
          "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
        ],
        [
          "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
          "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
        ],
        [
          "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
          "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
        ],
        [
          "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
          "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
        ],
        [
          "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
          "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
        ],
        [
          "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
          "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
        ],
        [
          "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
          "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
        ],
        [
          "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
          "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
        ],
        [
          "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
          "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
        ],
        [
          "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
          "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
        ],
        [
          "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
          "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
        ],
        [
          "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
          "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
        ],
        [
          "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
          "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
        ],
        [
          "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
          "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
        ],
        [
          "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
          "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
        ],
        [
          "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
          "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
        ],
        [
          "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
          "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
        ]
      ]
    }
  };
  return secp256k1;
}
var hasRequiredCurves;
function requireCurves() {
  if (hasRequiredCurves) return curves$1;
  hasRequiredCurves = 1;
  (function(exports) {
    var curves2 = exports;
    var hash2 = requireHash();
    var curve2 = requireCurve();
    var utils2 = requireUtils();
    var assert = utils2.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve2.short(options);
      else if (options.type === "edwards")
        this.curve = new curve2.edwards(options);
      else
        this.curve = new curve2.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert(this.g.validate(), "Invalid curve");
      assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves2.PresetCurve = PresetCurve;
    function defineCurve(name, options) {
      Object.defineProperty(curves2, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve3 = new PresetCurve(options);
          Object.defineProperty(curves2, name, {
            configurable: true,
            enumerable: true,
            value: curve3
          });
          return curve3;
        }
      });
    }
    defineCurve("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
      ]
    });
    defineCurve("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
      ]
    });
    defineCurve("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
      ]
    });
    defineCurve("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: hash2.sha384,
      gRed: false,
      g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
      ]
    });
    defineCurve("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: hash2.sha512,
      gRed: false,
      g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
      ]
    });
    defineCurve("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "9"
      ]
    });
    defineCurve("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      // -121665 * (121666^(-1)) (mod P)
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
      ]
    });
    var pre;
    try {
      pre = requireSecp256k1();
    } catch (e) {
      pre = void 0;
    }
    defineCurve("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: hash2.sha256,
      // Precomputed endomorphism
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [
        {
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }
      ],
      gRed: false,
      g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
      ]
    });
  })(curves$1);
  return curves$1;
}
var hmacDrbg;
var hasRequiredHmacDrbg;
function requireHmacDrbg() {
  if (hasRequiredHmacDrbg) return hmacDrbg;
  hasRequiredHmacDrbg = 1;
  var hash2 = requireHash();
  var utils2 = requireUtils$1();
  var assert = requireMinimalisticAssert();
  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
      return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils2.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils2.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils2.toArray(options.pers, options.persEnc || "hex");
    assert(
      entropy.length >= this.minEntropy / 8,
      "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
    );
    this._init(entropy, nonce, pers);
  }
  hmacDrbg = HmacDRBG;
  HmacDRBG.prototype._init = function init2(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i2 = 0; i2 < this.V.length; i2++) {
      this.K[i2] = 0;
      this.V[i2] = 1;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 281474976710656;
  };
  HmacDRBG.prototype._hmac = function hmac2() {
    return new hash2.hmac(this.hash, this.K);
  };
  HmacDRBG.prototype._update = function update2(seed) {
    var kmac = this._hmac().update(this.V).update([0]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;
    this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
  };
  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    if (typeof entropyEnc !== "string") {
      addEnc = add;
      add = entropyEnc;
      entropyEnc = null;
    }
    entropy = utils2.toArray(entropy, entropyEnc);
    add = utils2.toArray(add, addEnc);
    assert(
      entropy.length >= this.minEntropy / 8,
      "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
    );
    this._update(entropy.concat(add || []));
    this._reseed = 1;
  };
  HmacDRBG.prototype.generate = function generate2(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error("Reseed is required");
    if (typeof enc !== "string") {
      addEnc = add;
      add = enc;
      enc = null;
    }
    if (add) {
      add = utils2.toArray(add, addEnc || "hex");
      this._update(add);
    }
    var temp = [];
    while (temp.length < len) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils2.encode(res, enc);
  };
  return hmacDrbg;
}
var key$1;
var hasRequiredKey$1;
function requireKey$1() {
  if (hasRequiredKey$1) return key$1;
  hasRequiredKey$1 = 1;
  var BN2 = requireBn();
  var utils2 = requireUtils();
  var assert = utils2.assert;
  function KeyPair(ec2, options) {
    this.ec = ec2;
    this.priv = null;
    this.pub = null;
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  key$1 = KeyPair;
  KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(ec2, {
      pub,
      pubEnc: enc
    });
  };
  KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
    if (priv instanceof KeyPair)
      return priv;
    return new KeyPair(ec2, {
      priv,
      privEnc: enc
    });
  };
  KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity())
      return { result: false, reason: "Invalid public key" };
    if (!pub.validate())
      return { result: false, reason: "Public key is not a point" };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return { result: false, reason: "Public key * N != O" };
    return { result: true, reason: null };
  };
  KeyPair.prototype.getPublic = function getPublic2(compact, enc) {
    if (typeof compact === "string") {
      enc = compact;
      compact = null;
    }
    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);
    if (!enc)
      return this.pub;
    return this.pub.encode(enc, compact);
  };
  KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex")
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };
  KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
    this.priv = new BN2(key2, enc || 16);
    this.priv = this.priv.umod(this.ec.curve.n);
  };
  KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
    if (key2.x || key2.y) {
      if (this.ec.curve.type === "mont") {
        assert(key2.x, "Need x coordinate");
      } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
        assert(key2.x && key2.y, "Need both x and y coordinate");
      }
      this.pub = this.ec.curve.point(key2.x, key2.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key2, enc);
  };
  KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) {
      assert(pub.validate(), "public point not validated");
    }
    return pub.mul(this.priv).getX();
  };
  KeyPair.prototype.sign = function sign2(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };
  KeyPair.prototype.verify = function verify2(msg, signature2, options) {
    return this.ec.verify(msg, signature2, this, void 0, options);
  };
  KeyPair.prototype.inspect = function inspect() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
  };
  return key$1;
}
var signature$1;
var hasRequiredSignature$1;
function requireSignature$1() {
  if (hasRequiredSignature$1) return signature$1;
  hasRequiredSignature$1 = 1;
  var BN2 = requireBn();
  var utils2 = requireUtils();
  var assert = utils2.assert;
  function Signature2(options, enc) {
    if (options instanceof Signature2)
      return options;
    if (this._importDER(options, enc))
      return;
    assert(options.r && options.s, "Signature without r or s");
    this.r = new BN2(options.r, 16);
    this.s = new BN2(options.s, 16);
    if (options.recoveryParam === void 0)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  signature$1 = Signature2;
  function Position() {
    this.place = 0;
  }
  function getLength(buf, p2) {
    var initial = buf[p2.place++];
    if (!(initial & 128)) {
      return initial;
    }
    var octetLen = initial & 15;
    if (octetLen === 0 || octetLen > 4) {
      return false;
    }
    if (buf[p2.place] === 0) {
      return false;
    }
    var val = 0;
    for (var i2 = 0, off = p2.place; i2 < octetLen; i2++, off++) {
      val <<= 8;
      val |= buf[off];
      val >>>= 0;
    }
    if (val <= 127) {
      return false;
    }
    p2.place = off;
    return val;
  }
  function rmPadding(buf) {
    var i2 = 0;
    var len = buf.length - 1;
    while (!buf[i2] && !(buf[i2 + 1] & 128) && i2 < len) {
      i2++;
    }
    if (i2 === 0) {
      return buf;
    }
    return buf.slice(i2);
  }
  Signature2.prototype._importDER = function _importDER(data, enc) {
    data = utils2.toArray(data, enc);
    var p2 = new Position();
    if (data[p2.place++] !== 48) {
      return false;
    }
    var len = getLength(data, p2);
    if (len === false) {
      return false;
    }
    if (len + p2.place !== data.length) {
      return false;
    }
    if (data[p2.place++] !== 2) {
      return false;
    }
    var rlen = getLength(data, p2);
    if (rlen === false) {
      return false;
    }
    if ((data[p2.place] & 128) !== 0) {
      return false;
    }
    var r = data.slice(p2.place, rlen + p2.place);
    p2.place += rlen;
    if (data[p2.place++] !== 2) {
      return false;
    }
    var slen = getLength(data, p2);
    if (slen === false) {
      return false;
    }
    if (data.length !== slen + p2.place) {
      return false;
    }
    if ((data[p2.place] & 128) !== 0) {
      return false;
    }
    var s2 = data.slice(p2.place, slen + p2.place);
    if (r[0] === 0) {
      if (r[1] & 128) {
        r = r.slice(1);
      } else {
        return false;
      }
    }
    if (s2[0] === 0) {
      if (s2[1] & 128) {
        s2 = s2.slice(1);
      } else {
        return false;
      }
    }
    this.r = new BN2(r);
    this.s = new BN2(s2);
    this.recoveryParam = null;
    return true;
  };
  function constructLength(arr, len) {
    if (len < 128) {
      arr.push(len);
      return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 128);
    while (--octets) {
      arr.push(len >>> (octets << 3) & 255);
    }
    arr.push(len);
  }
  Signature2.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s2 = this.s.toArray();
    if (r[0] & 128)
      r = [0].concat(r);
    if (s2[0] & 128)
      s2 = [0].concat(s2);
    r = rmPadding(r);
    s2 = rmPadding(s2);
    while (!s2[0] && !(s2[1] & 128)) {
      s2 = s2.slice(1);
    }
    var arr = [2];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(2);
    constructLength(arr, s2.length);
    var backHalf = arr.concat(s2);
    var res = [48];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils2.encode(res, enc);
  };
  return signature$1;
}
var ec;
var hasRequiredEc;
function requireEc() {
  if (hasRequiredEc) return ec;
  hasRequiredEc = 1;
  var BN2 = requireBn();
  var HmacDRBG = requireHmacDrbg();
  var utils2 = requireUtils();
  var curves2 = requireCurves();
  var rand2 = requireBrorand();
  var assert = utils2.assert;
  var KeyPair = requireKey$1();
  var Signature2 = requireSignature$1();
  function EC(options) {
    if (!(this instanceof EC))
      return new EC(options);
    if (typeof options === "string") {
      assert(
        Object.prototype.hasOwnProperty.call(curves2, options),
        "Unknown curve " + options
      );
      options = curves2[options];
    }
    if (options instanceof curves2.PresetCurve)
      options = { curve: options };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    this.hash = options.hash || options.curve.hash;
  }
  ec = EC;
  EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
  };
  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
  };
  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
  };
  EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};
    var drbg = new HmacDRBG({
      hash: this.hash,
      pers: options.pers,
      persEnc: options.persEnc || "utf8",
      entropy: options.entropy || rand2(this.hash.hmacStrength),
      entropyEnc: options.entropy && options.entropyEnc || "utf8",
      nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN2(2));
    for (; ; ) {
      var priv = new BN2(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0)
        continue;
      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    }
  };
  EC.prototype._truncateToN = function _truncateToN(msg, truncOnly, bitLength) {
    var byteLength;
    if (BN2.isBN(msg) || typeof msg === "number") {
      msg = new BN2(msg, 16);
      byteLength = msg.byteLength();
    } else if (typeof msg === "object") {
      byteLength = msg.length;
      msg = new BN2(msg, 16);
    } else {
      var str = msg.toString();
      byteLength = str.length + 1 >>> 1;
      msg = new BN2(str, 16);
    }
    if (typeof bitLength !== "number") {
      bitLength = byteLength * 8;
    }
    var delta = bitLength - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };
  EC.prototype.sign = function sign2(msg, key2, enc, options) {
    if (typeof enc === "object") {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};
    if (typeof msg !== "string" && typeof msg !== "number" && !BN2.isBN(msg)) {
      assert(
        typeof msg === "object" && msg && typeof msg.length === "number",
        "Expected message to be an array-like, a hex string, or a BN instance"
      );
      assert(msg.length >>> 0 === msg.length);
      for (var i2 = 0; i2 < msg.length; i2++) assert((msg[i2] & 255) === msg[i2]);
    }
    key2 = this.keyFromPrivate(key2, enc);
    msg = this._truncateToN(msg, false, options.msgBitLength);
    assert(!msg.isNeg(), "Can not sign a negative message");
    var bytes = this.n.byteLength();
    var bkey = key2.getPrivate().toArray("be", bytes);
    var nonce = msg.toArray("be", bytes);
    assert(new BN2(nonce).eq(msg), "Can not sign message");
    var drbg = new HmacDRBG({
      hash: this.hash,
      entropy: bkey,
      nonce,
      pers: options.pers,
      persEnc: options.persEnc || "utf8"
    });
    var ns1 = this.n.sub(new BN2(1));
    for (var iter = 0; ; iter++) {
      var k = options.k ? options.k(iter) : new BN2(drbg.generate(this.n.byteLength()));
      k = this._truncateToN(k, true);
      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
        continue;
      var kp = this.g.mul(k);
      if (kp.isInfinity())
        continue;
      var kpX = kp.getX();
      var r = kpX.umod(this.n);
      if (r.cmpn(0) === 0)
        continue;
      var s2 = k.invm(this.n).mul(r.mul(key2.getPrivate()).iadd(msg));
      s2 = s2.umod(this.n);
      if (s2.cmpn(0) === 0)
        continue;
      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
      if (options.canonical && s2.cmp(this.nh) > 0) {
        s2 = this.n.sub(s2);
        recoveryParam ^= 1;
      }
      return new Signature2({ r, s: s2, recoveryParam });
    }
  };
  EC.prototype.verify = function verify2(msg, signature2, key2, enc, options) {
    if (!options)
      options = {};
    msg = this._truncateToN(msg, false, options.msgBitLength);
    key2 = this.keyFromPublic(key2, enc);
    signature2 = new Signature2(signature2, "hex");
    var r = signature2.r;
    var s2 = signature2.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
      return false;
    if (s2.cmpn(1) < 0 || s2.cmp(this.n) >= 0)
      return false;
    var sinv = s2.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p2;
    if (!this.curve._maxwellTrick) {
      p2 = this.g.mulAdd(u1, key2.getPublic(), u2);
      if (p2.isInfinity())
        return false;
      return p2.getX().umod(this.n).cmp(r) === 0;
    }
    p2 = this.g.jmulAdd(u1, key2.getPublic(), u2);
    if (p2.isInfinity())
      return false;
    return p2.eqXToP(r);
  };
  EC.prototype.recoverPubKey = function(msg, signature2, j2, enc) {
    assert((3 & j2) === j2, "The recovery param is more than two bits");
    signature2 = new Signature2(signature2, enc);
    var n2 = this.n;
    var e = new BN2(msg);
    var r = signature2.r;
    var s2 = signature2.s;
    var isYOdd = j2 & 1;
    var isSecondKey = j2 >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error("Unable to find sencond key candinate");
    if (isSecondKey)
      r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else
      r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature2.r.invm(n2);
    var s1 = n2.sub(e).mul(rInv).umod(n2);
    var s22 = s2.mul(rInv).umod(n2);
    return this.g.mulAdd(s1, r, s22);
  };
  EC.prototype.getKeyRecoveryParam = function(e, signature2, Q2, enc) {
    signature2 = new Signature2(signature2, enc);
    if (signature2.recoveryParam !== null)
      return signature2.recoveryParam;
    for (var i2 = 0; i2 < 4; i2++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e, signature2, i2);
      } catch (e2) {
        continue;
      }
      if (Qprime.eq(Q2))
        return i2;
    }
    throw new Error("Unable to find valid recovery factor");
  };
  return ec;
}
var key;
var hasRequiredKey;
function requireKey() {
  if (hasRequiredKey) return key;
  hasRequiredKey = 1;
  var utils2 = requireUtils();
  var assert = utils2.assert;
  var parseBytes = utils2.parseBytes;
  var cachedProperty = utils2.cachedProperty;
  function KeyPair(eddsa2, params) {
    this.eddsa = eddsa2;
    this._secret = parseBytes(params.secret);
    if (eddsa2.isPoint(params.pub))
      this._pub = params.pub;
    else
      this._pubBytes = parseBytes(params.pub);
  }
  KeyPair.fromPublic = function fromPublic(eddsa2, pub) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(eddsa2, { pub });
  };
  KeyPair.fromSecret = function fromSecret(eddsa2, secret) {
    if (secret instanceof KeyPair)
      return secret;
    return new KeyPair(eddsa2, { secret });
  };
  KeyPair.prototype.secret = function secret() {
    return this._secret;
  };
  cachedProperty(KeyPair, "pubBytes", function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
  });
  cachedProperty(KeyPair, "pub", function pub() {
    if (this._pubBytes)
      return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
  });
  cachedProperty(KeyPair, "privBytes", function privBytes() {
    var eddsa2 = this.eddsa;
    var hash2 = this.hash();
    var lastIx = eddsa2.encodingLength - 1;
    var a = hash2.slice(0, eddsa2.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
  });
  cachedProperty(KeyPair, "priv", function priv() {
    return this.eddsa.decodeInt(this.privBytes());
  });
  cachedProperty(KeyPair, "hash", function hash2() {
    return this.eddsa.hash().update(this.secret()).digest();
  });
  cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
  });
  KeyPair.prototype.sign = function sign2(message) {
    assert(this._secret, "KeyPair can only verify");
    return this.eddsa.sign(message, this);
  };
  KeyPair.prototype.verify = function verify2(message, sig) {
    return this.eddsa.verify(message, sig, this);
  };
  KeyPair.prototype.getSecret = function getSecret(enc) {
    assert(this._secret, "KeyPair is public only");
    return utils2.encode(this.secret(), enc);
  };
  KeyPair.prototype.getPublic = function getPublic2(enc) {
    return utils2.encode(this.pubBytes(), enc);
  };
  key = KeyPair;
  return key;
}
var signature;
var hasRequiredSignature;
function requireSignature() {
  if (hasRequiredSignature) return signature;
  hasRequiredSignature = 1;
  var BN2 = requireBn();
  var utils2 = requireUtils();
  var assert = utils2.assert;
  var cachedProperty = utils2.cachedProperty;
  var parseBytes = utils2.parseBytes;
  function Signature2(eddsa2, sig) {
    this.eddsa = eddsa2;
    if (typeof sig !== "object")
      sig = parseBytes(sig);
    if (Array.isArray(sig)) {
      assert(sig.length === eddsa2.encodingLength * 2, "Signature has invalid size");
      sig = {
        R: sig.slice(0, eddsa2.encodingLength),
        S: sig.slice(eddsa2.encodingLength)
      };
    }
    assert(sig.R && sig.S, "Signature without R or S");
    if (eddsa2.isPoint(sig.R))
      this._R = sig.R;
    if (sig.S instanceof BN2)
      this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
  }
  cachedProperty(Signature2, "S", function S2() {
    return this.eddsa.decodeInt(this.Sencoded());
  });
  cachedProperty(Signature2, "R", function R2() {
    return this.eddsa.decodePoint(this.Rencoded());
  });
  cachedProperty(Signature2, "Rencoded", function Rencoded() {
    return this.eddsa.encodePoint(this.R());
  });
  cachedProperty(Signature2, "Sencoded", function Sencoded() {
    return this.eddsa.encodeInt(this.S());
  });
  Signature2.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
  };
  Signature2.prototype.toHex = function toHex() {
    return utils2.encode(this.toBytes(), "hex").toUpperCase();
  };
  signature = Signature2;
  return signature;
}
var eddsa;
var hasRequiredEddsa;
function requireEddsa() {
  if (hasRequiredEddsa) return eddsa;
  hasRequiredEddsa = 1;
  var hash2 = requireHash();
  var curves2 = requireCurves();
  var utils2 = requireUtils();
  var assert = utils2.assert;
  var parseBytes = utils2.parseBytes;
  var KeyPair = requireKey();
  var Signature2 = requireSignature();
  function EDDSA(curve2) {
    assert(curve2 === "ed25519", "only tested with ed25519 so far");
    if (!(this instanceof EDDSA))
      return new EDDSA(curve2);
    curve2 = curves2[curve2].curve;
    this.curve = curve2;
    this.g = curve2.g;
    this.g.precompute(curve2.n.bitLength() + 1);
    this.pointClass = curve2.point().constructor;
    this.encodingLength = Math.ceil(curve2.n.bitLength() / 8);
    this.hash = hash2.sha512;
  }
  eddsa = EDDSA;
  EDDSA.prototype.sign = function sign2(message, secret) {
    message = parseBytes(message);
    var key2 = this.keyFromSecret(secret);
    var r = this.hashInt(key2.messagePrefix(), message);
    var R2 = this.g.mul(r);
    var Rencoded = this.encodePoint(R2);
    var s_ = this.hashInt(Rencoded, key2.pubBytes(), message).mul(key2.priv());
    var S2 = r.add(s_).umod(this.curve.n);
    return this.makeSignature({ R: R2, S: S2, Rencoded });
  };
  EDDSA.prototype.verify = function verify2(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {
      return false;
    }
    var key2 = this.keyFromPublic(pub);
    var h2 = this.hashInt(sig.Rencoded(), key2.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key2.pub().mul(h2));
    return RplusAh.eq(SG);
  };
  EDDSA.prototype.hashInt = function hashInt() {
    var hash3 = this.hash();
    for (var i2 = 0; i2 < arguments.length; i2++)
      hash3.update(arguments[i2]);
    return utils2.intFromLE(hash3.digest()).umod(this.curve.n);
  };
  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
  };
  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
  };
  EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature2)
      return sig;
    return new Signature2(this, sig);
  };
  EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray("le", this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
    return enc;
  };
  EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils2.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
    var xIsOdd = (bytes[lastIx] & 128) !== 0;
    var y = utils2.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
  };
  EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray("le", this.encodingLength);
  };
  EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils2.intFromLE(bytes);
  };
  EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
  };
  return eddsa;
}
var hasRequiredElliptic;
function requireElliptic() {
  if (hasRequiredElliptic) return elliptic;
  hasRequiredElliptic = 1;
  (function(exports) {
    var elliptic2 = exports;
    elliptic2.version = require$$0.version;
    elliptic2.utils = requireUtils();
    elliptic2.rand = requireBrorand();
    elliptic2.curve = requireCurve();
    elliptic2.curves = requireCurves();
    elliptic2.ec = requireEc();
    elliptic2.eddsa = requireEddsa();
  })(elliptic);
  return elliptic;
}
var ellipticExports = requireElliptic();
var extendStatics = function(d2, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d22, b2) {
    d22.__proto__ = b2;
  } || function(d22, b2) {
    for (var p2 in b2) if (Object.prototype.hasOwnProperty.call(b2, p2)) d22[p2] = b2[p2];
  };
  return extendStatics(d2, b);
};
function __extends(d2, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d2, b);
  function __() {
    this.constructor = d2;
  }
  d2.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __decorate$1(decorators, target, key2, desc) {
  var c2 = arguments.length, r = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key2) : desc, d2;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key2, desc);
  else for (var i2 = decorators.length - 1; i2 >= 0; i2--) if (d2 = decorators[i2]) r = (c2 < 3 ? d2(r) : c2 > 3 ? d2(target, key2, r) : d2(target, key2)) || r;
  return c2 > 3 && r && Object.defineProperty(target, key2, r), r;
}
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1) throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y, t2, g2 = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g2.next = verb(0), g2["throw"] = verb(1), g2["return"] = verb(2), typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2) throw new TypeError("Generator is already executing.");
    while (g2 && (g2 = 0, op[0] && (_ = 0)), _) try {
      if (f2 = 1, y && (t2 = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t2 = y["return"]) && t2.call(y), 0) : y.next) && !(t2 = t2.call(y, op[1])).done) return t2;
      if (y = 0, t2) op = [op[0] & 2, t2.value];
      switch (op[0]) {
        case 0:
        case 1:
          t2 = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t2[1]) {
            _.label = t2[1];
            t2 = op;
            break;
          }
          if (t2 && _.label < t2[2]) {
            _.label = t2[2];
            _.ops.push(op);
            break;
          }
          if (t2[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f2 = t2 = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values(o) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o[s2], i2 = 0;
  if (m2) return m2.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i2 >= o.length) o = void 0;
      return { value: o && o[i2++], done: !o };
    }
  };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n2) {
  var m2 = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m2) return o;
  var i2 = m2.call(o), r, ar = [], e;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r = i2.next()).done) ar.push(r.value);
  } catch (error2) {
    e = { error: error2 };
  } finally {
    try {
      if (r && !r.done && (m2 = i2["return"])) m2.call(i2);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i2 = 0, l2 = from.length, ar; i2 < l2; i2++) {
    if (ar || !(i2 in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i2);
      ar[i2] = from[i2];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v2) {
  return this instanceof __await ? (this.v = v2, this) : new __await(v2);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
  return i2 = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i2[Symbol.asyncIterator] = function() {
    return this;
  }, i2;
  function awaitReturn(f2) {
    return function(v2) {
      return Promise.resolve(v2).then(f2, reject);
    };
  }
  function verb(n2, f2) {
    if (g2[n2]) {
      i2[n2] = function(v2) {
        return new Promise(function(a, b) {
          q2.push([n2, v2, a, b]) > 1 || resume(n2, v2);
        });
      };
      if (f2) i2[n2] = f2(i2[n2]);
    }
  }
  function resume(n2, v2) {
    try {
      step(g2[n2](v2));
    } catch (e) {
      settle(q2[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q2[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f2, v2) {
    if (f2(v2), q2.shift(), q2.length) resume(q2[0][0], q2[0][1]);
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m2 = o[Symbol.asyncIterator], i2;
  return m2 ? m2.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
    return this;
  }, i2);
  function verb(n2) {
    i2[n2] = o[n2] && function(v2) {
      return new Promise(function(resolve, reject) {
        v2 = o[n2](v2), settle(resolve, reject, v2.done, v2.value);
      });
    };
  }
  function settle(resolve, reject, d2, v2) {
    Promise.resolve(v2).then(function(v22) {
      resolve({ value: v22, done: d2 });
    }, reject);
  }
}
typeof SuppressedError === "function" ? SuppressedError : function(error2, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error2, e.suppressed = suppressed, e;
};
/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */
const Z_FIXED$1 = 4;
const Z_BINARY = 0;
const Z_TEXT = 1;
const Z_UNKNOWN$1 = 2;
function zero$1(buf) {
  let len = buf.length;
  while (--len >= 0) {
    buf[len] = 0;
  }
}
const STORED_BLOCK = 0;
const STATIC_TREES = 1;
const DYN_TREES = 2;
const MIN_MATCH$1 = 3;
const MAX_MATCH$1 = 258;
const LENGTH_CODES$1 = 29;
const LITERALS$1 = 256;
const L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;
const D_CODES$1 = 30;
const BL_CODES$1 = 19;
const HEAP_SIZE$1 = 2 * L_CODES$1 + 1;
const MAX_BITS$1 = 15;
const Buf_size = 16;
const MAX_BL_BITS = 7;
const END_BLOCK = 256;
const REP_3_6 = 16;
const REPZ_3_10 = 17;
const REPZ_11_138 = 18;
const extra_lbits = (
  /* extra bits for each length code */
  new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0])
);
const extra_dbits = (
  /* extra bits for each distance code */
  new Uint8Array([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13])
);
const extra_blbits = (
  /* extra bits for each bit length code */
  new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7])
);
const bl_order = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
const DIST_CODE_LEN = 512;
const static_ltree = new Array((L_CODES$1 + 2) * 2);
zero$1(static_ltree);
const static_dtree = new Array(D_CODES$1 * 2);
zero$1(static_dtree);
const _dist_code = new Array(DIST_CODE_LEN);
zero$1(_dist_code);
const _length_code = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
zero$1(_length_code);
const base_length = new Array(LENGTH_CODES$1);
zero$1(base_length);
const base_dist = new Array(D_CODES$1);
zero$1(base_dist);
function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
  this.static_tree = static_tree;
  this.extra_bits = extra_bits;
  this.extra_base = extra_base;
  this.elems = elems;
  this.max_length = max_length;
  this.has_stree = static_tree && static_tree.length;
}
let static_l_desc;
let static_d_desc;
let static_bl_desc;
function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;
  this.max_code = 0;
  this.stat_desc = stat_desc;
}
const d_code = (dist) => {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
};
const put_short = (s2, w) => {
  s2.pending_buf[s2.pending++] = w & 255;
  s2.pending_buf[s2.pending++] = w >>> 8 & 255;
};
const send_bits = (s2, value, length) => {
  if (s2.bi_valid > Buf_size - length) {
    s2.bi_buf |= value << s2.bi_valid & 65535;
    put_short(s2, s2.bi_buf);
    s2.bi_buf = value >> Buf_size - s2.bi_valid;
    s2.bi_valid += length - Buf_size;
  } else {
    s2.bi_buf |= value << s2.bi_valid & 65535;
    s2.bi_valid += length;
  }
};
const send_code = (s2, c2, tree) => {
  send_bits(
    s2,
    tree[c2 * 2],
    tree[c2 * 2 + 1]
    /*.Len*/
  );
};
const bi_reverse = (code, len) => {
  let res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
};
const bi_flush = (s2) => {
  if (s2.bi_valid === 16) {
    put_short(s2, s2.bi_buf);
    s2.bi_buf = 0;
    s2.bi_valid = 0;
  } else if (s2.bi_valid >= 8) {
    s2.pending_buf[s2.pending++] = s2.bi_buf & 255;
    s2.bi_buf >>= 8;
    s2.bi_valid -= 8;
  }
};
const gen_bitlen = (s2, desc) => {
  const tree = desc.dyn_tree;
  const max_code = desc.max_code;
  const stree = desc.stat_desc.static_tree;
  const has_stree = desc.stat_desc.has_stree;
  const extra = desc.stat_desc.extra_bits;
  const base2 = desc.stat_desc.extra_base;
  const max_length = desc.stat_desc.max_length;
  let h2;
  let n2, m2;
  let bits;
  let xbits;
  let f2;
  let overflow = 0;
  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    s2.bl_count[bits] = 0;
  }
  tree[s2.heap[s2.heap_max] * 2 + 1] = 0;
  for (h2 = s2.heap_max + 1; h2 < HEAP_SIZE$1; h2++) {
    n2 = s2.heap[h2];
    bits = tree[tree[n2 * 2 + 1] * 2 + 1] + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n2 * 2 + 1] = bits;
    if (n2 > max_code) {
      continue;
    }
    s2.bl_count[bits]++;
    xbits = 0;
    if (n2 >= base2) {
      xbits = extra[n2 - base2];
    }
    f2 = tree[n2 * 2];
    s2.opt_len += f2 * (bits + xbits);
    if (has_stree) {
      s2.static_len += f2 * (stree[n2 * 2 + 1] + xbits);
    }
  }
  if (overflow === 0) {
    return;
  }
  do {
    bits = max_length - 1;
    while (s2.bl_count[bits] === 0) {
      bits--;
    }
    s2.bl_count[bits]--;
    s2.bl_count[bits + 1] += 2;
    s2.bl_count[max_length]--;
    overflow -= 2;
  } while (overflow > 0);
  for (bits = max_length; bits !== 0; bits--) {
    n2 = s2.bl_count[bits];
    while (n2 !== 0) {
      m2 = s2.heap[--h2];
      if (m2 > max_code) {
        continue;
      }
      if (tree[m2 * 2 + 1] !== bits) {
        s2.opt_len += (bits - tree[m2 * 2 + 1]) * tree[m2 * 2];
        tree[m2 * 2 + 1] = bits;
      }
      n2--;
    }
  }
};
const gen_codes = (tree, max_code, bl_count) => {
  const next_code = new Array(MAX_BITS$1 + 1);
  let code = 0;
  let bits;
  let n2;
  for (bits = 1; bits <= MAX_BITS$1; bits++) {
    code = code + bl_count[bits - 1] << 1;
    next_code[bits] = code;
  }
  for (n2 = 0; n2 <= max_code; n2++) {
    let len = tree[n2 * 2 + 1];
    if (len === 0) {
      continue;
    }
    tree[n2 * 2] = bi_reverse(next_code[len]++, len);
  }
};
const tr_static_init = () => {
  let n2;
  let bits;
  let length;
  let code;
  let dist;
  const bl_count = new Array(MAX_BITS$1 + 1);
  length = 0;
  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
    base_length[code] = length;
    for (n2 = 0; n2 < 1 << extra_lbits[code]; n2++) {
      _length_code[length++] = code;
    }
  }
  _length_code[length - 1] = code;
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n2 = 0; n2 < 1 << extra_dbits[code]; n2++) {
      _dist_code[dist++] = code;
    }
  }
  dist >>= 7;
  for (; code < D_CODES$1; code++) {
    base_dist[code] = dist << 7;
    for (n2 = 0; n2 < 1 << extra_dbits[code] - 7; n2++) {
      _dist_code[256 + dist++] = code;
    }
  }
  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    bl_count[bits] = 0;
  }
  n2 = 0;
  while (n2 <= 143) {
    static_ltree[n2 * 2 + 1] = 8;
    n2++;
    bl_count[8]++;
  }
  while (n2 <= 255) {
    static_ltree[n2 * 2 + 1] = 9;
    n2++;
    bl_count[9]++;
  }
  while (n2 <= 279) {
    static_ltree[n2 * 2 + 1] = 7;
    n2++;
    bl_count[7]++;
  }
  while (n2 <= 287) {
    static_ltree[n2 * 2 + 1] = 8;
    n2++;
    bl_count[8]++;
  }
  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);
  for (n2 = 0; n2 < D_CODES$1; n2++) {
    static_dtree[n2 * 2 + 1] = 5;
    static_dtree[n2 * 2] = bi_reverse(n2, 5);
  }
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES$1, MAX_BITS$1);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES$1, MAX_BL_BITS);
};
const init_block = (s2) => {
  let n2;
  for (n2 = 0; n2 < L_CODES$1; n2++) {
    s2.dyn_ltree[n2 * 2] = 0;
  }
  for (n2 = 0; n2 < D_CODES$1; n2++) {
    s2.dyn_dtree[n2 * 2] = 0;
  }
  for (n2 = 0; n2 < BL_CODES$1; n2++) {
    s2.bl_tree[n2 * 2] = 0;
  }
  s2.dyn_ltree[END_BLOCK * 2] = 1;
  s2.opt_len = s2.static_len = 0;
  s2.sym_next = s2.matches = 0;
};
const bi_windup = (s2) => {
  if (s2.bi_valid > 8) {
    put_short(s2, s2.bi_buf);
  } else if (s2.bi_valid > 0) {
    s2.pending_buf[s2.pending++] = s2.bi_buf;
  }
  s2.bi_buf = 0;
  s2.bi_valid = 0;
};
const smaller = (tree, n2, m2, depth) => {
  const _n2 = n2 * 2;
  const _m2 = m2 * 2;
  return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n2] <= depth[m2];
};
const pqdownheap = (s2, tree, k) => {
  const v2 = s2.heap[k];
  let j2 = k << 1;
  while (j2 <= s2.heap_len) {
    if (j2 < s2.heap_len && smaller(tree, s2.heap[j2 + 1], s2.heap[j2], s2.depth)) {
      j2++;
    }
    if (smaller(tree, v2, s2.heap[j2], s2.depth)) {
      break;
    }
    s2.heap[k] = s2.heap[j2];
    k = j2;
    j2 <<= 1;
  }
  s2.heap[k] = v2;
};
const compress_block = (s2, ltree, dtree) => {
  let dist;
  let lc;
  let sx = 0;
  let code;
  let extra;
  if (s2.sym_next !== 0) {
    do {
      dist = s2.pending_buf[s2.sym_buf + sx++] & 255;
      dist += (s2.pending_buf[s2.sym_buf + sx++] & 255) << 8;
      lc = s2.pending_buf[s2.sym_buf + sx++];
      if (dist === 0) {
        send_code(s2, lc, ltree);
      } else {
        code = _length_code[lc];
        send_code(s2, code + LITERALS$1 + 1, ltree);
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s2, lc, extra);
        }
        dist--;
        code = d_code(dist);
        send_code(s2, code, dtree);
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s2, dist, extra);
        }
      }
    } while (sx < s2.sym_next);
  }
  send_code(s2, END_BLOCK, ltree);
};
const build_tree = (s2, desc) => {
  const tree = desc.dyn_tree;
  const stree = desc.stat_desc.static_tree;
  const has_stree = desc.stat_desc.has_stree;
  const elems = desc.stat_desc.elems;
  let n2, m2;
  let max_code = -1;
  let node;
  s2.heap_len = 0;
  s2.heap_max = HEAP_SIZE$1;
  for (n2 = 0; n2 < elems; n2++) {
    if (tree[n2 * 2] !== 0) {
      s2.heap[++s2.heap_len] = max_code = n2;
      s2.depth[n2] = 0;
    } else {
      tree[n2 * 2 + 1] = 0;
    }
  }
  while (s2.heap_len < 2) {
    node = s2.heap[++s2.heap_len] = max_code < 2 ? ++max_code : 0;
    tree[node * 2] = 1;
    s2.depth[node] = 0;
    s2.opt_len--;
    if (has_stree) {
      s2.static_len -= stree[node * 2 + 1];
    }
  }
  desc.max_code = max_code;
  for (n2 = s2.heap_len >> 1; n2 >= 1; n2--) {
    pqdownheap(s2, tree, n2);
  }
  node = elems;
  do {
    n2 = s2.heap[
      1
      /*SMALLEST*/
    ];
    s2.heap[
      1
      /*SMALLEST*/
    ] = s2.heap[s2.heap_len--];
    pqdownheap(
      s2,
      tree,
      1
      /*SMALLEST*/
    );
    m2 = s2.heap[
      1
      /*SMALLEST*/
    ];
    s2.heap[--s2.heap_max] = n2;
    s2.heap[--s2.heap_max] = m2;
    tree[node * 2] = tree[n2 * 2] + tree[m2 * 2];
    s2.depth[node] = (s2.depth[n2] >= s2.depth[m2] ? s2.depth[n2] : s2.depth[m2]) + 1;
    tree[n2 * 2 + 1] = tree[m2 * 2 + 1] = node;
    s2.heap[
      1
      /*SMALLEST*/
    ] = node++;
    pqdownheap(
      s2,
      tree,
      1
      /*SMALLEST*/
    );
  } while (s2.heap_len >= 2);
  s2.heap[--s2.heap_max] = s2.heap[
    1
    /*SMALLEST*/
  ];
  gen_bitlen(s2, desc);
  gen_codes(tree, max_code, s2.bl_count);
};
const scan_tree = (s2, tree, max_code) => {
  let n2;
  let prevlen = -1;
  let curlen;
  let nextlen = tree[0 * 2 + 1];
  let count = 0;
  let max_count = 7;
  let min_count = 4;
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1] = 65535;
  for (n2 = 0; n2 <= max_code; n2++) {
    curlen = nextlen;
    nextlen = tree[(n2 + 1) * 2 + 1];
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      s2.bl_tree[curlen * 2] += count;
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        s2.bl_tree[curlen * 2]++;
      }
      s2.bl_tree[REP_3_6 * 2]++;
    } else if (count <= 10) {
      s2.bl_tree[REPZ_3_10 * 2]++;
    } else {
      s2.bl_tree[REPZ_11_138 * 2]++;
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};
const send_tree = (s2, tree, max_code) => {
  let n2;
  let prevlen = -1;
  let curlen;
  let nextlen = tree[0 * 2 + 1];
  let count = 0;
  let max_count = 7;
  let min_count = 4;
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  for (n2 = 0; n2 <= max_code; n2++) {
    curlen = nextlen;
    nextlen = tree[(n2 + 1) * 2 + 1];
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      do {
        send_code(s2, curlen, s2.bl_tree);
      } while (--count !== 0);
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s2, curlen, s2.bl_tree);
        count--;
      }
      send_code(s2, REP_3_6, s2.bl_tree);
      send_bits(s2, count - 3, 2);
    } else if (count <= 10) {
      send_code(s2, REPZ_3_10, s2.bl_tree);
      send_bits(s2, count - 3, 3);
    } else {
      send_code(s2, REPZ_11_138, s2.bl_tree);
      send_bits(s2, count - 11, 7);
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};
const build_bl_tree = (s2) => {
  let max_blindex;
  scan_tree(s2, s2.dyn_ltree, s2.l_desc.max_code);
  scan_tree(s2, s2.dyn_dtree, s2.d_desc.max_code);
  build_tree(s2, s2.bl_desc);
  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
    if (s2.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
      break;
    }
  }
  s2.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  return max_blindex;
};
const send_all_trees = (s2, lcodes, dcodes, blcodes) => {
  let rank2;
  send_bits(s2, lcodes - 257, 5);
  send_bits(s2, dcodes - 1, 5);
  send_bits(s2, blcodes - 4, 4);
  for (rank2 = 0; rank2 < blcodes; rank2++) {
    send_bits(s2, s2.bl_tree[bl_order[rank2] * 2 + 1], 3);
  }
  send_tree(s2, s2.dyn_ltree, lcodes - 1);
  send_tree(s2, s2.dyn_dtree, dcodes - 1);
};
const detect_data_type = (s2) => {
  let block_mask = 4093624447;
  let n2;
  for (n2 = 0; n2 <= 31; n2++, block_mask >>>= 1) {
    if (block_mask & 1 && s2.dyn_ltree[n2 * 2] !== 0) {
      return Z_BINARY;
    }
  }
  if (s2.dyn_ltree[9 * 2] !== 0 || s2.dyn_ltree[10 * 2] !== 0 || s2.dyn_ltree[13 * 2] !== 0) {
    return Z_TEXT;
  }
  for (n2 = 32; n2 < LITERALS$1; n2++) {
    if (s2.dyn_ltree[n2 * 2] !== 0) {
      return Z_TEXT;
    }
  }
  return Z_BINARY;
};
let static_init_done = false;
const _tr_init$1 = (s2) => {
  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }
  s2.l_desc = new TreeDesc(s2.dyn_ltree, static_l_desc);
  s2.d_desc = new TreeDesc(s2.dyn_dtree, static_d_desc);
  s2.bl_desc = new TreeDesc(s2.bl_tree, static_bl_desc);
  s2.bi_buf = 0;
  s2.bi_valid = 0;
  init_block(s2);
};
const _tr_stored_block$1 = (s2, buf, stored_len, last) => {
  send_bits(s2, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
  bi_windup(s2);
  put_short(s2, stored_len);
  put_short(s2, ~stored_len);
  if (stored_len) {
    s2.pending_buf.set(s2.window.subarray(buf, buf + stored_len), s2.pending);
  }
  s2.pending += stored_len;
};
const _tr_align$1 = (s2) => {
  send_bits(s2, STATIC_TREES << 1, 3);
  send_code(s2, END_BLOCK, static_ltree);
  bi_flush(s2);
};
const _tr_flush_block$1 = (s2, buf, stored_len, last) => {
  let opt_lenb, static_lenb;
  let max_blindex = 0;
  if (s2.level > 0) {
    if (s2.strm.data_type === Z_UNKNOWN$1) {
      s2.strm.data_type = detect_data_type(s2);
    }
    build_tree(s2, s2.l_desc);
    build_tree(s2, s2.d_desc);
    max_blindex = build_bl_tree(s2);
    opt_lenb = s2.opt_len + 3 + 7 >>> 3;
    static_lenb = s2.static_len + 3 + 7 >>> 3;
    if (static_lenb <= opt_lenb) {
      opt_lenb = static_lenb;
    }
  } else {
    opt_lenb = static_lenb = stored_len + 5;
  }
  if (stored_len + 4 <= opt_lenb && buf !== -1) {
    _tr_stored_block$1(s2, buf, stored_len, last);
  } else if (s2.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {
    send_bits(s2, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s2, static_ltree, static_dtree);
  } else {
    send_bits(s2, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s2, s2.l_desc.max_code + 1, s2.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s2, s2.dyn_ltree, s2.dyn_dtree);
  }
  init_block(s2);
  if (last) {
    bi_windup(s2);
  }
};
const _tr_tally$1 = (s2, dist, lc) => {
  s2.pending_buf[s2.sym_buf + s2.sym_next++] = dist;
  s2.pending_buf[s2.sym_buf + s2.sym_next++] = dist >> 8;
  s2.pending_buf[s2.sym_buf + s2.sym_next++] = lc;
  if (dist === 0) {
    s2.dyn_ltree[lc * 2]++;
  } else {
    s2.matches++;
    dist--;
    s2.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]++;
    s2.dyn_dtree[d_code(dist) * 2]++;
  }
  return s2.sym_next === s2.sym_end;
};
var _tr_init_1 = _tr_init$1;
var _tr_stored_block_1 = _tr_stored_block$1;
var _tr_flush_block_1 = _tr_flush_block$1;
var _tr_tally_1 = _tr_tally$1;
var _tr_align_1 = _tr_align$1;
var trees = {
  _tr_init: _tr_init_1,
  _tr_stored_block: _tr_stored_block_1,
  _tr_flush_block: _tr_flush_block_1,
  _tr_tally: _tr_tally_1,
  _tr_align: _tr_align_1
};
const adler32 = (adler, buf, len, pos) => {
  let s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n2 = 0;
  while (len !== 0) {
    n2 = len > 2e3 ? 2e3 : len;
    len -= n2;
    do {
      s1 = s1 + buf[pos++] | 0;
      s2 = s2 + s1 | 0;
    } while (--n2);
    s1 %= 65521;
    s2 %= 65521;
  }
  return s1 | s2 << 16 | 0;
};
var adler32_1 = adler32;
const makeTable = () => {
  let c2, table = [];
  for (var n2 = 0; n2 < 256; n2++) {
    c2 = n2;
    for (var k = 0; k < 8; k++) {
      c2 = c2 & 1 ? 3988292384 ^ c2 >>> 1 : c2 >>> 1;
    }
    table[n2] = c2;
  }
  return table;
};
const crcTable = new Uint32Array(makeTable());
const crc32 = (crc, buf, len, pos) => {
  const t2 = crcTable;
  const end = pos + len;
  crc ^= -1;
  for (let i2 = pos; i2 < end; i2++) {
    crc = crc >>> 8 ^ t2[(crc ^ buf[i2]) & 255];
  }
  return crc ^ -1;
};
var crc32_1 = crc32;
var messages = {
  2: "need dictionary",
  /* Z_NEED_DICT       2  */
  1: "stream end",
  /* Z_STREAM_END      1  */
  0: "",
  /* Z_OK              0  */
  "-1": "file error",
  /* Z_ERRNO         (-1) */
  "-2": "stream error",
  /* Z_STREAM_ERROR  (-2) */
  "-3": "data error",
  /* Z_DATA_ERROR    (-3) */
  "-4": "insufficient memory",
  /* Z_MEM_ERROR     (-4) */
  "-5": "buffer error",
  /* Z_BUF_ERROR     (-5) */
  "-6": "incompatible version"
  /* Z_VERSION_ERROR (-6) */
};
var constants$2 = {
  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH: 0,
  Z_PARTIAL_FLUSH: 1,
  Z_SYNC_FLUSH: 2,
  Z_FULL_FLUSH: 3,
  Z_FINISH: 4,
  Z_BLOCK: 5,
  Z_TREES: 6,
  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK: 0,
  Z_STREAM_END: 1,
  Z_NEED_DICT: 2,
  Z_ERRNO: -1,
  Z_STREAM_ERROR: -2,
  Z_DATA_ERROR: -3,
  Z_MEM_ERROR: -4,
  Z_BUF_ERROR: -5,
  //Z_VERSION_ERROR: -6,
  /* compression levels */
  Z_NO_COMPRESSION: 0,
  Z_BEST_SPEED: 1,
  Z_BEST_COMPRESSION: 9,
  Z_DEFAULT_COMPRESSION: -1,
  Z_FILTERED: 1,
  Z_HUFFMAN_ONLY: 2,
  Z_RLE: 3,
  Z_FIXED: 4,
  Z_DEFAULT_STRATEGY: 0,
  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY: 0,
  Z_TEXT: 1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN: 2,
  /* The deflate compression method */
  Z_DEFLATED: 8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};
const { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;
const {
  Z_NO_FLUSH: Z_NO_FLUSH$2,
  Z_PARTIAL_FLUSH,
  Z_FULL_FLUSH: Z_FULL_FLUSH$1,
  Z_FINISH: Z_FINISH$3,
  Z_BLOCK: Z_BLOCK$1,
  Z_OK: Z_OK$3,
  Z_STREAM_END: Z_STREAM_END$3,
  Z_STREAM_ERROR: Z_STREAM_ERROR$2,
  Z_DATA_ERROR: Z_DATA_ERROR$2,
  Z_BUF_ERROR: Z_BUF_ERROR$1,
  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
  Z_FILTERED,
  Z_HUFFMAN_ONLY,
  Z_RLE,
  Z_FIXED,
  Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,
  Z_UNKNOWN,
  Z_DEFLATED: Z_DEFLATED$2
} = constants$2;
const MAX_MEM_LEVEL = 9;
const MAX_WBITS$1 = 15;
const DEF_MEM_LEVEL = 8;
const LENGTH_CODES = 29;
const LITERALS = 256;
const L_CODES = LITERALS + 1 + LENGTH_CODES;
const D_CODES = 30;
const BL_CODES = 19;
const HEAP_SIZE = 2 * L_CODES + 1;
const MAX_BITS = 15;
const MIN_MATCH = 3;
const MAX_MATCH = 258;
const MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
const PRESET_DICT = 32;
const INIT_STATE = 42;
const GZIP_STATE = 57;
const EXTRA_STATE = 69;
const NAME_STATE = 73;
const COMMENT_STATE = 91;
const HCRC_STATE = 103;
const BUSY_STATE = 113;
const FINISH_STATE = 666;
const BS_NEED_MORE = 1;
const BS_BLOCK_DONE = 2;
const BS_FINISH_STARTED = 3;
const BS_FINISH_DONE = 4;
const OS_CODE = 3;
const err = (strm, errorCode) => {
  strm.msg = messages[errorCode];
  return errorCode;
};
const rank = (f2) => {
  return f2 * 2 - (f2 > 4 ? 9 : 0);
};
const zero = (buf) => {
  let len = buf.length;
  while (--len >= 0) {
    buf[len] = 0;
  }
};
const slide_hash = (s2) => {
  let n2, m2;
  let p2;
  let wsize = s2.w_size;
  n2 = s2.hash_size;
  p2 = n2;
  do {
    m2 = s2.head[--p2];
    s2.head[p2] = m2 >= wsize ? m2 - wsize : 0;
  } while (--n2);
  n2 = wsize;
  p2 = n2;
  do {
    m2 = s2.prev[--p2];
    s2.prev[p2] = m2 >= wsize ? m2 - wsize : 0;
  } while (--n2);
};
let HASH_ZLIB = (s2, prev, data) => (prev << s2.hash_shift ^ data) & s2.hash_mask;
let HASH = HASH_ZLIB;
const flush_pending = (strm) => {
  const s2 = strm.state;
  let len = s2.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) {
    return;
  }
  strm.output.set(s2.pending_buf.subarray(s2.pending_out, s2.pending_out + len), strm.next_out);
  strm.next_out += len;
  s2.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s2.pending -= len;
  if (s2.pending === 0) {
    s2.pending_out = 0;
  }
};
const flush_block_only = (s2, last) => {
  _tr_flush_block(s2, s2.block_start >= 0 ? s2.block_start : -1, s2.strstart - s2.block_start, last);
  s2.block_start = s2.strstart;
  flush_pending(s2.strm);
};
const put_byte = (s2, b) => {
  s2.pending_buf[s2.pending++] = b;
};
const putShortMSB = (s2, b) => {
  s2.pending_buf[s2.pending++] = b >>> 8 & 255;
  s2.pending_buf[s2.pending++] = b & 255;
};
const read_buf = (strm, buf, start, size2) => {
  let len = strm.avail_in;
  if (len > size2) {
    len = size2;
  }
  if (len === 0) {
    return 0;
  }
  strm.avail_in -= len;
  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32_1(strm.adler, buf, len, start);
  } else if (strm.state.wrap === 2) {
    strm.adler = crc32_1(strm.adler, buf, len, start);
  }
  strm.next_in += len;
  strm.total_in += len;
  return len;
};
const longest_match = (s2, cur_match) => {
  let chain_length = s2.max_chain_length;
  let scan = s2.strstart;
  let match;
  let len;
  let best_len = s2.prev_length;
  let nice_match = s2.nice_match;
  const limit = s2.strstart > s2.w_size - MIN_LOOKAHEAD ? s2.strstart - (s2.w_size - MIN_LOOKAHEAD) : 0;
  const _win = s2.window;
  const wmask = s2.w_mask;
  const prev = s2.prev;
  const strend = s2.strstart + MAX_MATCH;
  let scan_end1 = _win[scan + best_len - 1];
  let scan_end = _win[scan + best_len];
  if (s2.prev_length >= s2.good_match) {
    chain_length >>= 2;
  }
  if (nice_match > s2.lookahead) {
    nice_match = s2.lookahead;
  }
  do {
    match = cur_match;
    if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
      continue;
    }
    scan += 2;
    match++;
    do {
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;
    if (len > best_len) {
      s2.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1 = _win[scan + best_len - 1];
      scan_end = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
  if (best_len <= s2.lookahead) {
    return best_len;
  }
  return s2.lookahead;
};
const fill_window = (s2) => {
  const _w_size = s2.w_size;
  let n2, more, str;
  do {
    more = s2.window_size - s2.lookahead - s2.strstart;
    if (s2.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
      s2.window.set(s2.window.subarray(_w_size, _w_size + _w_size - more), 0);
      s2.match_start -= _w_size;
      s2.strstart -= _w_size;
      s2.block_start -= _w_size;
      if (s2.insert > s2.strstart) {
        s2.insert = s2.strstart;
      }
      slide_hash(s2);
      more += _w_size;
    }
    if (s2.strm.avail_in === 0) {
      break;
    }
    n2 = read_buf(s2.strm, s2.window, s2.strstart + s2.lookahead, more);
    s2.lookahead += n2;
    if (s2.lookahead + s2.insert >= MIN_MATCH) {
      str = s2.strstart - s2.insert;
      s2.ins_h = s2.window[str];
      s2.ins_h = HASH(s2, s2.ins_h, s2.window[str + 1]);
      while (s2.insert) {
        s2.ins_h = HASH(s2, s2.ins_h, s2.window[str + MIN_MATCH - 1]);
        s2.prev[str & s2.w_mask] = s2.head[s2.ins_h];
        s2.head[s2.ins_h] = str;
        str++;
        s2.insert--;
        if (s2.lookahead + s2.insert < MIN_MATCH) {
          break;
        }
      }
    }
  } while (s2.lookahead < MIN_LOOKAHEAD && s2.strm.avail_in !== 0);
};
const deflate_stored = (s2, flush2) => {
  let min_block = s2.pending_buf_size - 5 > s2.w_size ? s2.w_size : s2.pending_buf_size - 5;
  let len, left, have, last = 0;
  let used = s2.strm.avail_in;
  do {
    len = 65535;
    have = s2.bi_valid + 42 >> 3;
    if (s2.strm.avail_out < have) {
      break;
    }
    have = s2.strm.avail_out - have;
    left = s2.strstart - s2.block_start;
    if (len > left + s2.strm.avail_in) {
      len = left + s2.strm.avail_in;
    }
    if (len > have) {
      len = have;
    }
    if (len < min_block && (len === 0 && flush2 !== Z_FINISH$3 || flush2 === Z_NO_FLUSH$2 || len !== left + s2.strm.avail_in)) {
      break;
    }
    last = flush2 === Z_FINISH$3 && len === left + s2.strm.avail_in ? 1 : 0;
    _tr_stored_block(s2, 0, 0, last);
    s2.pending_buf[s2.pending - 4] = len;
    s2.pending_buf[s2.pending - 3] = len >> 8;
    s2.pending_buf[s2.pending - 2] = ~len;
    s2.pending_buf[s2.pending - 1] = ~len >> 8;
    flush_pending(s2.strm);
    if (left) {
      if (left > len) {
        left = len;
      }
      s2.strm.output.set(s2.window.subarray(s2.block_start, s2.block_start + left), s2.strm.next_out);
      s2.strm.next_out += left;
      s2.strm.avail_out -= left;
      s2.strm.total_out += left;
      s2.block_start += left;
      len -= left;
    }
    if (len) {
      read_buf(s2.strm, s2.strm.output, s2.strm.next_out, len);
      s2.strm.next_out += len;
      s2.strm.avail_out -= len;
      s2.strm.total_out += len;
    }
  } while (last === 0);
  used -= s2.strm.avail_in;
  if (used) {
    if (used >= s2.w_size) {
      s2.matches = 2;
      s2.window.set(s2.strm.input.subarray(s2.strm.next_in - s2.w_size, s2.strm.next_in), 0);
      s2.strstart = s2.w_size;
      s2.insert = s2.strstart;
    } else {
      if (s2.window_size - s2.strstart <= used) {
        s2.strstart -= s2.w_size;
        s2.window.set(s2.window.subarray(s2.w_size, s2.w_size + s2.strstart), 0);
        if (s2.matches < 2) {
          s2.matches++;
        }
        if (s2.insert > s2.strstart) {
          s2.insert = s2.strstart;
        }
      }
      s2.window.set(s2.strm.input.subarray(s2.strm.next_in - used, s2.strm.next_in), s2.strstart);
      s2.strstart += used;
      s2.insert += used > s2.w_size - s2.insert ? s2.w_size - s2.insert : used;
    }
    s2.block_start = s2.strstart;
  }
  if (s2.high_water < s2.strstart) {
    s2.high_water = s2.strstart;
  }
  if (last) {
    return BS_FINISH_DONE;
  }
  if (flush2 !== Z_NO_FLUSH$2 && flush2 !== Z_FINISH$3 && s2.strm.avail_in === 0 && s2.strstart === s2.block_start) {
    return BS_BLOCK_DONE;
  }
  have = s2.window_size - s2.strstart;
  if (s2.strm.avail_in > have && s2.block_start >= s2.w_size) {
    s2.block_start -= s2.w_size;
    s2.strstart -= s2.w_size;
    s2.window.set(s2.window.subarray(s2.w_size, s2.w_size + s2.strstart), 0);
    if (s2.matches < 2) {
      s2.matches++;
    }
    have += s2.w_size;
    if (s2.insert > s2.strstart) {
      s2.insert = s2.strstart;
    }
  }
  if (have > s2.strm.avail_in) {
    have = s2.strm.avail_in;
  }
  if (have) {
    read_buf(s2.strm, s2.window, s2.strstart, have);
    s2.strstart += have;
    s2.insert += have > s2.w_size - s2.insert ? s2.w_size - s2.insert : have;
  }
  if (s2.high_water < s2.strstart) {
    s2.high_water = s2.strstart;
  }
  have = s2.bi_valid + 42 >> 3;
  have = s2.pending_buf_size - have > 65535 ? 65535 : s2.pending_buf_size - have;
  min_block = have > s2.w_size ? s2.w_size : have;
  left = s2.strstart - s2.block_start;
  if (left >= min_block || (left || flush2 === Z_FINISH$3) && flush2 !== Z_NO_FLUSH$2 && s2.strm.avail_in === 0 && left <= have) {
    len = left > have ? have : left;
    last = flush2 === Z_FINISH$3 && s2.strm.avail_in === 0 && len === left ? 1 : 0;
    _tr_stored_block(s2, s2.block_start, len, last);
    s2.block_start += len;
    flush_pending(s2.strm);
  }
  return last ? BS_FINISH_STARTED : BS_NEED_MORE;
};
const deflate_fast = (s2, flush2) => {
  let hash_head;
  let bflush;
  for (; ; ) {
    if (s2.lookahead < MIN_LOOKAHEAD) {
      fill_window(s2);
      if (s2.lookahead < MIN_LOOKAHEAD && flush2 === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s2.lookahead === 0) {
        break;
      }
    }
    hash_head = 0;
    if (s2.lookahead >= MIN_MATCH) {
      s2.ins_h = HASH(s2, s2.ins_h, s2.window[s2.strstart + MIN_MATCH - 1]);
      hash_head = s2.prev[s2.strstart & s2.w_mask] = s2.head[s2.ins_h];
      s2.head[s2.ins_h] = s2.strstart;
    }
    if (hash_head !== 0 && s2.strstart - hash_head <= s2.w_size - MIN_LOOKAHEAD) {
      s2.match_length = longest_match(s2, hash_head);
    }
    if (s2.match_length >= MIN_MATCH) {
      bflush = _tr_tally(s2, s2.strstart - s2.match_start, s2.match_length - MIN_MATCH);
      s2.lookahead -= s2.match_length;
      if (s2.match_length <= s2.max_lazy_match && s2.lookahead >= MIN_MATCH) {
        s2.match_length--;
        do {
          s2.strstart++;
          s2.ins_h = HASH(s2, s2.ins_h, s2.window[s2.strstart + MIN_MATCH - 1]);
          hash_head = s2.prev[s2.strstart & s2.w_mask] = s2.head[s2.ins_h];
          s2.head[s2.ins_h] = s2.strstart;
        } while (--s2.match_length !== 0);
        s2.strstart++;
      } else {
        s2.strstart += s2.match_length;
        s2.match_length = 0;
        s2.ins_h = s2.window[s2.strstart];
        s2.ins_h = HASH(s2, s2.ins_h, s2.window[s2.strstart + 1]);
      }
    } else {
      bflush = _tr_tally(s2, 0, s2.window[s2.strstart]);
      s2.lookahead--;
      s2.strstart++;
    }
    if (bflush) {
      flush_block_only(s2, false);
      if (s2.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s2.insert = s2.strstart < MIN_MATCH - 1 ? s2.strstart : MIN_MATCH - 1;
  if (flush2 === Z_FINISH$3) {
    flush_block_only(s2, true);
    if (s2.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s2.sym_next) {
    flush_block_only(s2, false);
    if (s2.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
};
const deflate_slow = (s2, flush2) => {
  let hash_head;
  let bflush;
  let max_insert;
  for (; ; ) {
    if (s2.lookahead < MIN_LOOKAHEAD) {
      fill_window(s2);
      if (s2.lookahead < MIN_LOOKAHEAD && flush2 === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s2.lookahead === 0) {
        break;
      }
    }
    hash_head = 0;
    if (s2.lookahead >= MIN_MATCH) {
      s2.ins_h = HASH(s2, s2.ins_h, s2.window[s2.strstart + MIN_MATCH - 1]);
      hash_head = s2.prev[s2.strstart & s2.w_mask] = s2.head[s2.ins_h];
      s2.head[s2.ins_h] = s2.strstart;
    }
    s2.prev_length = s2.match_length;
    s2.prev_match = s2.match_start;
    s2.match_length = MIN_MATCH - 1;
    if (hash_head !== 0 && s2.prev_length < s2.max_lazy_match && s2.strstart - hash_head <= s2.w_size - MIN_LOOKAHEAD) {
      s2.match_length = longest_match(s2, hash_head);
      if (s2.match_length <= 5 && (s2.strategy === Z_FILTERED || s2.match_length === MIN_MATCH && s2.strstart - s2.match_start > 4096)) {
        s2.match_length = MIN_MATCH - 1;
      }
    }
    if (s2.prev_length >= MIN_MATCH && s2.match_length <= s2.prev_length) {
      max_insert = s2.strstart + s2.lookahead - MIN_MATCH;
      bflush = _tr_tally(s2, s2.strstart - 1 - s2.prev_match, s2.prev_length - MIN_MATCH);
      s2.lookahead -= s2.prev_length - 1;
      s2.prev_length -= 2;
      do {
        if (++s2.strstart <= max_insert) {
          s2.ins_h = HASH(s2, s2.ins_h, s2.window[s2.strstart + MIN_MATCH - 1]);
          hash_head = s2.prev[s2.strstart & s2.w_mask] = s2.head[s2.ins_h];
          s2.head[s2.ins_h] = s2.strstart;
        }
      } while (--s2.prev_length !== 0);
      s2.match_available = 0;
      s2.match_length = MIN_MATCH - 1;
      s2.strstart++;
      if (bflush) {
        flush_block_only(s2, false);
        if (s2.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    } else if (s2.match_available) {
      bflush = _tr_tally(s2, 0, s2.window[s2.strstart - 1]);
      if (bflush) {
        flush_block_only(s2, false);
      }
      s2.strstart++;
      s2.lookahead--;
      if (s2.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      s2.match_available = 1;
      s2.strstart++;
      s2.lookahead--;
    }
  }
  if (s2.match_available) {
    bflush = _tr_tally(s2, 0, s2.window[s2.strstart - 1]);
    s2.match_available = 0;
  }
  s2.insert = s2.strstart < MIN_MATCH - 1 ? s2.strstart : MIN_MATCH - 1;
  if (flush2 === Z_FINISH$3) {
    flush_block_only(s2, true);
    if (s2.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s2.sym_next) {
    flush_block_only(s2, false);
    if (s2.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
};
const deflate_rle = (s2, flush2) => {
  let bflush;
  let prev;
  let scan, strend;
  const _win = s2.window;
  for (; ; ) {
    if (s2.lookahead <= MAX_MATCH) {
      fill_window(s2);
      if (s2.lookahead <= MAX_MATCH && flush2 === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s2.lookahead === 0) {
        break;
      }
    }
    s2.match_length = 0;
    if (s2.lookahead >= MIN_MATCH && s2.strstart > 0) {
      scan = s2.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s2.strstart + MAX_MATCH;
        do {
        } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
        s2.match_length = MAX_MATCH - (strend - scan);
        if (s2.match_length > s2.lookahead) {
          s2.match_length = s2.lookahead;
        }
      }
    }
    if (s2.match_length >= MIN_MATCH) {
      bflush = _tr_tally(s2, 1, s2.match_length - MIN_MATCH);
      s2.lookahead -= s2.match_length;
      s2.strstart += s2.match_length;
      s2.match_length = 0;
    } else {
      bflush = _tr_tally(s2, 0, s2.window[s2.strstart]);
      s2.lookahead--;
      s2.strstart++;
    }
    if (bflush) {
      flush_block_only(s2, false);
      if (s2.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s2.insert = 0;
  if (flush2 === Z_FINISH$3) {
    flush_block_only(s2, true);
    if (s2.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s2.sym_next) {
    flush_block_only(s2, false);
    if (s2.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
};
const deflate_huff = (s2, flush2) => {
  let bflush;
  for (; ; ) {
    if (s2.lookahead === 0) {
      fill_window(s2);
      if (s2.lookahead === 0) {
        if (flush2 === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        break;
      }
    }
    s2.match_length = 0;
    bflush = _tr_tally(s2, 0, s2.window[s2.strstart]);
    s2.lookahead--;
    s2.strstart++;
    if (bflush) {
      flush_block_only(s2, false);
      if (s2.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s2.insert = 0;
  if (flush2 === Z_FINISH$3) {
    flush_block_only(s2, true);
    if (s2.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s2.sym_next) {
    flush_block_only(s2, false);
    if (s2.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
};
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}
const configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),
  /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),
  /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),
  /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),
  /* 3 */
  new Config(4, 4, 16, 16, deflate_slow),
  /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),
  /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),
  /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),
  /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),
  /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)
  /* 9 max compression */
];
const lm_init = (s2) => {
  s2.window_size = 2 * s2.w_size;
  zero(s2.head);
  s2.max_lazy_match = configuration_table[s2.level].max_lazy;
  s2.good_match = configuration_table[s2.level].good_length;
  s2.nice_match = configuration_table[s2.level].nice_length;
  s2.max_chain_length = configuration_table[s2.level].max_chain;
  s2.strstart = 0;
  s2.block_start = 0;
  s2.lookahead = 0;
  s2.insert = 0;
  s2.match_length = s2.prev_length = MIN_MATCH - 1;
  s2.match_available = 0;
  s2.ins_h = 0;
};
function DeflateState() {
  this.strm = null;
  this.status = 0;
  this.pending_buf = null;
  this.pending_buf_size = 0;
  this.pending_out = 0;
  this.pending = 0;
  this.wrap = 0;
  this.gzhead = null;
  this.gzindex = 0;
  this.method = Z_DEFLATED$2;
  this.last_flush = -1;
  this.w_size = 0;
  this.w_bits = 0;
  this.w_mask = 0;
  this.window = null;
  this.window_size = 0;
  this.prev = null;
  this.head = null;
  this.ins_h = 0;
  this.hash_size = 0;
  this.hash_bits = 0;
  this.hash_mask = 0;
  this.hash_shift = 0;
  this.block_start = 0;
  this.match_length = 0;
  this.prev_match = 0;
  this.match_available = 0;
  this.strstart = 0;
  this.match_start = 0;
  this.lookahead = 0;
  this.prev_length = 0;
  this.max_chain_length = 0;
  this.max_lazy_match = 0;
  this.level = 0;
  this.strategy = 0;
  this.good_match = 0;
  this.nice_match = 0;
  this.dyn_ltree = new Uint16Array(HEAP_SIZE * 2);
  this.dyn_dtree = new Uint16Array((2 * D_CODES + 1) * 2);
  this.bl_tree = new Uint16Array((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);
  this.l_desc = null;
  this.d_desc = null;
  this.bl_desc = null;
  this.bl_count = new Uint16Array(MAX_BITS + 1);
  this.heap = new Uint16Array(2 * L_CODES + 1);
  zero(this.heap);
  this.heap_len = 0;
  this.heap_max = 0;
  this.depth = new Uint16Array(2 * L_CODES + 1);
  zero(this.depth);
  this.sym_buf = 0;
  this.lit_bufsize = 0;
  this.sym_next = 0;
  this.sym_end = 0;
  this.opt_len = 0;
  this.static_len = 0;
  this.matches = 0;
  this.insert = 0;
  this.bi_buf = 0;
  this.bi_valid = 0;
}
const deflateStateCheck = (strm) => {
  if (!strm) {
    return 1;
  }
  const s2 = strm.state;
  if (!s2 || s2.strm !== strm || s2.status !== INIT_STATE && //#ifdef GZIP
  s2.status !== GZIP_STATE && //#endif
  s2.status !== EXTRA_STATE && s2.status !== NAME_STATE && s2.status !== COMMENT_STATE && s2.status !== HCRC_STATE && s2.status !== BUSY_STATE && s2.status !== FINISH_STATE) {
    return 1;
  }
  return 0;
};
const deflateResetKeep = (strm) => {
  if (deflateStateCheck(strm)) {
    return err(strm, Z_STREAM_ERROR$2);
  }
  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;
  const s2 = strm.state;
  s2.pending = 0;
  s2.pending_out = 0;
  if (s2.wrap < 0) {
    s2.wrap = -s2.wrap;
  }
  s2.status = //#ifdef GZIP
  s2.wrap === 2 ? GZIP_STATE : (
    //#endif
    s2.wrap ? INIT_STATE : BUSY_STATE
  );
  strm.adler = s2.wrap === 2 ? 0 : 1;
  s2.last_flush = -2;
  _tr_init(s2);
  return Z_OK$3;
};
const deflateReset = (strm) => {
  const ret = deflateResetKeep(strm);
  if (ret === Z_OK$3) {
    lm_init(strm.state);
  }
  return ret;
};
const deflateSetHeader = (strm, head) => {
  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {
    return Z_STREAM_ERROR$2;
  }
  strm.state.gzhead = head;
  return Z_OK$3;
};
const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {
  if (!strm) {
    return Z_STREAM_ERROR$2;
  }
  let wrap = 1;
  if (level === Z_DEFAULT_COMPRESSION$1) {
    level = 6;
  }
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  } else if (windowBits > 15) {
    wrap = 2;
    windowBits -= 16;
  }
  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED || windowBits === 8 && wrap !== 1) {
    return err(strm, Z_STREAM_ERROR$2);
  }
  if (windowBits === 8) {
    windowBits = 9;
  }
  const s2 = new DeflateState();
  strm.state = s2;
  s2.strm = strm;
  s2.status = INIT_STATE;
  s2.wrap = wrap;
  s2.gzhead = null;
  s2.w_bits = windowBits;
  s2.w_size = 1 << s2.w_bits;
  s2.w_mask = s2.w_size - 1;
  s2.hash_bits = memLevel + 7;
  s2.hash_size = 1 << s2.hash_bits;
  s2.hash_mask = s2.hash_size - 1;
  s2.hash_shift = ~~((s2.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
  s2.window = new Uint8Array(s2.w_size * 2);
  s2.head = new Uint16Array(s2.hash_size);
  s2.prev = new Uint16Array(s2.w_size);
  s2.lit_bufsize = 1 << memLevel + 6;
  s2.pending_buf_size = s2.lit_bufsize * 4;
  s2.pending_buf = new Uint8Array(s2.pending_buf_size);
  s2.sym_buf = s2.lit_bufsize;
  s2.sym_end = (s2.lit_bufsize - 1) * 3;
  s2.level = level;
  s2.strategy = strategy;
  s2.method = method;
  return deflateReset(strm);
};
const deflateInit = (strm, level) => {
  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
};
const deflate$2 = (strm, flush2) => {
  if (deflateStateCheck(strm) || flush2 > Z_BLOCK$1 || flush2 < 0) {
    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;
  }
  const s2 = strm.state;
  if (!strm.output || strm.avail_in !== 0 && !strm.input || s2.status === FINISH_STATE && flush2 !== Z_FINISH$3) {
    return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);
  }
  const old_flush = s2.last_flush;
  s2.last_flush = flush2;
  if (s2.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      s2.last_flush = -1;
      return Z_OK$3;
    }
  } else if (strm.avail_in === 0 && rank(flush2) <= rank(old_flush) && flush2 !== Z_FINISH$3) {
    return err(strm, Z_BUF_ERROR$1);
  }
  if (s2.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR$1);
  }
  if (s2.status === INIT_STATE && s2.wrap === 0) {
    s2.status = BUSY_STATE;
  }
  if (s2.status === INIT_STATE) {
    let header = Z_DEFLATED$2 + (s2.w_bits - 8 << 4) << 8;
    let level_flags = -1;
    if (s2.strategy >= Z_HUFFMAN_ONLY || s2.level < 2) {
      level_flags = 0;
    } else if (s2.level < 6) {
      level_flags = 1;
    } else if (s2.level === 6) {
      level_flags = 2;
    } else {
      level_flags = 3;
    }
    header |= level_flags << 6;
    if (s2.strstart !== 0) {
      header |= PRESET_DICT;
    }
    header += 31 - header % 31;
    putShortMSB(s2, header);
    if (s2.strstart !== 0) {
      putShortMSB(s2, strm.adler >>> 16);
      putShortMSB(s2, strm.adler & 65535);
    }
    strm.adler = 1;
    s2.status = BUSY_STATE;
    flush_pending(strm);
    if (s2.pending !== 0) {
      s2.last_flush = -1;
      return Z_OK$3;
    }
  }
  if (s2.status === GZIP_STATE) {
    strm.adler = 0;
    put_byte(s2, 31);
    put_byte(s2, 139);
    put_byte(s2, 8);
    if (!s2.gzhead) {
      put_byte(s2, 0);
      put_byte(s2, 0);
      put_byte(s2, 0);
      put_byte(s2, 0);
      put_byte(s2, 0);
      put_byte(s2, s2.level === 9 ? 2 : s2.strategy >= Z_HUFFMAN_ONLY || s2.level < 2 ? 4 : 0);
      put_byte(s2, OS_CODE);
      s2.status = BUSY_STATE;
      flush_pending(strm);
      if (s2.pending !== 0) {
        s2.last_flush = -1;
        return Z_OK$3;
      }
    } else {
      put_byte(
        s2,
        (s2.gzhead.text ? 1 : 0) + (s2.gzhead.hcrc ? 2 : 0) + (!s2.gzhead.extra ? 0 : 4) + (!s2.gzhead.name ? 0 : 8) + (!s2.gzhead.comment ? 0 : 16)
      );
      put_byte(s2, s2.gzhead.time & 255);
      put_byte(s2, s2.gzhead.time >> 8 & 255);
      put_byte(s2, s2.gzhead.time >> 16 & 255);
      put_byte(s2, s2.gzhead.time >> 24 & 255);
      put_byte(s2, s2.level === 9 ? 2 : s2.strategy >= Z_HUFFMAN_ONLY || s2.level < 2 ? 4 : 0);
      put_byte(s2, s2.gzhead.os & 255);
      if (s2.gzhead.extra && s2.gzhead.extra.length) {
        put_byte(s2, s2.gzhead.extra.length & 255);
        put_byte(s2, s2.gzhead.extra.length >> 8 & 255);
      }
      if (s2.gzhead.hcrc) {
        strm.adler = crc32_1(strm.adler, s2.pending_buf, s2.pending, 0);
      }
      s2.gzindex = 0;
      s2.status = EXTRA_STATE;
    }
  }
  if (s2.status === EXTRA_STATE) {
    if (s2.gzhead.extra) {
      let beg = s2.pending;
      let left = (s2.gzhead.extra.length & 65535) - s2.gzindex;
      while (s2.pending + left > s2.pending_buf_size) {
        let copy = s2.pending_buf_size - s2.pending;
        s2.pending_buf.set(s2.gzhead.extra.subarray(s2.gzindex, s2.gzindex + copy), s2.pending);
        s2.pending = s2.pending_buf_size;
        if (s2.gzhead.hcrc && s2.pending > beg) {
          strm.adler = crc32_1(strm.adler, s2.pending_buf, s2.pending - beg, beg);
        }
        s2.gzindex += copy;
        flush_pending(strm);
        if (s2.pending !== 0) {
          s2.last_flush = -1;
          return Z_OK$3;
        }
        beg = 0;
        left -= copy;
      }
      let gzhead_extra = new Uint8Array(s2.gzhead.extra);
      s2.pending_buf.set(gzhead_extra.subarray(s2.gzindex, s2.gzindex + left), s2.pending);
      s2.pending += left;
      if (s2.gzhead.hcrc && s2.pending > beg) {
        strm.adler = crc32_1(strm.adler, s2.pending_buf, s2.pending - beg, beg);
      }
      s2.gzindex = 0;
    }
    s2.status = NAME_STATE;
  }
  if (s2.status === NAME_STATE) {
    if (s2.gzhead.name) {
      let beg = s2.pending;
      let val;
      do {
        if (s2.pending === s2.pending_buf_size) {
          if (s2.gzhead.hcrc && s2.pending > beg) {
            strm.adler = crc32_1(strm.adler, s2.pending_buf, s2.pending - beg, beg);
          }
          flush_pending(strm);
          if (s2.pending !== 0) {
            s2.last_flush = -1;
            return Z_OK$3;
          }
          beg = 0;
        }
        if (s2.gzindex < s2.gzhead.name.length) {
          val = s2.gzhead.name.charCodeAt(s2.gzindex++) & 255;
        } else {
          val = 0;
        }
        put_byte(s2, val);
      } while (val !== 0);
      if (s2.gzhead.hcrc && s2.pending > beg) {
        strm.adler = crc32_1(strm.adler, s2.pending_buf, s2.pending - beg, beg);
      }
      s2.gzindex = 0;
    }
    s2.status = COMMENT_STATE;
  }
  if (s2.status === COMMENT_STATE) {
    if (s2.gzhead.comment) {
      let beg = s2.pending;
      let val;
      do {
        if (s2.pending === s2.pending_buf_size) {
          if (s2.gzhead.hcrc && s2.pending > beg) {
            strm.adler = crc32_1(strm.adler, s2.pending_buf, s2.pending - beg, beg);
          }
          flush_pending(strm);
          if (s2.pending !== 0) {
            s2.last_flush = -1;
            return Z_OK$3;
          }
          beg = 0;
        }
        if (s2.gzindex < s2.gzhead.comment.length) {
          val = s2.gzhead.comment.charCodeAt(s2.gzindex++) & 255;
        } else {
          val = 0;
        }
        put_byte(s2, val);
      } while (val !== 0);
      if (s2.gzhead.hcrc && s2.pending > beg) {
        strm.adler = crc32_1(strm.adler, s2.pending_buf, s2.pending - beg, beg);
      }
    }
    s2.status = HCRC_STATE;
  }
  if (s2.status === HCRC_STATE) {
    if (s2.gzhead.hcrc) {
      if (s2.pending + 2 > s2.pending_buf_size) {
        flush_pending(strm);
        if (s2.pending !== 0) {
          s2.last_flush = -1;
          return Z_OK$3;
        }
      }
      put_byte(s2, strm.adler & 255);
      put_byte(s2, strm.adler >> 8 & 255);
      strm.adler = 0;
    }
    s2.status = BUSY_STATE;
    flush_pending(strm);
    if (s2.pending !== 0) {
      s2.last_flush = -1;
      return Z_OK$3;
    }
  }
  if (strm.avail_in !== 0 || s2.lookahead !== 0 || flush2 !== Z_NO_FLUSH$2 && s2.status !== FINISH_STATE) {
    let bstate = s2.level === 0 ? deflate_stored(s2, flush2) : s2.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s2, flush2) : s2.strategy === Z_RLE ? deflate_rle(s2, flush2) : configuration_table[s2.level].func(s2, flush2);
    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s2.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s2.last_flush = -1;
      }
      return Z_OK$3;
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush2 === Z_PARTIAL_FLUSH) {
        _tr_align(s2);
      } else if (flush2 !== Z_BLOCK$1) {
        _tr_stored_block(s2, 0, 0, false);
        if (flush2 === Z_FULL_FLUSH$1) {
          zero(s2.head);
          if (s2.lookahead === 0) {
            s2.strstart = 0;
            s2.block_start = 0;
            s2.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s2.last_flush = -1;
        return Z_OK$3;
      }
    }
  }
  if (flush2 !== Z_FINISH$3) {
    return Z_OK$3;
  }
  if (s2.wrap <= 0) {
    return Z_STREAM_END$3;
  }
  if (s2.wrap === 2) {
    put_byte(s2, strm.adler & 255);
    put_byte(s2, strm.adler >> 8 & 255);
    put_byte(s2, strm.adler >> 16 & 255);
    put_byte(s2, strm.adler >> 24 & 255);
    put_byte(s2, strm.total_in & 255);
    put_byte(s2, strm.total_in >> 8 & 255);
    put_byte(s2, strm.total_in >> 16 & 255);
    put_byte(s2, strm.total_in >> 24 & 255);
  } else {
    putShortMSB(s2, strm.adler >>> 16);
    putShortMSB(s2, strm.adler & 65535);
  }
  flush_pending(strm);
  if (s2.wrap > 0) {
    s2.wrap = -s2.wrap;
  }
  return s2.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;
};
const deflateEnd = (strm) => {
  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR$2;
  }
  const status = strm.state.status;
  strm.state = null;
  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;
};
const deflateSetDictionary = (strm, dictionary) => {
  let dictLength = dictionary.length;
  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR$2;
  }
  const s2 = strm.state;
  const wrap = s2.wrap;
  if (wrap === 2 || wrap === 1 && s2.status !== INIT_STATE || s2.lookahead) {
    return Z_STREAM_ERROR$2;
  }
  if (wrap === 1) {
    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
  }
  s2.wrap = 0;
  if (dictLength >= s2.w_size) {
    if (wrap === 0) {
      zero(s2.head);
      s2.strstart = 0;
      s2.block_start = 0;
      s2.insert = 0;
    }
    let tmpDict = new Uint8Array(s2.w_size);
    tmpDict.set(dictionary.subarray(dictLength - s2.w_size, dictLength), 0);
    dictionary = tmpDict;
    dictLength = s2.w_size;
  }
  const avail = strm.avail_in;
  const next = strm.next_in;
  const input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s2);
  while (s2.lookahead >= MIN_MATCH) {
    let str = s2.strstart;
    let n2 = s2.lookahead - (MIN_MATCH - 1);
    do {
      s2.ins_h = HASH(s2, s2.ins_h, s2.window[str + MIN_MATCH - 1]);
      s2.prev[str & s2.w_mask] = s2.head[s2.ins_h];
      s2.head[s2.ins_h] = str;
      str++;
    } while (--n2);
    s2.strstart = str;
    s2.lookahead = MIN_MATCH - 1;
    fill_window(s2);
  }
  s2.strstart += s2.lookahead;
  s2.block_start = s2.strstart;
  s2.insert = s2.lookahead;
  s2.lookahead = 0;
  s2.match_length = s2.prev_length = MIN_MATCH - 1;
  s2.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s2.wrap = wrap;
  return Z_OK$3;
};
var deflateInit_1 = deflateInit;
var deflateInit2_1 = deflateInit2;
var deflateReset_1 = deflateReset;
var deflateResetKeep_1 = deflateResetKeep;
var deflateSetHeader_1 = deflateSetHeader;
var deflate_2$1 = deflate$2;
var deflateEnd_1 = deflateEnd;
var deflateSetDictionary_1 = deflateSetDictionary;
var deflateInfo = "pako deflate (from Nodeca project)";
var deflate_1$2 = {
  deflateInit: deflateInit_1,
  deflateInit2: deflateInit2_1,
  deflateReset: deflateReset_1,
  deflateResetKeep: deflateResetKeep_1,
  deflateSetHeader: deflateSetHeader_1,
  deflate: deflate_2$1,
  deflateEnd: deflateEnd_1,
  deflateSetDictionary: deflateSetDictionary_1,
  deflateInfo
};
const _has = (obj, key2) => {
  return Object.prototype.hasOwnProperty.call(obj, key2);
};
var assign$1 = function(obj) {
  const sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    const source = sources.shift();
    if (!source) {
      continue;
    }
    if (typeof source !== "object") {
      throw new TypeError(source + "must be non-object");
    }
    for (const p2 in source) {
      if (_has(source, p2)) {
        obj[p2] = source[p2];
      }
    }
  }
  return obj;
};
var flattenChunks = (chunks) => {
  let len = 0;
  for (let i2 = 0, l2 = chunks.length; i2 < l2; i2++) {
    len += chunks[i2].length;
  }
  const result = new Uint8Array(len);
  for (let i2 = 0, pos = 0, l2 = chunks.length; i2 < l2; i2++) {
    let chunk = chunks[i2];
    result.set(chunk, pos);
    pos += chunk.length;
  }
  return result;
};
var common = {
  assign: assign$1,
  flattenChunks
};
let STR_APPLY_UIA_OK = true;
try {
  String.fromCharCode.apply(null, new Uint8Array(1));
} catch (__) {
  STR_APPLY_UIA_OK = false;
}
const _utf8len = new Uint8Array(256);
for (let q2 = 0; q2 < 256; q2++) {
  _utf8len[q2] = q2 >= 252 ? 6 : q2 >= 248 ? 5 : q2 >= 240 ? 4 : q2 >= 224 ? 3 : q2 >= 192 ? 2 : 1;
}
_utf8len[254] = _utf8len[254] = 1;
var string2buf = (str) => {
  if (typeof TextEncoder === "function" && TextEncoder.prototype.encode) {
    return new TextEncoder().encode(str);
  }
  let buf, c2, c22, m_pos, i2, str_len = str.length, buf_len = 0;
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c2 = str.charCodeAt(m_pos);
    if ((c2 & 64512) === 55296 && m_pos + 1 < str_len) {
      c22 = str.charCodeAt(m_pos + 1);
      if ((c22 & 64512) === 56320) {
        c2 = 65536 + (c2 - 55296 << 10) + (c22 - 56320);
        m_pos++;
      }
    }
    buf_len += c2 < 128 ? 1 : c2 < 2048 ? 2 : c2 < 65536 ? 3 : 4;
  }
  buf = new Uint8Array(buf_len);
  for (i2 = 0, m_pos = 0; i2 < buf_len; m_pos++) {
    c2 = str.charCodeAt(m_pos);
    if ((c2 & 64512) === 55296 && m_pos + 1 < str_len) {
      c22 = str.charCodeAt(m_pos + 1);
      if ((c22 & 64512) === 56320) {
        c2 = 65536 + (c2 - 55296 << 10) + (c22 - 56320);
        m_pos++;
      }
    }
    if (c2 < 128) {
      buf[i2++] = c2;
    } else if (c2 < 2048) {
      buf[i2++] = 192 | c2 >>> 6;
      buf[i2++] = 128 | c2 & 63;
    } else if (c2 < 65536) {
      buf[i2++] = 224 | c2 >>> 12;
      buf[i2++] = 128 | c2 >>> 6 & 63;
      buf[i2++] = 128 | c2 & 63;
    } else {
      buf[i2++] = 240 | c2 >>> 18;
      buf[i2++] = 128 | c2 >>> 12 & 63;
      buf[i2++] = 128 | c2 >>> 6 & 63;
      buf[i2++] = 128 | c2 & 63;
    }
  }
  return buf;
};
const buf2binstring = (buf, len) => {
  if (len < 65534) {
    if (buf.subarray && STR_APPLY_UIA_OK) {
      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
    }
  }
  let result = "";
  for (let i2 = 0; i2 < len; i2++) {
    result += String.fromCharCode(buf[i2]);
  }
  return result;
};
var buf2string = (buf, max) => {
  const len = max || buf.length;
  if (typeof TextDecoder === "function" && TextDecoder.prototype.decode) {
    return new TextDecoder().decode(buf.subarray(0, max));
  }
  let i2, out;
  const utf16buf = new Array(len * 2);
  for (out = 0, i2 = 0; i2 < len; ) {
    let c2 = buf[i2++];
    if (c2 < 128) {
      utf16buf[out++] = c2;
      continue;
    }
    let c_len = _utf8len[c2];
    if (c_len > 4) {
      utf16buf[out++] = 65533;
      i2 += c_len - 1;
      continue;
    }
    c2 &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;
    while (c_len > 1 && i2 < len) {
      c2 = c2 << 6 | buf[i2++] & 63;
      c_len--;
    }
    if (c_len > 1) {
      utf16buf[out++] = 65533;
      continue;
    }
    if (c2 < 65536) {
      utf16buf[out++] = c2;
    } else {
      c2 -= 65536;
      utf16buf[out++] = 55296 | c2 >> 10 & 1023;
      utf16buf[out++] = 56320 | c2 & 1023;
    }
  }
  return buf2binstring(utf16buf, out);
};
var utf8border = (buf, max) => {
  max = max || buf.length;
  if (max > buf.length) {
    max = buf.length;
  }
  let pos = max - 1;
  while (pos >= 0 && (buf[pos] & 192) === 128) {
    pos--;
  }
  if (pos < 0) {
    return max;
  }
  if (pos === 0) {
    return max;
  }
  return pos + _utf8len[buf[pos]] > max ? pos : max;
};
var strings = {
  string2buf,
  buf2string,
  utf8border
};
function ZStream() {
  this.input = null;
  this.next_in = 0;
  this.avail_in = 0;
  this.total_in = 0;
  this.output = null;
  this.next_out = 0;
  this.avail_out = 0;
  this.total_out = 0;
  this.msg = "";
  this.state = null;
  this.data_type = 2;
  this.adler = 0;
}
var zstream = ZStream;
const toString$1 = Object.prototype.toString;
const {
  Z_NO_FLUSH: Z_NO_FLUSH$1,
  Z_SYNC_FLUSH,
  Z_FULL_FLUSH,
  Z_FINISH: Z_FINISH$2,
  Z_OK: Z_OK$2,
  Z_STREAM_END: Z_STREAM_END$2,
  Z_DEFAULT_COMPRESSION,
  Z_DEFAULT_STRATEGY,
  Z_DEFLATED: Z_DEFLATED$1
} = constants$2;
function Deflate$1(options) {
  this.options = common.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED$1,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY
  }, options || {});
  let opt = this.options;
  if (opt.raw && opt.windowBits > 0) {
    opt.windowBits = -opt.windowBits;
  } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {
    opt.windowBits += 16;
  }
  this.err = 0;
  this.msg = "";
  this.ended = false;
  this.chunks = [];
  this.strm = new zstream();
  this.strm.avail_out = 0;
  let status = deflate_1$2.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );
  if (status !== Z_OK$2) {
    throw new Error(messages[status]);
  }
  if (opt.header) {
    deflate_1$2.deflateSetHeader(this.strm, opt.header);
  }
  if (opt.dictionary) {
    let dict;
    if (typeof opt.dictionary === "string") {
      dict = strings.string2buf(opt.dictionary);
    } else if (toString$1.call(opt.dictionary) === "[object ArrayBuffer]") {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }
    status = deflate_1$2.deflateSetDictionary(this.strm, dict);
    if (status !== Z_OK$2) {
      throw new Error(messages[status]);
    }
    this._dict_set = true;
  }
}
Deflate$1.prototype.push = function(data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  let status, _flush_mode;
  if (this.ended) {
    return false;
  }
  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;
  if (typeof data === "string") {
    strm.input = strings.string2buf(data);
  } else if (toString$1.call(data) === "[object ArrayBuffer]") {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }
  strm.next_in = 0;
  strm.avail_in = strm.input.length;
  for (; ; ) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }
    status = deflate_1$2.deflate(strm, _flush_mode);
    if (status === Z_STREAM_END$2) {
      if (strm.next_out > 0) {
        this.onData(strm.output.subarray(0, strm.next_out));
      }
      status = deflate_1$2.deflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return status === Z_OK$2;
    }
    if (strm.avail_out === 0) {
      this.onData(strm.output);
      continue;
    }
    if (_flush_mode > 0 && strm.next_out > 0) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }
    if (strm.avail_in === 0) break;
  }
  return true;
};
Deflate$1.prototype.onData = function(chunk) {
  this.chunks.push(chunk);
};
Deflate$1.prototype.onEnd = function(status) {
  if (status === Z_OK$2) {
    this.result = common.flattenChunks(this.chunks);
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};
function deflate$1(input, options) {
  const deflator = new Deflate$1(options);
  deflator.push(input, true);
  if (deflator.err) {
    throw deflator.msg || messages[deflator.err];
  }
  return deflator.result;
}
function deflateRaw$1(input, options) {
  options = options || {};
  options.raw = true;
  return deflate$1(input, options);
}
function gzip$1(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate$1(input, options);
}
var Deflate_1$1 = Deflate$1;
var deflate_2 = deflate$1;
var deflateRaw_1$1 = deflateRaw$1;
var gzip_1$1 = gzip$1;
var deflate_1$1 = {
  Deflate: Deflate_1$1,
  deflate: deflate_2,
  deflateRaw: deflateRaw_1$1,
  gzip: gzip_1$1
};
const BAD$1 = 16209;
const TYPE$1 = 16191;
var inffast = function inflate_fast(strm, start) {
  let _in;
  let last;
  let _out;
  let beg;
  let end;
  let dmax;
  let wsize;
  let whave;
  let wnext;
  let s_window;
  let hold;
  let bits;
  let lcode;
  let dcode;
  let lmask;
  let dmask;
  let here;
  let op;
  let len;
  let dist;
  let from;
  let from_source;
  let input, output;
  const state = strm.state;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
  dmax = state.dmax;
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;
  top:
    do {
      if (bits < 15) {
        hold += input[_in++] << bits;
        bits += 8;
        hold += input[_in++] << bits;
        bits += 8;
      }
      here = lcode[hold & lmask];
      dolen:
        for (; ; ) {
          op = here >>> 24;
          hold >>>= op;
          bits -= op;
          op = here >>> 16 & 255;
          if (op === 0) {
            output[_out++] = here & 65535;
          } else if (op & 16) {
            len = here & 65535;
            op &= 15;
            if (op) {
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
              len += hold & (1 << op) - 1;
              hold >>>= op;
              bits -= op;
            }
            if (bits < 15) {
              hold += input[_in++] << bits;
              bits += 8;
              hold += input[_in++] << bits;
              bits += 8;
            }
            here = dcode[hold & dmask];
            dodist:
              for (; ; ) {
                op = here >>> 24;
                hold >>>= op;
                bits -= op;
                op = here >>> 16 & 255;
                if (op & 16) {
                  dist = here & 65535;
                  op &= 15;
                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;
                    if (bits < op) {
                      hold += input[_in++] << bits;
                      bits += 8;
                    }
                  }
                  dist += hold & (1 << op) - 1;
                  if (dist > dmax) {
                    strm.msg = "invalid distance too far back";
                    state.mode = BAD$1;
                    break top;
                  }
                  hold >>>= op;
                  bits -= op;
                  op = _out - beg;
                  if (dist > op) {
                    op = dist - op;
                    if (op > whave) {
                      if (state.sane) {
                        strm.msg = "invalid distance too far back";
                        state.mode = BAD$1;
                        break top;
                      }
                    }
                    from = 0;
                    from_source = s_window;
                    if (wnext === 0) {
                      from += wsize - op;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = _out - dist;
                        from_source = output;
                      }
                    } else if (wnext < op) {
                      from += wsize + wnext - op;
                      op -= wnext;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = 0;
                        if (wnext < len) {
                          op = wnext;
                          len -= op;
                          do {
                            output[_out++] = s_window[from++];
                          } while (--op);
                          from = _out - dist;
                          from_source = output;
                        }
                      }
                    } else {
                      from += wnext - op;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = _out - dist;
                        from_source = output;
                      }
                    }
                    while (len > 2) {
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      len -= 3;
                    }
                    if (len) {
                      output[_out++] = from_source[from++];
                      if (len > 1) {
                        output[_out++] = from_source[from++];
                      }
                    }
                  } else {
                    from = _out - dist;
                    do {
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      len -= 3;
                    } while (len > 2);
                    if (len) {
                      output[_out++] = output[from++];
                      if (len > 1) {
                        output[_out++] = output[from++];
                      }
                    }
                  }
                } else if ((op & 64) === 0) {
                  here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                  continue dodist;
                } else {
                  strm.msg = "invalid distance code";
                  state.mode = BAD$1;
                  break top;
                }
                break;
              }
          } else if ((op & 64) === 0) {
            here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
            continue dolen;
          } else if (op & 32) {
            state.mode = TYPE$1;
            break top;
          } else {
            strm.msg = "invalid literal/length code";
            state.mode = BAD$1;
            break top;
          }
          break;
        }
    } while (_in < last && _out < end);
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
  strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
  state.hold = hold;
  state.bits = bits;
  return;
};
const MAXBITS = 15;
const ENOUGH_LENS$1 = 852;
const ENOUGH_DISTS$1 = 592;
const CODES$1 = 0;
const LENS$1 = 1;
const DISTS$1 = 2;
const lbase = new Uint16Array([
  /* Length codes 257..285 base */
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  15,
  17,
  19,
  23,
  27,
  31,
  35,
  43,
  51,
  59,
  67,
  83,
  99,
  115,
  131,
  163,
  195,
  227,
  258,
  0,
  0
]);
const lext = new Uint8Array([
  /* Length codes 257..285 extra */
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  17,
  17,
  17,
  17,
  18,
  18,
  18,
  18,
  19,
  19,
  19,
  19,
  20,
  20,
  20,
  20,
  21,
  21,
  21,
  21,
  16,
  72,
  78
]);
const dbase = new Uint16Array([
  /* Distance codes 0..29 base */
  1,
  2,
  3,
  4,
  5,
  7,
  9,
  13,
  17,
  25,
  33,
  49,
  65,
  97,
  129,
  193,
  257,
  385,
  513,
  769,
  1025,
  1537,
  2049,
  3073,
  4097,
  6145,
  8193,
  12289,
  16385,
  24577,
  0,
  0
]);
const dext = new Uint8Array([
  /* Distance codes 0..29 extra */
  16,
  16,
  16,
  16,
  17,
  17,
  18,
  18,
  19,
  19,
  20,
  20,
  21,
  21,
  22,
  22,
  23,
  23,
  24,
  24,
  25,
  25,
  26,
  26,
  27,
  27,
  28,
  28,
  29,
  29,
  64,
  64
]);
const inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) => {
  const bits = opts.bits;
  let len = 0;
  let sym = 0;
  let min = 0, max = 0;
  let root = 0;
  let curr = 0;
  let drop = 0;
  let left = 0;
  let used = 0;
  let huff = 0;
  let incr;
  let fill;
  let low;
  let mask;
  let next;
  let base2 = null;
  let match;
  const count = new Uint16Array(MAXBITS + 1);
  const offs = new Uint16Array(MAXBITS + 1);
  let extra = null;
  let here_bits, here_op, here_val;
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) {
      break;
    }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {
    table[table_index++] = 1 << 24 | 64 << 16 | 0;
    table[table_index++] = 1 << 24 | 64 << 16 | 0;
    opts.bits = 1;
    return 0;
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) {
      break;
    }
  }
  if (root < min) {
    root = min;
  }
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }
  }
  if (left > 0 && (type === CODES$1 || max !== 1)) {
    return -1;
  }
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }
  if (type === CODES$1) {
    base2 = extra = work;
    match = 20;
  } else if (type === LENS$1) {
    base2 = lbase;
    extra = lext;
    match = 257;
  } else {
    base2 = dbase;
    extra = dext;
    match = 0;
  }
  huff = 0;
  sym = 0;
  len = min;
  next = table_index;
  curr = root;
  drop = 0;
  low = -1;
  used = 1 << root;
  mask = used - 1;
  if (type === LENS$1 && used > ENOUGH_LENS$1 || type === DISTS$1 && used > ENOUGH_DISTS$1) {
    return 1;
  }
  for (; ; ) {
    here_bits = len - drop;
    if (work[sym] + 1 < match) {
      here_op = 0;
      here_val = work[sym];
    } else if (work[sym] >= match) {
      here_op = extra[work[sym] - match];
      here_val = base2[work[sym] - match];
    } else {
      here_op = 32 + 64;
      here_val = 0;
    }
    incr = 1 << len - drop;
    fill = 1 << curr;
    min = fill;
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
    } while (fill !== 0);
    incr = 1 << len - 1;
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }
    sym++;
    if (--count[len] === 0) {
      if (len === max) {
        break;
      }
      len = lens[lens_index + work[sym]];
    }
    if (len > root && (huff & mask) !== low) {
      if (drop === 0) {
        drop = root;
      }
      next += min;
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) {
          break;
        }
        curr++;
        left <<= 1;
      }
      used += 1 << curr;
      if (type === LENS$1 && used > ENOUGH_LENS$1 || type === DISTS$1 && used > ENOUGH_DISTS$1) {
        return 1;
      }
      low = huff & mask;
      table[low] = root << 24 | curr << 16 | next - table_index | 0;
    }
  }
  if (huff !== 0) {
    table[next + huff] = len - drop << 24 | 64 << 16 | 0;
  }
  opts.bits = root;
  return 0;
};
var inftrees = inflate_table;
const CODES = 0;
const LENS = 1;
const DISTS = 2;
const {
  Z_FINISH: Z_FINISH$1,
  Z_BLOCK,
  Z_TREES,
  Z_OK: Z_OK$1,
  Z_STREAM_END: Z_STREAM_END$1,
  Z_NEED_DICT: Z_NEED_DICT$1,
  Z_STREAM_ERROR: Z_STREAM_ERROR$1,
  Z_DATA_ERROR: Z_DATA_ERROR$1,
  Z_MEM_ERROR: Z_MEM_ERROR$1,
  Z_BUF_ERROR,
  Z_DEFLATED
} = constants$2;
const HEAD = 16180;
const FLAGS = 16181;
const TIME = 16182;
const OS = 16183;
const EXLEN = 16184;
const EXTRA = 16185;
const NAME = 16186;
const COMMENT = 16187;
const HCRC = 16188;
const DICTID = 16189;
const DICT = 16190;
const TYPE = 16191;
const TYPEDO = 16192;
const STORED = 16193;
const COPY_ = 16194;
const COPY = 16195;
const TABLE = 16196;
const LENLENS = 16197;
const CODELENS = 16198;
const LEN_ = 16199;
const LEN = 16200;
const LENEXT = 16201;
const DIST = 16202;
const DISTEXT = 16203;
const MATCH = 16204;
const LIT = 16205;
const CHECK = 16206;
const LENGTH = 16207;
const DONE = 16208;
const BAD = 16209;
const MEM = 16210;
const SYNC = 16211;
const ENOUGH_LENS = 852;
const ENOUGH_DISTS = 592;
const MAX_WBITS = 15;
const DEF_WBITS = MAX_WBITS;
const zswap32 = (q2) => {
  return (q2 >>> 24 & 255) + (q2 >>> 8 & 65280) + ((q2 & 65280) << 8) + ((q2 & 255) << 24);
};
function InflateState() {
  this.strm = null;
  this.mode = 0;
  this.last = false;
  this.wrap = 0;
  this.havedict = false;
  this.flags = 0;
  this.dmax = 0;
  this.check = 0;
  this.total = 0;
  this.head = null;
  this.wbits = 0;
  this.wsize = 0;
  this.whave = 0;
  this.wnext = 0;
  this.window = null;
  this.hold = 0;
  this.bits = 0;
  this.length = 0;
  this.offset = 0;
  this.extra = 0;
  this.lencode = null;
  this.distcode = null;
  this.lenbits = 0;
  this.distbits = 0;
  this.ncode = 0;
  this.nlen = 0;
  this.ndist = 0;
  this.have = 0;
  this.next = null;
  this.lens = new Uint16Array(320);
  this.work = new Uint16Array(288);
  this.lendyn = null;
  this.distdyn = null;
  this.sane = 0;
  this.back = 0;
  this.was = 0;
}
const inflateStateCheck = (strm) => {
  if (!strm) {
    return 1;
  }
  const state = strm.state;
  if (!state || state.strm !== strm || state.mode < HEAD || state.mode > SYNC) {
    return 1;
  }
  return 0;
};
const inflateResetKeep = (strm) => {
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  const state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = "";
  if (state.wrap) {
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.flags = -1;
  state.dmax = 32768;
  state.head = null;
  state.hold = 0;
  state.bits = 0;
  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);
  state.sane = 1;
  state.back = -1;
  return Z_OK$1;
};
const inflateReset = (strm) => {
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  const state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);
};
const inflateReset2 = (strm, windowBits) => {
  let wrap;
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  const state = strm.state;
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  } else {
    wrap = (windowBits >> 4) + 5;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR$1;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
};
const inflateInit2 = (strm, windowBits) => {
  if (!strm) {
    return Z_STREAM_ERROR$1;
  }
  const state = new InflateState();
  strm.state = state;
  state.strm = strm;
  state.window = null;
  state.mode = HEAD;
  const ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK$1) {
    strm.state = null;
  }
  return ret;
};
const inflateInit = (strm) => {
  return inflateInit2(strm, DEF_WBITS);
};
let virgin = true;
let lenfix, distfix;
const fixedtables = (state) => {
  if (virgin) {
    lenfix = new Int32Array(512);
    distfix = new Int32Array(32);
    let sym = 0;
    while (sym < 144) {
      state.lens[sym++] = 8;
    }
    while (sym < 256) {
      state.lens[sym++] = 9;
    }
    while (sym < 280) {
      state.lens[sym++] = 7;
    }
    while (sym < 288) {
      state.lens[sym++] = 8;
    }
    inftrees(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });
    sym = 0;
    while (sym < 32) {
      state.lens[sym++] = 5;
    }
    inftrees(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });
    virgin = false;
  }
  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
};
const updatewindow = (strm, src, end, copy) => {
  let dist;
  const state = strm.state;
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;
    state.window = new Uint8Array(state.wsize);
  }
  if (copy >= state.wsize) {
    state.window.set(src.subarray(end - state.wsize, end), 0);
    state.wnext = 0;
    state.whave = state.wsize;
  } else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
    copy -= dist;
    if (copy) {
      state.window.set(src.subarray(end - copy, end), 0);
      state.wnext = copy;
      state.whave = state.wsize;
    } else {
      state.wnext += dist;
      if (state.wnext === state.wsize) {
        state.wnext = 0;
      }
      if (state.whave < state.wsize) {
        state.whave += dist;
      }
    }
  }
  return 0;
};
const inflate$2 = (strm, flush2) => {
  let state;
  let input, output;
  let next;
  let put;
  let have, left;
  let hold;
  let bits;
  let _in, _out;
  let copy;
  let from;
  let from_source;
  let here = 0;
  let here_bits, here_op, here_val;
  let last_bits, last_op, last_val;
  let len;
  let ret;
  const hbuf = new Uint8Array(4);
  let opts;
  let n2;
  const order = (
    /* permutation of code lengths */
    new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15])
  );
  if (inflateStateCheck(strm) || !strm.output || !strm.input && strm.avail_in !== 0) {
    return Z_STREAM_ERROR$1;
  }
  state = strm.state;
  if (state.mode === TYPE) {
    state.mode = TYPEDO;
  }
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  _in = have;
  _out = left;
  ret = Z_OK$1;
  inf_leave:
    for (; ; ) {
      switch (state.mode) {
        case HEAD:
          if (state.wrap === 0) {
            state.mode = TYPEDO;
            break;
          }
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.wrap & 2 && hold === 35615) {
            if (state.wbits === 0) {
              state.wbits = 15;
            }
            state.check = 0;
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state.check = crc32_1(state.check, hbuf, 2, 0);
            hold = 0;
            bits = 0;
            state.mode = FLAGS;
            break;
          }
          if (state.head) {
            state.head.done = false;
          }
          if (!(state.wrap & 1) || /* check if zlib header allowed */
          (((hold & 255) << 8) + (hold >> 8)) % 31) {
            strm.msg = "incorrect header check";
            state.mode = BAD;
            break;
          }
          if ((hold & 15) !== Z_DEFLATED) {
            strm.msg = "unknown compression method";
            state.mode = BAD;
            break;
          }
          hold >>>= 4;
          bits -= 4;
          len = (hold & 15) + 8;
          if (state.wbits === 0) {
            state.wbits = len;
          }
          if (len > 15 || len > state.wbits) {
            strm.msg = "invalid window size";
            state.mode = BAD;
            break;
          }
          state.dmax = 1 << state.wbits;
          state.flags = 0;
          strm.adler = state.check = 1;
          state.mode = hold & 512 ? DICTID : TYPE;
          hold = 0;
          bits = 0;
          break;
        case FLAGS:
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.flags = hold;
          if ((state.flags & 255) !== Z_DEFLATED) {
            strm.msg = "unknown compression method";
            state.mode = BAD;
            break;
          }
          if (state.flags & 57344) {
            strm.msg = "unknown header flags set";
            state.mode = BAD;
            break;
          }
          if (state.head) {
            state.head.text = hold >> 8 & 1;
          }
          if (state.flags & 512 && state.wrap & 4) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state.check = crc32_1(state.check, hbuf, 2, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = TIME;
        /* falls through */
        case TIME:
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.head) {
            state.head.time = hold;
          }
          if (state.flags & 512 && state.wrap & 4) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            hbuf[2] = hold >>> 16 & 255;
            hbuf[3] = hold >>> 24 & 255;
            state.check = crc32_1(state.check, hbuf, 4, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = OS;
        /* falls through */
        case OS:
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.head) {
            state.head.xflags = hold & 255;
            state.head.os = hold >> 8;
          }
          if (state.flags & 512 && state.wrap & 4) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state.check = crc32_1(state.check, hbuf, 2, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = EXLEN;
        /* falls through */
        case EXLEN:
          if (state.flags & 1024) {
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.length = hold;
            if (state.head) {
              state.head.extra_len = hold;
            }
            if (state.flags & 512 && state.wrap & 4) {
              hbuf[0] = hold & 255;
              hbuf[1] = hold >>> 8 & 255;
              state.check = crc32_1(state.check, hbuf, 2, 0);
            }
            hold = 0;
            bits = 0;
          } else if (state.head) {
            state.head.extra = null;
          }
          state.mode = EXTRA;
        /* falls through */
        case EXTRA:
          if (state.flags & 1024) {
            copy = state.length;
            if (copy > have) {
              copy = have;
            }
            if (copy) {
              if (state.head) {
                len = state.head.extra_len - state.length;
                if (!state.head.extra) {
                  state.head.extra = new Uint8Array(state.head.extra_len);
                }
                state.head.extra.set(
                  input.subarray(
                    next,
                    // extra field is limited to 65536 bytes
                    // - no need for additional size check
                    next + copy
                  ),
                  /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                  len
                );
              }
              if (state.flags & 512 && state.wrap & 4) {
                state.check = crc32_1(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              state.length -= copy;
            }
            if (state.length) {
              break inf_leave;
            }
          }
          state.length = 0;
          state.mode = NAME;
        /* falls through */
        case NAME:
          if (state.flags & 2048) {
            if (have === 0) {
              break inf_leave;
            }
            copy = 0;
            do {
              len = input[next + copy++];
              if (state.head && len && state.length < 65536) {
                state.head.name += String.fromCharCode(len);
              }
            } while (len && copy < have);
            if (state.flags & 512 && state.wrap & 4) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) {
              break inf_leave;
            }
          } else if (state.head) {
            state.head.name = null;
          }
          state.length = 0;
          state.mode = COMMENT;
        /* falls through */
        case COMMENT:
          if (state.flags & 4096) {
            if (have === 0) {
              break inf_leave;
            }
            copy = 0;
            do {
              len = input[next + copy++];
              if (state.head && len && state.length < 65536) {
                state.head.comment += String.fromCharCode(len);
              }
            } while (len && copy < have);
            if (state.flags & 512 && state.wrap & 4) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) {
              break inf_leave;
            }
          } else if (state.head) {
            state.head.comment = null;
          }
          state.mode = HCRC;
        /* falls through */
        case HCRC:
          if (state.flags & 512) {
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (state.wrap & 4 && hold !== (state.check & 65535)) {
              strm.msg = "header crc mismatch";
              state.mode = BAD;
              break;
            }
            hold = 0;
            bits = 0;
          }
          if (state.head) {
            state.head.hcrc = state.flags >> 9 & 1;
            state.head.done = true;
          }
          strm.adler = state.check = 0;
          state.mode = TYPE;
          break;
        case DICTID:
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          strm.adler = state.check = zswap32(hold);
          hold = 0;
          bits = 0;
          state.mode = DICT;
        /* falls through */
        case DICT:
          if (state.havedict === 0) {
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            return Z_NEED_DICT$1;
          }
          strm.adler = state.check = 1;
          state.mode = TYPE;
        /* falls through */
        case TYPE:
          if (flush2 === Z_BLOCK || flush2 === Z_TREES) {
            break inf_leave;
          }
        /* falls through */
        case TYPEDO:
          if (state.last) {
            hold >>>= bits & 7;
            bits -= bits & 7;
            state.mode = CHECK;
            break;
          }
          while (bits < 3) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.last = hold & 1;
          hold >>>= 1;
          bits -= 1;
          switch (hold & 3) {
            case 0:
              state.mode = STORED;
              break;
            case 1:
              fixedtables(state);
              state.mode = LEN_;
              if (flush2 === Z_TREES) {
                hold >>>= 2;
                bits -= 2;
                break inf_leave;
              }
              break;
            case 2:
              state.mode = TABLE;
              break;
            case 3:
              strm.msg = "invalid block type";
              state.mode = BAD;
          }
          hold >>>= 2;
          bits -= 2;
          break;
        case STORED:
          hold >>>= bits & 7;
          bits -= bits & 7;
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
            strm.msg = "invalid stored block lengths";
            state.mode = BAD;
            break;
          }
          state.length = hold & 65535;
          hold = 0;
          bits = 0;
          state.mode = COPY_;
          if (flush2 === Z_TREES) {
            break inf_leave;
          }
        /* falls through */
        case COPY_:
          state.mode = COPY;
        /* falls through */
        case COPY:
          copy = state.length;
          if (copy) {
            if (copy > have) {
              copy = have;
            }
            if (copy > left) {
              copy = left;
            }
            if (copy === 0) {
              break inf_leave;
            }
            output.set(input.subarray(next, next + copy), put);
            have -= copy;
            next += copy;
            left -= copy;
            put += copy;
            state.length -= copy;
            break;
          }
          state.mode = TYPE;
          break;
        case TABLE:
          while (bits < 14) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.nlen = (hold & 31) + 257;
          hold >>>= 5;
          bits -= 5;
          state.ndist = (hold & 31) + 1;
          hold >>>= 5;
          bits -= 5;
          state.ncode = (hold & 15) + 4;
          hold >>>= 4;
          bits -= 4;
          if (state.nlen > 286 || state.ndist > 30) {
            strm.msg = "too many length or distance symbols";
            state.mode = BAD;
            break;
          }
          state.have = 0;
          state.mode = LENLENS;
        /* falls through */
        case LENLENS:
          while (state.have < state.ncode) {
            while (bits < 3) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.lens[order[state.have++]] = hold & 7;
            hold >>>= 3;
            bits -= 3;
          }
          while (state.have < 19) {
            state.lens[order[state.have++]] = 0;
          }
          state.lencode = state.lendyn;
          state.lenbits = 7;
          opts = { bits: state.lenbits };
          ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;
          if (ret) {
            strm.msg = "invalid code lengths set";
            state.mode = BAD;
            break;
          }
          state.have = 0;
          state.mode = CODELENS;
        /* falls through */
        case CODELENS:
          while (state.have < state.nlen + state.ndist) {
            for (; ; ) {
              here = state.lencode[hold & (1 << state.lenbits) - 1];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (here_val < 16) {
              hold >>>= here_bits;
              bits -= here_bits;
              state.lens[state.have++] = here_val;
            } else {
              if (here_val === 16) {
                n2 = here_bits + 2;
                while (bits < n2) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                if (state.have === 0) {
                  strm.msg = "invalid bit length repeat";
                  state.mode = BAD;
                  break;
                }
                len = state.lens[state.have - 1];
                copy = 3 + (hold & 3);
                hold >>>= 2;
                bits -= 2;
              } else if (here_val === 17) {
                n2 = here_bits + 3;
                while (bits < n2) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                len = 0;
                copy = 3 + (hold & 7);
                hold >>>= 3;
                bits -= 3;
              } else {
                n2 = here_bits + 7;
                while (bits < n2) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                len = 0;
                copy = 11 + (hold & 127);
                hold >>>= 7;
                bits -= 7;
              }
              if (state.have + copy > state.nlen + state.ndist) {
                strm.msg = "invalid bit length repeat";
                state.mode = BAD;
                break;
              }
              while (copy--) {
                state.lens[state.have++] = len;
              }
            }
          }
          if (state.mode === BAD) {
            break;
          }
          if (state.lens[256] === 0) {
            strm.msg = "invalid code -- missing end-of-block";
            state.mode = BAD;
            break;
          }
          state.lenbits = 9;
          opts = { bits: state.lenbits };
          ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;
          if (ret) {
            strm.msg = "invalid literal/lengths set";
            state.mode = BAD;
            break;
          }
          state.distbits = 6;
          state.distcode = state.distdyn;
          opts = { bits: state.distbits };
          ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
          state.distbits = opts.bits;
          if (ret) {
            strm.msg = "invalid distances set";
            state.mode = BAD;
            break;
          }
          state.mode = LEN_;
          if (flush2 === Z_TREES) {
            break inf_leave;
          }
        /* falls through */
        case LEN_:
          state.mode = LEN;
        /* falls through */
        case LEN:
          if (have >= 6 && left >= 258) {
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            inffast(strm, _out);
            put = strm.next_out;
            output = strm.output;
            left = strm.avail_out;
            next = strm.next_in;
            input = strm.input;
            have = strm.avail_in;
            hold = state.hold;
            bits = state.bits;
            if (state.mode === TYPE) {
              state.back = -1;
            }
            break;
          }
          state.back = 0;
          for (; ; ) {
            here = state.lencode[hold & (1 << state.lenbits) - 1];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 255;
            here_val = here & 65535;
            if (here_bits <= bits) {
              break;
            }
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (here_op && (here_op & 240) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (; ; ) {
              here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (last_bits + here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            hold >>>= last_bits;
            bits -= last_bits;
            state.back += last_bits;
          }
          hold >>>= here_bits;
          bits -= here_bits;
          state.back += here_bits;
          state.length = here_val;
          if (here_op === 0) {
            state.mode = LIT;
            break;
          }
          if (here_op & 32) {
            state.back = -1;
            state.mode = TYPE;
            break;
          }
          if (here_op & 64) {
            strm.msg = "invalid literal/length code";
            state.mode = BAD;
            break;
          }
          state.extra = here_op & 15;
          state.mode = LENEXT;
        /* falls through */
        case LENEXT:
          if (state.extra) {
            n2 = state.extra;
            while (bits < n2) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.length += hold & (1 << state.extra) - 1;
            hold >>>= state.extra;
            bits -= state.extra;
            state.back += state.extra;
          }
          state.was = state.length;
          state.mode = DIST;
        /* falls through */
        case DIST:
          for (; ; ) {
            here = state.distcode[hold & (1 << state.distbits) - 1];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 255;
            here_val = here & 65535;
            if (here_bits <= bits) {
              break;
            }
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if ((here_op & 240) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (; ; ) {
              here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (last_bits + here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            hold >>>= last_bits;
            bits -= last_bits;
            state.back += last_bits;
          }
          hold >>>= here_bits;
          bits -= here_bits;
          state.back += here_bits;
          if (here_op & 64) {
            strm.msg = "invalid distance code";
            state.mode = BAD;
            break;
          }
          state.offset = here_val;
          state.extra = here_op & 15;
          state.mode = DISTEXT;
        /* falls through */
        case DISTEXT:
          if (state.extra) {
            n2 = state.extra;
            while (bits < n2) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.offset += hold & (1 << state.extra) - 1;
            hold >>>= state.extra;
            bits -= state.extra;
            state.back += state.extra;
          }
          if (state.offset > state.dmax) {
            strm.msg = "invalid distance too far back";
            state.mode = BAD;
            break;
          }
          state.mode = MATCH;
        /* falls through */
        case MATCH:
          if (left === 0) {
            break inf_leave;
          }
          copy = _out - left;
          if (state.offset > copy) {
            copy = state.offset - copy;
            if (copy > state.whave) {
              if (state.sane) {
                strm.msg = "invalid distance too far back";
                state.mode = BAD;
                break;
              }
            }
            if (copy > state.wnext) {
              copy -= state.wnext;
              from = state.wsize - copy;
            } else {
              from = state.wnext - copy;
            }
            if (copy > state.length) {
              copy = state.length;
            }
            from_source = state.window;
          } else {
            from_source = output;
            from = put - state.offset;
            copy = state.length;
          }
          if (copy > left) {
            copy = left;
          }
          left -= copy;
          state.length -= copy;
          do {
            output[put++] = from_source[from++];
          } while (--copy);
          if (state.length === 0) {
            state.mode = LEN;
          }
          break;
        case LIT:
          if (left === 0) {
            break inf_leave;
          }
          output[put++] = state.length;
          left--;
          state.mode = LEN;
          break;
        case CHECK:
          if (state.wrap) {
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold |= input[next++] << bits;
              bits += 8;
            }
            _out -= left;
            strm.total_out += _out;
            state.total += _out;
            if (state.wrap & 4 && _out) {
              strm.adler = state.check = /*UPDATE_CHECK(state.check, put - _out, _out);*/
              state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out);
            }
            _out = left;
            if (state.wrap & 4 && (state.flags ? hold : zswap32(hold)) !== state.check) {
              strm.msg = "incorrect data check";
              state.mode = BAD;
              break;
            }
            hold = 0;
            bits = 0;
          }
          state.mode = LENGTH;
        /* falls through */
        case LENGTH:
          if (state.wrap && state.flags) {
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (state.wrap & 4 && hold !== (state.total & 4294967295)) {
              strm.msg = "incorrect length check";
              state.mode = BAD;
              break;
            }
            hold = 0;
            bits = 0;
          }
          state.mode = DONE;
        /* falls through */
        case DONE:
          ret = Z_STREAM_END$1;
          break inf_leave;
        case BAD:
          ret = Z_DATA_ERROR$1;
          break inf_leave;
        case MEM:
          return Z_MEM_ERROR$1;
        case SYNC:
        /* falls through */
        default:
          return Z_STREAM_ERROR$1;
      }
    }
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush2 !== Z_FINISH$1)) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap & 4 && _out) {
    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/
    state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out);
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if ((_in === 0 && _out === 0 || flush2 === Z_FINISH$1) && ret === Z_OK$1) {
    ret = Z_BUF_ERROR;
  }
  return ret;
};
const inflateEnd = (strm) => {
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  let state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK$1;
};
const inflateGetHeader = (strm, head) => {
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  const state = strm.state;
  if ((state.wrap & 2) === 0) {
    return Z_STREAM_ERROR$1;
  }
  state.head = head;
  head.done = false;
  return Z_OK$1;
};
const inflateSetDictionary = (strm, dictionary) => {
  const dictLength = dictionary.length;
  let state;
  let dictid;
  let ret;
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  state = strm.state;
  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR$1;
  }
  if (state.mode === DICT) {
    dictid = 1;
    dictid = adler32_1(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR$1;
    }
  }
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR$1;
  }
  state.havedict = 1;
  return Z_OK$1;
};
var inflateReset_1 = inflateReset;
var inflateReset2_1 = inflateReset2;
var inflateResetKeep_1 = inflateResetKeep;
var inflateInit_1 = inflateInit;
var inflateInit2_1 = inflateInit2;
var inflate_2$1 = inflate$2;
var inflateEnd_1 = inflateEnd;
var inflateGetHeader_1 = inflateGetHeader;
var inflateSetDictionary_1 = inflateSetDictionary;
var inflateInfo = "pako inflate (from Nodeca project)";
var inflate_1$2 = {
  inflateReset: inflateReset_1,
  inflateReset2: inflateReset2_1,
  inflateResetKeep: inflateResetKeep_1,
  inflateInit: inflateInit_1,
  inflateInit2: inflateInit2_1,
  inflate: inflate_2$1,
  inflateEnd: inflateEnd_1,
  inflateGetHeader: inflateGetHeader_1,
  inflateSetDictionary: inflateSetDictionary_1,
  inflateInfo
};
function GZheader() {
  this.text = 0;
  this.time = 0;
  this.xflags = 0;
  this.os = 0;
  this.extra = null;
  this.extra_len = 0;
  this.name = "";
  this.comment = "";
  this.hcrc = 0;
  this.done = false;
}
var gzheader = GZheader;
const toString = Object.prototype.toString;
const {
  Z_NO_FLUSH,
  Z_FINISH,
  Z_OK,
  Z_STREAM_END,
  Z_NEED_DICT,
  Z_STREAM_ERROR,
  Z_DATA_ERROR,
  Z_MEM_ERROR
} = constants$2;
function Inflate$1(options) {
  this.options = common.assign({
    chunkSize: 1024 * 64,
    windowBits: 15,
    to: ""
  }, options || {});
  const opt = this.options;
  if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) {
      opt.windowBits = -15;
    }
  }
  if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {
    opt.windowBits += 32;
  }
  if (opt.windowBits > 15 && opt.windowBits < 48) {
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }
  this.err = 0;
  this.msg = "";
  this.ended = false;
  this.chunks = [];
  this.strm = new zstream();
  this.strm.avail_out = 0;
  let status = inflate_1$2.inflateInit2(
    this.strm,
    opt.windowBits
  );
  if (status !== Z_OK) {
    throw new Error(messages[status]);
  }
  this.header = new gzheader();
  inflate_1$2.inflateGetHeader(this.strm, this.header);
  if (opt.dictionary) {
    if (typeof opt.dictionary === "string") {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === "[object ArrayBuffer]") {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) {
      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== Z_OK) {
        throw new Error(messages[status]);
      }
    }
  }
}
Inflate$1.prototype.push = function(data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  const dictionary = this.options.dictionary;
  let status, _flush_mode, last_avail_out;
  if (this.ended) return false;
  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;
  if (toString.call(data) === "[object ArrayBuffer]") {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }
  strm.next_in = 0;
  strm.avail_in = strm.input.length;
  for (; ; ) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = inflate_1$2.inflate(strm, _flush_mode);
    if (status === Z_NEED_DICT && dictionary) {
      status = inflate_1$2.inflateSetDictionary(strm, dictionary);
      if (status === Z_OK) {
        status = inflate_1$2.inflate(strm, _flush_mode);
      } else if (status === Z_DATA_ERROR) {
        status = Z_NEED_DICT;
      }
    }
    while (strm.avail_in > 0 && status === Z_STREAM_END && strm.state.wrap > 0 && data[strm.next_in] !== 0) {
      inflate_1$2.inflateReset(strm);
      status = inflate_1$2.inflate(strm, _flush_mode);
    }
    switch (status) {
      case Z_STREAM_ERROR:
      case Z_DATA_ERROR:
      case Z_NEED_DICT:
      case Z_MEM_ERROR:
        this.onEnd(status);
        this.ended = true;
        return false;
    }
    last_avail_out = strm.avail_out;
    if (strm.next_out) {
      if (strm.avail_out === 0 || status === Z_STREAM_END) {
        if (this.options.to === "string") {
          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
          let tail = strm.next_out - next_out_utf8;
          let utf8str = strings.buf2string(strm.output, next_out_utf8);
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);
          this.onData(utf8str);
        } else {
          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
        }
      }
    }
    if (status === Z_OK && last_avail_out === 0) continue;
    if (status === Z_STREAM_END) {
      status = inflate_1$2.inflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return true;
    }
    if (strm.avail_in === 0) break;
  }
  return true;
};
Inflate$1.prototype.onData = function(chunk) {
  this.chunks.push(chunk);
};
Inflate$1.prototype.onEnd = function(status) {
  if (status === Z_OK) {
    if (this.options.to === "string") {
      this.result = this.chunks.join("");
    } else {
      this.result = common.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};
function inflate$1(input, options) {
  const inflator = new Inflate$1(options);
  inflator.push(input);
  if (inflator.err) throw inflator.msg || messages[inflator.err];
  return inflator.result;
}
function inflateRaw$1(input, options) {
  options = options || {};
  options.raw = true;
  return inflate$1(input, options);
}
var Inflate_1$1 = Inflate$1;
var inflate_2 = inflate$1;
var inflateRaw_1$1 = inflateRaw$1;
var ungzip$1 = inflate$1;
var inflate_1$1 = {
  Inflate: Inflate_1$1,
  inflate: inflate_2,
  inflateRaw: inflateRaw_1$1,
  ungzip: ungzip$1
};
const { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;
const { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;
var Deflate_1 = Deflate;
var deflate_1 = deflate;
var deflateRaw_1 = deflateRaw;
var gzip_1 = gzip;
var Inflate_1 = Inflate;
var inflate_1 = inflate;
var inflateRaw_1 = inflateRaw;
var ungzip_1 = ungzip;
var constants_1 = constants$2;
var pako = {
  Deflate: Deflate_1,
  deflate: deflate_1,
  deflateRaw: deflateRaw_1,
  gzip: gzip_1,
  Inflate: Inflate_1,
  inflate: inflate_1,
  inflateRaw: inflateRaw_1,
  ungzip: ungzip_1,
  constants: constants_1
};
/**
 * @wharfkit/antelope v1.1.1
 * https://github.com/wharfkit/antelope
 *
 * @license
 * Copyright (c) 2023 FFF00 Agents AB & Greymass Inc. All Rights Reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1.  Redistribution of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 
 * 2.  Redistribution in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 * 
 * 3.  Neither the name of the copyright holder nor the names of its contributors
 *     may be used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * YOU ACKNOWLEDGE THAT THIS SOFTWARE IS NOT DESIGNED, LICENSED OR INTENDED FOR USE
 * IN THE DESIGN, CONSTRUCTION, OPERATION OR MAINTENANCE OF ANY MILITARY FACILITY.
 */
function arrayEquals(a, b) {
  const len = a.length;
  if (len !== b.length) {
    return false;
  }
  for (let i2 = 0; i2 < len; i2++) {
    if (a[i2] !== b[i2]) {
      return false;
    }
  }
  return true;
}
function arrayEquatableEquals(a, b) {
  const len = a.length;
  if (len !== b.length) {
    return false;
  }
  for (let i2 = 0; i2 < len; i2++) {
    if (!a[i2].equals(b[i2])) {
      return false;
    }
  }
  return true;
}
const hexLookup = {};
function buildHexLookup() {
  hexLookup.enc = new Array(255);
  hexLookup.dec = {};
  for (let i2 = 0; i2 <= 255; ++i2) {
    const b = i2.toString(16).padStart(2, "0");
    hexLookup.enc[i2] = b;
    hexLookup.dec[b] = i2;
  }
}
function arrayToHex(array) {
  if (!hexLookup.enc) {
    buildHexLookup();
  }
  const len = array.length;
  const rv = new Array(len);
  for (let i2 = 0; i2 < len; ++i2) {
    rv[i2] = hexLookup.enc[array[i2]];
  }
  return rv.join("");
}
function hexToArray(hex) {
  if (!hexLookup.dec) {
    buildHexLookup();
  }
  if (typeof hex !== "string") {
    throw new Error("Expected string containing hex digits");
  }
  if (hex.length % 2) {
    throw new Error("Odd number of hex digits");
  }
  hex = hex.toLowerCase();
  const len = hex.length / 2;
  const result = new Uint8Array(len);
  for (let i2 = 0; i2 < len; i2++) {
    const b = hexLookup.dec[hex[i2 * 2] + hex[i2 * 2 + 1]];
    if (b === void 0) {
      throw new Error("Expected hex string");
    }
    result[i2] = b;
  }
  return result;
}
function secureRandom(length) {
  return rand(length);
}
let didWarn = false;
function isInstanceOf(object, someClass) {
  if (object instanceof someClass) {
    return true;
  }
  if (object == null || typeof object !== "object") {
    return false;
  }
  const className = someClass["__className"] || someClass["abiName"];
  if (!className) {
    return false;
  }
  let instanceClass = object.constructor;
  let isAlienInstance = false;
  while (instanceClass && !isAlienInstance) {
    const instanceClassName = instanceClass["__className"] || instanceClass["abiName"];
    if (!instanceClassName) {
      break;
    }
    isAlienInstance = className == instanceClassName;
    instanceClass = Object.getPrototypeOf(instanceClass);
  }
  if (isAlienInstance && !didWarn) {
    console.warn(`Detected alien instance of ${className}, this usually means more than one version of @wharfkit/antelope has been included in your bundle.`);
    didWarn = true;
  }
  return isAlienInstance;
}
class Blob {
  /**
   * Create a new Blob instance.
   */
  static from(value) {
    if (isInstanceOf(value, this)) {
      return value;
    }
    if (typeof value === "string") {
      return this.fromString(value);
    }
    throw new Error("Invalid blob");
  }
  static fromString(value) {
    if (typeof Buffer === "function") {
      return new this(new Uint8Array(Buffer.from(value, "base64")));
    }
    switch (value.length % 4) {
      case 2:
        value += "==";
        break;
      case 3:
        value += "=";
        break;
      case 1:
        value = value.substring(0, value.length - 1);
        break;
    }
    const string = atob(value);
    const array = new Uint8Array(string.length);
    for (let i2 = 0; i2 < string.length; i2++) {
      array[i2] = string.charCodeAt(i2);
    }
    return new this(array);
  }
  constructor(array) {
    this.array = array;
  }
  equals(other) {
    const self2 = this.constructor;
    try {
      return arrayEquals(this.array, self2.from(other).array);
    } catch {
      return false;
    }
  }
  get base64String() {
    if (typeof Buffer === "function") {
      return Buffer.from(this.array).toString("base64");
    }
    return btoa(this.utf8String);
  }
  /** UTF-8 string representation of this instance. */
  get utf8String() {
    return new TextDecoder().decode(this.array);
  }
  toABI(encoder) {
    encoder.writeArray(this.array);
  }
  toString() {
    return this.base64String;
  }
  toJSON() {
    return this.toString();
  }
}
Blob.abiName = "blob";
class Bytes {
  /**
   * Create a new Bytes instance.
   * @note Make sure to take a [[copy]] before mutating the bytes as the underlying source is not copied here.
   */
  static from(value, encoding) {
    if (isInstanceOf(value, this)) {
      return value;
    }
    if (typeof value === "string") {
      return this.fromString(value, encoding);
    }
    if (ArrayBuffer.isView(value)) {
      return new this(new Uint8Array(value.buffer, value.byteOffset, value.byteLength));
    }
    if (isInstanceOf(value["array"], Uint8Array)) {
      return new this(value["array"]);
    }
    return new this(new Uint8Array(value));
  }
  static fromString(value, encoding = "hex") {
    if (encoding === "hex") {
      const array = hexToArray(value);
      return new this(array);
    } else if (encoding == "utf8") {
      const encoder = new TextEncoder();
      return new this(encoder.encode(value));
    } else {
      throw new Error(`Unknown encoding: ${encoding}`);
    }
  }
  static fromABI(decoder) {
    const len = decoder.readVaruint32();
    return new this(decoder.readArray(len));
  }
  static abiDefault() {
    return new Bytes();
  }
  static equal(a, b) {
    return this.from(a).equals(this.from(b));
  }
  static random(length) {
    return new this(secureRandom(length));
  }
  /** Return true if given value is a valid `BytesType`. */
  static isBytes(value) {
    if (isInstanceOf(value, Bytes) || isInstanceOf(value, Uint8Array)) {
      return true;
    }
    if (Array.isArray(value) && value.every((v2) => typeof v2 === "number")) {
      return true;
    }
    if (typeof value === "string" && (/[\da-f]/i.test(value) || value === "")) {
      return true;
    }
    return false;
  }
  constructor(array = new Uint8Array()) {
    this.array = array;
  }
  /** Number of bytes in this instance. */
  get length() {
    return this.array.byteLength;
  }
  /** Hex string representation of this instance. */
  get hexString() {
    return arrayToHex(this.array);
  }
  /** UTF-8 string representation of this instance. */
  get utf8String() {
    return new TextDecoder().decode(this.array);
  }
  /** Mutating. Append bytes to this instance. */
  append(other) {
    other = Bytes.from(other);
    const newSize = this.array.byteLength + other.array.byteLength;
    const buffer = new ArrayBuffer(newSize);
    const array = new Uint8Array(buffer);
    array.set(this.array);
    array.set(other.array, this.array.byteLength);
    this.array = array;
  }
  /** Non-mutating, returns a copy of this instance with appended bytes. */
  appending(other) {
    const rv = new Bytes(this.array);
    rv.append(other);
    return rv;
  }
  /** Mutating. Pad this instance to length. */
  zeropad(n2, truncate2 = false) {
    const newSize = truncate2 ? n2 : Math.max(n2, this.array.byteLength);
    const buffer = new ArrayBuffer(newSize);
    const array = new Uint8Array(buffer);
    array.fill(0);
    if (truncate2 && this.array.byteLength > newSize) {
      array.set(this.array.slice(0, newSize), 0);
    } else {
      array.set(this.array, newSize - this.array.byteLength);
    }
    this.array = array;
  }
  /** Non-mutating, returns a copy of this instance with zeros padded. */
  zeropadded(n2, truncate2 = false) {
    const rv = new Bytes(this.array);
    rv.zeropad(n2, truncate2);
    return rv;
  }
  /** Mutating. Drop bytes from the start of this instance. */
  dropFirst(n2 = 1) {
    this.array = this.array.subarray(n2);
  }
  /** Non-mutating, returns a copy of this instance with dropped bytes from the start. */
  droppingFirst(n2 = 1) {
    return new Bytes(this.array.subarray(n2));
  }
  copy() {
    const buffer = new ArrayBuffer(this.array.byteLength);
    const array = new Uint8Array(buffer);
    array.set(this.array);
    return new Bytes(array);
  }
  equals(other) {
    return arrayEquals(this.array, Bytes.from(other).array);
  }
  toString(encoding = "hex") {
    if (encoding === "hex") {
      return this.hexString;
    } else if (encoding === "utf8") {
      return this.utf8String;
    } else {
      throw new Error(`Unknown encoding: ${encoding}`);
    }
  }
  toABI(encoder) {
    encoder.writeVaruint32(this.array.byteLength);
    encoder.writeArray(this.array);
  }
  toJSON() {
    return this.hexString;
  }
}
Bytes.abiName = "bytes";
class Checksum {
  static from(value) {
    if (isInstanceOf(value, this)) {
      return value;
    }
    if (isInstanceOf(value, Checksum)) {
      return new this(value.array);
    }
    return new this(Bytes.from(value).array);
  }
  static fromABI(decoder) {
    return new this(decoder.readArray(this.byteSize));
  }
  static abiDefault() {
    return new this(new Uint8Array(this.byteSize));
  }
  constructor(array) {
    const byteSize = this.constructor.byteSize;
    if (array.byteLength !== byteSize) {
      throw new Error(`Checksum size mismatch, expected ${byteSize} bytes got ${array.byteLength}`);
    }
    this.array = array;
  }
  equals(other) {
    const self2 = this.constructor;
    try {
      return arrayEquals(this.array, self2.from(other).array);
    } catch {
      return false;
    }
  }
  get hexString() {
    return arrayToHex(this.array);
  }
  toABI(encoder) {
    encoder.writeArray(this.array);
  }
  toString() {
    return this.hexString;
  }
  toJSON() {
    return this.toString();
  }
}
Checksum.abiName = "__checksum";
class Checksum256 extends Checksum {
  static from(value) {
    return super.from(value);
  }
  static hash(data) {
    const digest = new Uint8Array(hashExports.sha256().update(Bytes.from(data).array).digest());
    return new Checksum256(digest);
  }
}
Checksum256.abiName = "checksum256";
Checksum256.byteSize = 32;
class Checksum512 extends Checksum {
  static from(value) {
    return super.from(value);
  }
  static hash(data) {
    const digest = new Uint8Array(hashExports.sha512().update(Bytes.from(data).array).digest());
    return new Checksum512(digest);
  }
}
Checksum512.abiName = "checksum512";
Checksum512.byteSize = 64;
class Checksum160 extends Checksum {
  static from(value) {
    return super.from(value);
  }
  static hash(data) {
    const digest = new Uint8Array(hashExports.ripemd160().update(Bytes.from(data).array).digest());
    return new Checksum160(digest);
  }
}
Checksum160.abiName = "checksum160";
Checksum160.byteSize = 20;
var KeyType;
(function(KeyType2) {
  KeyType2["K1"] = "K1";
  KeyType2["R1"] = "R1";
  KeyType2["WA"] = "WA";
})(KeyType || (KeyType = {}));
(function(KeyType2) {
  function indexFor(value) {
    switch (value) {
      case KeyType2.K1:
        return 0;
      case KeyType2.R1:
        return 1;
      case KeyType2.WA:
        return 2;
      default:
        throw new Error(`Unknown curve type: ${value}`);
    }
  }
  KeyType2.indexFor = indexFor;
  function from(value) {
    let index;
    if (typeof value !== "number") {
      index = KeyType2.indexFor(value);
    } else {
      index = value;
    }
    switch (index) {
      case 0:
        return KeyType2.K1;
      case 1:
        return KeyType2.R1;
      case 2:
        return KeyType2.WA;
      default:
        throw new Error("Unknown curve type");
    }
  }
  KeyType2.from = from;
})(KeyType || (KeyType = {}));
class Int {
  /** Largest value that can be represented by this integer type. */
  static get max() {
    return new BN(2).pow(new BN(this.byteWidth * 8 - (this.isSigned ? 1 : 0))).isubn(1);
  }
  /** Smallest value that can be represented by this integer type. */
  static get min() {
    return this.isSigned ? this.max.ineg().isubn(1) : new BN(0);
  }
  /** Return a zero value of this type */
  static get zero() {
    return this.from(0);
  }
  /** Add `lhs` to `rhs` and return the resulting value. */
  static add(lhs, rhs, overflow = "truncate") {
    return Int.operator(lhs, rhs, overflow, (a, b) => a.add(b));
  }
  /** Add `lhs` to `rhs` and return the resulting value. */
  static sub(lhs, rhs, overflow) {
    return Int.operator(lhs, rhs, overflow, (a, b) => a.sub(b));
  }
  /** Multiply `lhs` by `rhs` and return the resulting value. */
  static mul(lhs, rhs, overflow) {
    return Int.operator(lhs, rhs, overflow, (a, b) => a.mul(b));
  }
  /**
   * Divide `lhs` by `rhs` and return the quotient, dropping the remainder.
   * @throws When dividing by zero.
   */
  static div(lhs, rhs, overflow) {
    return Int.operator(lhs, rhs, overflow, (a, b) => {
      if (b.isZero()) {
        throw new Error("Division by zero");
      }
      return a.div(b);
    });
  }
  /**
   * Divide `lhs` by `rhs` and return the quotient + remainder rounded to the closest integer.
   * @throws When dividing by zero.
   */
  static divRound(lhs, rhs, overflow) {
    return Int.operator(lhs, rhs, overflow, (a, b) => {
      if (b.isZero()) {
        throw new Error("Division by zero");
      }
      return a.divRound(b);
    });
  }
  /**
   * Divide `lhs` by `rhs` and return the quotient + remainder rounded up to the closest integer.
   * @throws When dividing by zero.
   */
  static divCeil(lhs, rhs, overflow) {
    return Int.operator(lhs, rhs, overflow, (a, b) => {
      if (b.isZero()) {
        throw new Error("Division by zero");
      }
      const dm = a.divmod(b);
      if (dm.mod.isZero())
        return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    });
  }
  /** Compare `lhs` to `rhs` and return true if `lhs` is greater than `rhs`. */
  static gt(lhs, rhs) {
    return lhs.value.gt(rhs.value);
  }
  /** Compare `lhs` to `rhs` and return true if `lhs` is less than `rhs`. */
  static lt(lhs, rhs) {
    return lhs.value.lt(rhs.value);
  }
  /** Compare `lhs` to `rhs` and return true if `lhs` is greater than or equal to `rhs`. */
  static gte(lhs, rhs) {
    return lhs.value.gte(rhs.value);
  }
  /** Compare `lhs` to `rhs` and return true if `lhs` is less than or equal to `rhs`. */
  static lte(lhs, rhs) {
    return lhs.value.lte(rhs.value);
  }
  /**
   * Can be used to implement custom operator.
   * @internal
   */
  static operator(lhs, rhs, overflow = "truncate", fn) {
    const { a, b } = convert(lhs, rhs);
    const type = a.constructor;
    const result = fn(a.value, b.value);
    return type.from(result, overflow);
  }
  static from(value, overflow) {
    if (isInstanceOf(value, this)) {
      return value;
    }
    let fromType = this;
    let bn2;
    if (isInstanceOf(value, Int)) {
      fromType = value.constructor;
      bn2 = value.value.clone();
    } else if (value instanceof Uint8Array) {
      bn2 = new BN(value, void 0, "le");
      if (fromType.isSigned) {
        bn2 = bn2.fromTwos(fromType.byteWidth * 8);
      }
    } else {
      if (typeof value === "string" && !/[0-9]+/.test(value) || typeof value === "number" && !Number.isFinite(value)) {
        throw new Error("Invalid number");
      }
      bn2 = BN.isBN(value) ? value.clone() : new BN(value, 10);
      if (bn2.isNeg() && !fromType.isSigned) {
        fromType = { byteWidth: fromType.byteWidth, isSigned: true };
      }
    }
    switch (overflow) {
      case "clamp":
        bn2 = clamp(bn2, this.min, this.max);
        break;
      case "truncate":
        bn2 = truncate(bn2, fromType, this);
        break;
    }
    return new this(bn2);
  }
  static fromABI(decoder) {
    return this.from(decoder.readArray(this.byteWidth));
  }
  static abiDefault() {
    return this.from(0);
  }
  static random() {
    return this.from(secureRandom(this.byteWidth));
  }
  /**
   * Create a new instance, don't use this directly. Use the `.from` factory method instead.
   * @throws If the value over- or under-flows the integer type.
   */
  constructor(value) {
    const self2 = this.constructor;
    if (self2.isSigned === void 0 || self2.byteWidth === void 0) {
      throw new Error("Cannot instantiate abstract class Int");
    }
    if (value.gt(self2.max)) {
      throw new Error(`Number ${value} overflows ${self2.abiName}`);
    }
    if (value.lt(self2.min)) {
      throw new Error(`Number ${value} underflows ${self2.abiName}`);
    }
    this.value = value;
  }
  cast(type, overflow = "truncate") {
    if (this.constructor === type) {
      return this;
    }
    return type.from(this, overflow);
  }
  /** Number as bytes in little endian (matches memory layout in C++ contract). */
  get byteArray() {
    const self2 = this.constructor;
    const value = self2.isSigned ? this.value.toTwos(self2.byteWidth * 8) : this.value;
    return value.toArrayLike(Uint8Array, "le", self2.byteWidth);
  }
  /**
   * Compare two integers, if strict is set to true the test will only consider integers
   * of the exact same type. I.e. Int64.from(1).equals(UInt64.from(1)) will return false.
   */
  equals(other, strict = false) {
    const self2 = this.constructor;
    if (strict === true && isInstanceOf(other, Int)) {
      const otherType = other.constructor;
      if (self2.byteWidth !== otherType.byteWidth || self2.isSigned !== otherType.isSigned) {
        return false;
      }
    }
    try {
      return this.value.eq(self2.from(other).value);
    } catch {
      return false;
    }
  }
  /** Mutating add. */
  add(num) {
    this.value = this.operator(num, Int.add).value;
  }
  /** Non-mutating add. */
  adding(num) {
    return this.operator(num, Int.add);
  }
  /** Mutating subtract. */
  subtract(num) {
    this.value = this.operator(num, Int.sub).value;
  }
  /** Non-mutating subtract. */
  subtracting(num) {
    return this.operator(num, Int.sub);
  }
  /** Mutating multiply. */
  multiply(by) {
    this.value = this.operator(by, Int.mul).value;
  }
  /** Non-mutating multiply. */
  multiplying(by) {
    return this.operator(by, Int.mul);
  }
  /**
   * Mutating divide.
   * @param behavior How to handle the remainder, default is to floor (round down).
   * @throws When dividing by zero.
   */
  divide(by, behavior) {
    this.value = this.dividing(by, behavior).value;
  }
  /**
   * Non-mutating divide.
   * @param behavior How to handle the remainder, default is to floor (round down).
   * @throws When dividing by zero.
   */
  dividing(by, behavior) {
    let op = Int.div;
    switch (behavior) {
      case "ceil":
        op = Int.divCeil;
        break;
      case "round":
        op = Int.divRound;
        break;
    }
    return this.operator(by, op);
  }
  /** Greater than comparision operator */
  gt(other) {
    return Int.gt(this, other);
  }
  /** Less than comparision operator */
  lt(other) {
    return Int.lt(this, other);
  }
  /** Greater than or equal comparision operator */
  gte(other) {
    return Int.gte(this, other);
  }
  /** Less than or equal comparision operator */
  lte(other) {
    return Int.lte(this, other);
  }
  /**
   * Run operator with C++11 implicit conversion.
   * @internal
   */
  operator(other, fn) {
    let rhs;
    if (isInstanceOf(other, Int)) {
      rhs = other;
    } else {
      rhs = Int64.from(other, "truncate");
    }
    return fn(this, rhs).cast(this.constructor);
  }
  /**
   * Convert to a JavaScript number.
   * @throws If the number cannot be represented by 53-bits.
   **/
  toNumber() {
    return this.value.toNumber();
  }
  toString() {
    return this.value.toString();
  }
  [Symbol.toPrimitive](type) {
    if (type === "number") {
      return this.toNumber();
    } else {
      return this.toString();
    }
  }
  toABI(encoder) {
    encoder.writeArray(this.byteArray);
  }
  toJSON() {
    if (this.value.bitLength() > 32) {
      return this.value.toString();
    } else {
      return this.value.toNumber();
    }
  }
}
Int.abiName = "__int";
class Int8 extends Int {
}
Int8.abiName = "int8";
Int8.byteWidth = 1;
Int8.isSigned = true;
class Int16 extends Int {
}
Int16.abiName = "int16";
Int16.byteWidth = 2;
Int16.isSigned = true;
class Int32 extends Int {
}
Int32.abiName = "int32";
Int32.byteWidth = 4;
Int32.isSigned = true;
class Int64 extends Int {
}
Int64.abiName = "int64";
Int64.byteWidth = 8;
Int64.isSigned = true;
class Int128 extends Int {
}
Int128.abiName = "int128";
Int128.byteWidth = 16;
Int128.isSigned = true;
class UInt8 extends Int {
}
UInt8.abiName = "uint8";
UInt8.byteWidth = 1;
UInt8.isSigned = false;
class UInt16 extends Int {
}
UInt16.abiName = "uint16";
UInt16.byteWidth = 2;
UInt16.isSigned = false;
class UInt32 extends Int {
}
UInt32.abiName = "uint32";
UInt32.byteWidth = 4;
UInt32.isSigned = false;
class UInt64 extends Int {
}
UInt64.abiName = "uint64";
UInt64.byteWidth = 8;
UInt64.isSigned = false;
class UInt128 extends Int {
}
UInt128.abiName = "uint128";
UInt128.byteWidth = 16;
UInt128.isSigned = false;
class VarInt extends Int {
  static fromABI(decoder) {
    return new this(new BN(decoder.readVarint32()));
  }
  toABI(encoder) {
    encoder.writeVarint32(Number(this));
  }
}
VarInt.abiName = "varint32";
VarInt.byteWidth = 32;
VarInt.isSigned = true;
class VarUInt extends Int {
  static fromABI(decoder) {
    return new this(new BN(decoder.readVaruint32()));
  }
  toABI(encoder) {
    encoder.writeVaruint32(Number(this));
  }
}
VarUInt.abiName = "varuint32";
VarUInt.byteWidth = 32;
VarUInt.isSigned = false;
function clamp(num, min, max) {
  return BN.min(BN.max(num, min), max);
}
function truncate(value, from, to) {
  const fill = value.isNeg() ? 255 : 0;
  const fromValue = from.isSigned ? value.toTwos(from.byteWidth * 8) : value;
  const fromBytes = fromValue.toArrayLike(Uint8Array, "le");
  const toBytes = new Uint8Array(to.byteWidth);
  toBytes.fill(fill);
  toBytes.set(fromBytes.slice(0, to.byteWidth));
  const toValue = new BN(toBytes, void 0, "le");
  return to.isSigned ? toValue.fromTwos(to.byteWidth * 8) : toValue;
}
function convert(a, b) {
  a = promote(a);
  b = promote(b);
  const aType = a.constructor;
  const bType = b.constructor;
  if (aType !== bType) {
    if (aType.isSigned === bType.isSigned) {
      if (aType.byteWidth > bType.byteWidth) {
        b = b.cast(aType);
      } else if (bType.byteWidth > aType.byteWidth) {
        a = a.cast(bType);
      }
    } else {
      if (aType.isSigned === false && aType.byteWidth >= bType.byteWidth) {
        b = b.cast(aType);
      } else if (bType.isSigned === false && bType.byteWidth >= aType.byteWidth) {
        a = a.cast(bType);
      } else {
        if (aType.isSigned === true && aType.max.gte(bType.max) && aType.min.lte(bType.min)) {
          b = b.cast(aType);
        } else if (bType.isSigned === true && bType.max.gte(aType.max) && bType.min.lte(aType.min)) {
          a = a.cast(bType);
        } else ;
      }
    }
  }
  return { a, b };
}
function promote(n2) {
  let rv = n2;
  const type = n2.constructor;
  if (type.byteWidth < 4) {
    rv = n2.cast(Int32);
  }
  return rv;
}
function synthesizeABI(type) {
  const structs = [];
  const variants = [];
  const aliases = [];
  const seen = /* @__PURE__ */ new Set();
  const resolveAbiType = (t2) => {
    let typeName;
    if (typeof t2.type !== "string") {
      typeName = resolve(t2.type);
    } else {
      typeName = t2.type;
    }
    if (t2.array === true) {
      if (t2.size) {
        typeName += `[${t2.size}]`;
      } else {
        typeName += "[]";
      }
    }
    if (t2.optional === true) {
      typeName += "?";
    }
    if (t2.extension === true) {
      typeName += "$";
    }
    return typeName;
  };
  const resolve = (t2) => {
    if (!t2.abiName) {
      throw new Error("Encountered non-conforming type");
    } else if (t2.abiName === "__struct") {
      throw new Error("Misconfigured Struct subclass, did you forget @Struct.type?");
    }
    if (seen.has(t2)) {
      return t2.abiName;
    }
    seen.add(t2);
    if (t2.abiAlias) {
      aliases.push({
        new_type_name: t2.abiName,
        type: resolveAbiType(t2.abiAlias)
      });
    } else if (t2.abiFields) {
      const fields = t2.abiFields.map((field) => {
        return {
          name: field.name,
          type: resolveAbiType(field)
        };
      });
      const struct = {
        base: t2.abiBase ? resolve(t2.abiBase) : "",
        name: t2.abiName,
        fields
      };
      structs.push(struct);
    } else if (t2.abiVariant) {
      const variant = {
        name: t2.abiName,
        types: t2.abiVariant.map(resolveAbiType)
      };
      variants.push(variant);
    }
    return t2.abiName;
  };
  const root = resolve(type);
  return { abi: ABI.from({ structs, variants, types: aliases }), types: Array.from(seen), root };
}
function abiTypeString(type) {
  let typeName = typeof type.type === "string" ? type.type : type.type.abiName;
  if (type.array === true) {
    if (type.size) {
      typeName += `[${type.size}]`;
    } else {
      typeName += "[]";
    }
  }
  if (type.optional === true) {
    typeName += "?";
  }
  if (type.extension === true) {
    typeName += "$";
  }
  return typeName;
}
function isTypeDescriptor(type) {
  return typeof type !== "string" && type.abiName === void 0 && type.type !== void 0;
}
function toTypeDescriptor(type) {
  if (typeof type === "string") {
    return { type };
  }
  if (typeof type.abiName !== "undefined") {
    return { type };
  }
  return type;
}
const StringType = {
  abiName: "string",
  abiDefault: () => "",
  fromABI: (decoder) => {
    return decoder.readString();
  },
  from: (string) => string,
  toABI: (string, encoder) => {
    encoder.writeString(string);
  }
};
const BoolType = {
  abiName: "bool",
  abiDefault: () => false,
  fromABI: (decoder) => {
    return decoder.readByte() === 1;
  },
  from: (value) => value,
  toABI: (value, encoder) => {
    encoder.writeByte(value === true ? 1 : 0);
  }
};
function getBuiltins() {
  return [
    // types represented by JavaScript builtins
    BoolType,
    StringType,
    // types represented by Classes
    Asset$1,
    Asset$1.Symbol,
    Asset$1.SymbolCode,
    BlockTimestamp,
    Bytes,
    Checksum160,
    Checksum256,
    Checksum512,
    ExtendedAsset,
    Float128,
    Float32,
    Float64,
    Int128,
    Int16,
    Int32,
    Int64,
    Int8,
    Name,
    PublicKey,
    Signature,
    TimePoint,
    TimePointSec,
    UInt128,
    UInt16,
    UInt32,
    UInt64,
    UInt8,
    VarInt,
    VarUInt
  ];
}
function buildTypeLookup(additional = []) {
  const rv = {};
  const builtins = getBuiltins();
  for (const type of builtins) {
    rv[type.abiName] = type;
  }
  for (const type of additional) {
    if (!type.abiName) {
      throw new Error("Invalid type");
    }
    rv[type.abiName] = type;
  }
  return rv;
}
function getTypeName(object) {
  if (object.constructor && object.constructor.abiName !== void 0) {
    return object.constructor.abiName;
  }
  if (Array.isArray(object)) {
    const types2 = object.map(getTypeName);
    const type = types2[0];
    if (!type || !types2.every((t2) => t2 === type)) {
      return;
    }
    return type + "[]";
  }
  switch (typeof object) {
    case "boolean":
      return "bool";
    case "string":
      return "string";
  }
}
function getType(object, name = "jsobj") {
  var _a;
  if (object.constructor && object.constructor.abiName !== void 0) {
    return object.constructor;
  }
  if (Array.isArray(object)) {
    const types2 = object.map((v2) => {
      return getType(v2, name);
    });
    const type = types2[0];
    if (!type) {
      return;
    }
    if (!types2.every((t2) => t2 && t2.abiName === type.abiName)) {
      return;
    }
    return type;
  }
  const objectType = typeof object;
  if (objectType === "object" && object !== null) {
    const fields = Object.keys(object).map((key2) => {
      return { name: key2, type: getType(object[key2], name + "_nested") };
    });
    if (fields.find((field) => !field.type)) {
      return;
    }
    return _a = class extends Struct {
    }, _a.abiName = name, _a.abiFields = fields, _a;
  }
  switch (objectType) {
    case "boolean":
      return BoolType;
    case "string":
      return StringType;
  }
}
class DecodingError extends Error {
  constructor(ctx, underlyingError) {
    const path = ctx.codingPath.map(({ field, type }) => {
      if (typeof field === "number") {
        return field;
      } else {
        return `${field}<${type.typeName}>`;
      }
    }).join(".");
    super(`Decoding error at ${path}: ${underlyingError.message}`);
    this.stack = underlyingError.stack;
    this.ctx = ctx;
    this.underlyingError = underlyingError;
  }
}
DecodingError.__className = "DecodingError";
function abiDecode(args) {
  const descriptor = toTypeDescriptor(args.type);
  const typeName = abiTypeString(descriptor);
  const customTypes = args.customTypes || [];
  let abi;
  if (args.abi) {
    abi = ABI.from(args.abi);
  } else {
    try {
      let type;
      if (typeof descriptor.type === "string") {
        const lookup2 = buildTypeLookup(customTypes);
        const rName = new ABI.ResolvedType(descriptor.type).name;
        type = lookup2[rName];
        if (!type) {
          throw new Error(`Unknown type: ${descriptor.type}`);
        }
      } else {
        type = descriptor.type;
      }
      const synthesized = synthesizeABI(type);
      abi = synthesized.abi;
      customTypes.push(...synthesized.types);
    } catch (error2) {
      throw Error(`Unable to synthesize ABI for: ${typeName} (${error2.message}). To decode non-class types you need to pass the ABI definition manually.`);
    }
  }
  const resolved = abi.resolveType(typeName);
  if (typeof descriptor.type !== "string") {
    customTypes.unshift(descriptor.type);
  }
  const ctx = {
    types: buildTypeLookup(customTypes),
    strictExtensions: args.strictExtensions || false,
    codingPath: [{ field: "root", type: resolved }]
  };
  try {
    if (args.data || args.data === "") {
      let decoder;
      if (isInstanceOf(args.data, ABIDecoder)) {
        decoder = args.data;
      } else {
        const bytes = Bytes.from(args.data);
        const fatal = args.ignoreInvalidUTF8 === void 0 ? true : !args.ignoreInvalidUTF8;
        decoder = new ABIDecoder(bytes.array, new TextDecoder("utf-8", { fatal }));
      }
      if (args.metadata) {
        decoder.metadata = args.metadata;
      }
      return decodeBinary(resolved, decoder, ctx);
    } else if (args.object !== void 0) {
      return decodeObject(args.object, resolved, ctx);
    } else if (args.json) {
      return decodeObject(JSON.parse(args.json), resolved, ctx);
    } else {
      throw new Error("Nothing to decode, you must set one of data, json, object");
    }
  } catch (error2) {
    throw new DecodingError(ctx, error2);
  }
}
const Resolved = Symbol("Resolved");
function decodeBinary(type, decoder, ctx) {
  if (ctx.codingPath.length > 32) {
    throw new Error("Maximum decoding depth exceeded");
  }
  if (type.isExtension) {
    if (!decoder.canRead()) {
      if (ctx.strictExtensions) {
        return defaultValue(type, ctx);
      } else {
        return null;
      }
    }
  }
  if (type.isOptional) {
    if (decoder.readByte() === 0) {
      return null;
    }
  }
  if (type.isArray) {
    const len = decoder.readVaruint32();
    const rv = [];
    for (let i2 = 0; i2 < len; i2++) {
      ctx.codingPath.push({ field: i2, type });
      rv.push(decodeInner());
      ctx.codingPath.pop();
    }
    return rv;
  } else {
    return decodeInner();
  }
  function decodeInner() {
    const abiType = ctx.types[type.name];
    if (abiType && abiType.fromABI) {
      return abiType.fromABI(decoder);
    } else {
      if (type.ref) {
        ctx.codingPath.push({ field: "", type: type.ref });
        const rv = decodeBinary(type.ref, decoder, ctx);
        ctx.codingPath.pop();
        return rv;
      } else if (type.fields) {
        const fields = type.allFields;
        if (!fields) {
          throw new Error("Invalid struct fields");
        }
        const rv = {};
        for (const field of fields) {
          ctx.codingPath.push({ field: field.name, type: field.type });
          rv[field.name] = decodeBinary(field.type, decoder, ctx);
          ctx.codingPath.pop();
        }
        if (abiType) {
          rv[Resolved] = true;
          return abiType.from(rv);
        } else {
          return rv;
        }
      } else if (type.variant) {
        const vIdx = decoder.readByte();
        const vType = type.variant[vIdx];
        if (!vType) {
          throw new Error(`Unknown variant idx: ${vIdx}`);
        }
        ctx.codingPath.push({ field: `v${vIdx}`, type: vType });
        const rv = [vType.typeName, decodeBinary(vType, decoder, ctx)];
        ctx.codingPath.pop();
        if (abiType) {
          return abiType.from(rv);
        } else {
          return rv;
        }
      } else if (abiType) {
        throw new Error("Invalid type");
      } else {
        throw new Error(type.name === "any" ? "Unable to decode 'any' type from binary" : "Unknown type");
      }
    }
  }
}
function decodeObject(value, type, ctx) {
  if (value === null || value === void 0) {
    if (type.isOptional) {
      return null;
    }
    if (type.isExtension) {
      if (ctx.strictExtensions) {
        return defaultValue(type, ctx);
      } else {
        return null;
      }
    }
    throw new Error(`Unexpectedly encountered ${value} for non-optional (${ctx.codingPath.map((path) => path.field).join(".")})`);
  } else if (type.isArray) {
    if (!Array.isArray(value)) {
      throw new Error("Expected array");
    }
    const rv = [];
    const len = value.length;
    for (let i2 = 0; i2 < len; i2++) {
      ctx.codingPath.push({ field: i2, type });
      rv.push(decodeInner(value[i2]));
      ctx.codingPath.pop();
    }
    return rv;
  } else {
    return decodeInner(value);
  }
  function decodeInner(value2) {
    const abiType = ctx.types[type.name];
    if (type.ref && !abiType) {
      return decodeObject(value2, type.ref, ctx);
    } else if (type.fields) {
      if (typeof value2 !== "object") {
        throw new Error("Expected object");
      }
      if (typeof abiType === "function" && isInstanceOf(value2, abiType)) {
        return value2;
      }
      const fields = type.allFields;
      if (!fields) {
        throw new Error("Invalid struct fields");
      }
      const struct = {};
      for (const field of fields) {
        ctx.codingPath.push({ field: field.name, type: field.type });
        struct[field.name] = decodeObject(value2[field.name], field.type, ctx);
        ctx.codingPath.pop();
      }
      if (abiType) {
        struct[Resolved] = true;
        return abiType.from(struct);
      } else {
        return struct;
      }
    } else if (type.variant) {
      let vName;
      if (Array.isArray(value2) && value2.length === 2 && typeof value2[0] === "string") {
        vName = value2[0];
        value2 = value2[1];
      } else if (isInstanceOf(value2, Variant)) {
        vName = value2.variantName;
        value2 = value2.value;
      } else {
        vName = getTypeName(value2);
      }
      const vIdx = type.variant.findIndex((t2) => t2.typeName === vName);
      if (vIdx === -1) {
        throw new Error(`Unknown variant type: ${vName}`);
      }
      const vType = type.variant[vIdx];
      ctx.codingPath.push({ field: `v${vIdx}`, type: vType });
      const rv = [vType.typeName, decodeObject(value2, vType, ctx)];
      ctx.codingPath.pop();
      if (abiType) {
        rv[Resolved] = true;
        return abiType.from(rv);
      } else {
        return rv;
      }
    } else {
      if (!abiType) {
        if (type.name === "any") {
          return value2;
        }
        throw new Error("Unknown type");
      }
      return abiType.from(value2);
    }
  }
}
function defaultValue(type, ctx, seen = /* @__PURE__ */ new Set()) {
  if (type.isArray) {
    return [];
  }
  if (type.isOptional) {
    return null;
  }
  const abiType = ctx.types[type.name];
  if (abiType && abiType.abiDefault) {
    return abiType.abiDefault();
  }
  if (seen.has(type.name)) {
    throw new Error("Circular type reference");
  }
  seen.add(type.name);
  if (type.allFields) {
    const rv = {};
    for (const field of type.allFields) {
      ctx.codingPath.push({ field: field.name, type: field.type });
      rv[field.name] = defaultValue(field.type, ctx, seen);
      ctx.codingPath.pop();
    }
    if (abiType) {
      rv[Resolved] = true;
      return abiType.from(rv);
    }
    return rv;
  }
  if (type.variant && type.variant.length > 0) {
    const rv = [type.variant[0].typeName, defaultValue(type.variant[0], ctx)];
    if (abiType) {
      rv[Resolved] = true;
      return abiType.from(rv);
    }
    return rv;
  }
  if (type.ref) {
    ctx.codingPath.push({ field: "", type: type.ref });
    const rv = defaultValue(type.ref, ctx, seen);
    ctx.codingPath.pop();
    return rv;
  }
  throw new Error("Unable to determine default value");
}
class ABIDecoder {
  constructor(array, textDecoder) {
    this.array = array;
    this.pos = 0;
    this.metadata = {};
    this.textDecoder = textDecoder || new TextDecoder("utf-8", { fatal: true });
    this.data = new DataView(array.buffer, array.byteOffset, array.byteLength);
  }
  canRead(bytes = 1) {
    return !(this.pos + bytes > this.array.byteLength);
  }
  ensure(bytes) {
    if (!this.canRead(bytes)) {
      throw new Error("Read past end of buffer");
    }
  }
  setPosition(pos) {
    if (pos < 0 || pos > this.array.byteLength) {
      throw new Error("Invalid position");
    }
    this.pos = pos;
  }
  getPosition() {
    return this.pos;
  }
  advance(bytes) {
    this.ensure(bytes);
    this.pos += bytes;
  }
  /** Read one byte. */
  readByte() {
    this.ensure(1);
    return this.array[this.pos++];
  }
  /** Read floating point as JavaScript number, 32 or 64 bits. */
  readFloat(byteWidth) {
    this.ensure(byteWidth);
    let rv;
    switch (byteWidth) {
      case 4:
        rv = this.data.getFloat32(this.pos, true);
        break;
      case 8:
        rv = this.data.getFloat64(this.pos, true);
        break;
      default:
        throw new Error("Invalid float size");
    }
    this.pos += byteWidth;
    return rv;
  }
  readVaruint32() {
    let v2 = 0;
    let bit = 0;
    for (; ; ) {
      const b = this.readByte();
      v2 |= (b & 127) << bit;
      bit += 7;
      if (!(b & 128)) {
        break;
      }
    }
    return v2 >>> 0;
  }
  readVarint32() {
    const v2 = this.readVaruint32();
    if (v2 & 1) {
      return ~v2 >> 1 | 2147483648;
    } else {
      return v2 >>> 1;
    }
  }
  readArray(length) {
    this.ensure(length);
    const rv = this.array.subarray(this.pos, this.pos + length);
    this.pos += length;
    return rv;
  }
  readString() {
    const length = this.readVaruint32();
    return this.textDecoder.decode(this.readArray(length));
  }
}
ABIDecoder.__className = "ABIDecoder";
class EncodingError extends Error {
  constructor(ctx, underlyingError) {
    const path = ctx.codingPath.map(({ field, type }) => {
      if (typeof field === "number") {
        return field;
      } else {
        return `${field}<${type.typeName}>`;
      }
    }).join(".");
    super(`Encoding error at ${path}: ${underlyingError.message}`);
    this.stack = underlyingError.stack;
    this.ctx = ctx;
    this.underlyingError = underlyingError;
  }
}
EncodingError.__className = "EncodingError";
function abiEncode(args) {
  let type;
  let typeName;
  if (typeof args.type === "string") {
    typeName = args.type;
  } else if (args.type && isTypeDescriptor(args.type)) {
    if (typeof args.type.type !== "string") {
      type = args.type.type;
    }
    typeName = abiTypeString(args.type);
  } else if (args.type && args.type.abiName !== void 0) {
    type = args.type;
    typeName = args.type.abiName;
  } else {
    type = getType(args.object);
    if (type) {
      typeName = type.abiName;
      if (Array.isArray(args.object)) {
        typeName += "[]";
      }
    }
  }
  const customTypes = args.customTypes ? args.customTypes.slice() : [];
  if (type) {
    customTypes.unshift(type);
  } else if (typeName) {
    const rootName = new ABI.ResolvedType(typeName).name;
    type = customTypes.find((t2) => t2.abiName === rootName);
  }
  let rootType;
  if (args.abi && typeName) {
    rootType = ABI.from(args.abi).resolveType(typeName);
  } else if (type) {
    const synthesized = synthesizeABI(type);
    rootType = synthesized.abi.resolveType(typeName || type.abiName);
    customTypes.push(...synthesized.types);
  } else if (typeName) {
    rootType = new ABI.ResolvedType(typeName);
  } else {
    throw new Error("Unable to determine the type of the object to be encoded. To encode custom ABI types you must pass the type argument.");
  }
  const types2 = buildTypeLookup(customTypes);
  const encoder = args.encoder || new ABIEncoder();
  if (args.metadata) {
    encoder.metadata = args.metadata;
  }
  const ctx = {
    types: types2,
    encoder,
    codingPath: [{ field: "root", type: rootType }]
  };
  try {
    encodeAny(args.object, rootType, ctx);
  } catch (error2) {
    throw new EncodingError(ctx, error2);
  }
  return Bytes.from(encoder.getData());
}
function encodeAny(value, type, ctx) {
  const valueExists = value !== void 0 && value !== null;
  if (type.isOptional) {
    ctx.encoder.writeByte(valueExists ? 1 : 0);
    if (!valueExists) {
      return;
    }
  }
  if (type.isArray) {
    if (!Array.isArray(value)) {
      throw new Error(`Expected array for: ${type.typeName}`);
    }
    const len = value.length;
    if (!type.size) {
      ctx.encoder.writeVaruint32(len);
    }
    for (let i2 = 0; i2 < len; i2++) {
      ctx.codingPath.push({ field: i2, type });
      encodeInner(value[i2]);
      ctx.codingPath.pop();
    }
  } else {
    encodeInner(value);
  }
  function encodeInner(value2) {
    const abiType = ctx.types[type.name];
    if (type.ref && !abiType) {
      encodeAny(value2, type.ref, ctx);
      return;
    }
    if (!valueExists) {
      if (type.isExtension) {
        return;
      }
      throw new Error(`Found ${value2} for non-optional type: ${type.typeName} (${ctx.codingPath.map((path) => path.field).join(".")})`);
    }
    if (abiType && abiType.toABI) {
      abiType.toABI(value2, ctx.encoder);
    } else if (typeof value2.toABI === "function" && value2.constructor.abiName === type.name) {
      value2.toABI(ctx.encoder);
    } else {
      if (type.fields) {
        if (typeof value2 !== "object") {
          throw new Error(`Expected object for: ${type.name}`);
        }
        const fields = type.allFields;
        if (!fields) {
          throw new Error("Invalid struct fields");
        }
        for (const field of fields) {
          ctx.codingPath.push({ field: field.name, type: field.type });
          encodeAny(value2[field.name], field.type, ctx);
          ctx.codingPath.pop();
        }
      } else if (type.variant) {
        let vName;
        if (Array.isArray(value2) && value2.length === 2 && typeof value2[0] === "string") {
          vName = value2[0];
          value2 = value2[1];
        } else if (isInstanceOf(value2, Variant)) {
          vName = value2.variantName;
          value2 = value2.value;
        } else {
          vName = getTypeName(value2);
        }
        const vIdx = type.variant.findIndex((t2) => t2.typeName === vName);
        if (vIdx === -1) {
          const types2 = type.variant.map((t2) => `'${t2.typeName}'`).join(", ");
          throw new Error(`Unknown variant type '${vName}', expected one of ${types2}`);
        }
        const vType = type.variant[vIdx];
        ctx.encoder.writeVaruint32(vIdx);
        ctx.codingPath.push({ field: `v${vIdx}`, type: vType });
        encodeAny(value2, vType, ctx);
        ctx.codingPath.pop();
      } else {
        if (!abiType) {
          throw new Error(type.name === "any" ? "Unable to encode any type to binary" : "Unknown type");
        }
        const instance2 = abiType.from(value2);
        if (!instance2.toABI) {
          throw new Error(`Invalid type ${type.name}, no encoding methods implemented`);
        }
        instance2.toABI(ctx.encoder);
      }
    }
  }
}
class ABIEncoder {
  constructor(pageSize = 1024) {
    this.pageSize = pageSize;
    this.pos = 0;
    this.textEncoder = new TextEncoder();
    this.metadata = {};
    const buffer = new ArrayBuffer(pageSize);
    this.data = new DataView(buffer);
    this.array = new Uint8Array(buffer);
  }
  ensure(bytes) {
    if (this.data.byteLength >= this.pos + bytes) {
      return;
    }
    const pages = Math.ceil(bytes / this.pageSize);
    const newSize = this.data.byteLength + this.pageSize * pages;
    const buffer = new ArrayBuffer(newSize);
    const data = new DataView(buffer);
    const array = new Uint8Array(buffer);
    array.set(this.array);
    this.data = data;
    this.array = array;
  }
  /** Write a single byte. */
  writeByte(byte) {
    this.ensure(1);
    this.array[this.pos++] = byte;
  }
  /** Write an array of bytes. */
  writeArray(bytes) {
    const size2 = bytes.length;
    this.ensure(size2);
    this.array.set(bytes, this.pos);
    this.pos += size2;
  }
  writeFloat(value, byteWidth) {
    this.ensure(byteWidth);
    switch (byteWidth) {
      case 4:
        this.data.setFloat32(this.pos, value, true);
        break;
      case 8:
        this.data.setFloat64(this.pos, value, true);
        break;
      default:
        throw new Error("Invalid float size");
    }
    this.pos += byteWidth;
  }
  writeVaruint32(v2) {
    this.ensure(4);
    for (; ; ) {
      if (v2 >>> 7) {
        this.array[this.pos++] = 128 | v2 & 127;
        v2 = v2 >>> 7;
      } else {
        this.array[this.pos++] = v2;
        break;
      }
    }
  }
  writeVarint32(v2) {
    this.writeVaruint32(v2 << 1 ^ v2 >> 31);
  }
  writeString(v2) {
    const data = this.textEncoder.encode(v2);
    this.writeVaruint32(data.byteLength);
    this.writeArray(data);
  }
  getData() {
    return new Uint8Array(this.array.buffer, this.array.byteOffset, this.pos);
  }
  getBytes() {
    return new Bytes(this.getData());
  }
}
ABIEncoder.__className = "ABIEncoder";
class ABI {
  constructor(args) {
    this.version = args.version || ABI.version;
    this.types = args.types || [];
    this.variants = args.variants || [];
    this.structs = args.structs || [];
    this.actions = args.actions || [];
    this.tables = args.tables || [];
    this.ricardian_clauses = args.ricardian_clauses || [];
    this.action_results = args.action_results || [];
  }
  static from(value) {
    if (isInstanceOf(value, ABI)) {
      return value;
    }
    if (isInstanceOf(value, Blob)) {
      return abiDecode({
        data: value.array,
        type: this
      });
    }
    if (typeof value === "string") {
      return new ABI(JSON.parse(value));
    }
    return new ABI(value);
  }
  static fromABI(decoder) {
    const version2 = decoder.readString();
    const types2 = [];
    const numTypes = decoder.readVaruint32();
    for (let i2 = 0; i2 < numTypes; i2++) {
      types2.push({ new_type_name: decoder.readString(), type: decoder.readString() });
    }
    const structs = [];
    const numStructs = decoder.readVaruint32();
    for (let i2 = 0; i2 < numStructs; i2++) {
      const name = decoder.readString();
      const base2 = decoder.readString();
      const numFields = decoder.readVaruint32();
      const fields = [];
      for (let j2 = 0; j2 < numFields; j2++) {
        fields.push({ name: decoder.readString(), type: decoder.readString() });
      }
      structs.push({ base: base2, name, fields });
    }
    const actions = [];
    const numActions = decoder.readVaruint32();
    for (let i2 = 0; i2 < numActions; i2++) {
      const name = Name.fromABI(decoder);
      const type = decoder.readString();
      const ricardian_contract = decoder.readString();
      actions.push({ name, type, ricardian_contract });
    }
    const tables = [];
    const numTables = decoder.readVaruint32();
    for (let i2 = 0; i2 < numTables; i2++) {
      const name = Name.fromABI(decoder);
      const index_type = decoder.readString();
      const key_names = [];
      const numKeyNames = decoder.readVaruint32();
      for (let j2 = 0; j2 < numKeyNames; j2++) {
        key_names.push(decoder.readString());
      }
      const key_types = [];
      const numKeyTypes = decoder.readVaruint32();
      for (let j2 = 0; j2 < numKeyTypes; j2++) {
        key_types.push(decoder.readString());
      }
      const type = decoder.readString();
      tables.push({ name, index_type, key_names, key_types, type });
    }
    const ricardian_clauses = [];
    const numClauses = decoder.readVaruint32();
    for (let i2 = 0; i2 < numClauses; i2++) {
      const id = decoder.readString();
      const body = decoder.readString();
      ricardian_clauses.push({ id, body });
    }
    const numErrors = decoder.readVaruint32();
    for (let i2 = 0; i2 < numErrors; i2++) {
      decoder.advance(8);
      decoder.advance(decoder.readVaruint32());
    }
    const numExtensions = decoder.readVaruint32();
    for (let i2 = 0; i2 < numExtensions; i2++) {
      decoder.advance(2);
      decoder.advance(decoder.readVaruint32());
    }
    const variants = [];
    if (decoder.canRead()) {
      const numVariants = decoder.readVaruint32();
      for (let i2 = 0; i2 < numVariants; i2++) {
        const name = decoder.readString();
        const types3 = [];
        const numTypes2 = decoder.readVaruint32();
        for (let j2 = 0; j2 < numTypes2; j2++) {
          types3.push(decoder.readString());
        }
        variants.push({ name, types: types3 });
      }
    }
    const action_results = [];
    if (decoder.canRead()) {
      const numActionResults = decoder.readVaruint32();
      for (let i2 = 0; i2 < numActionResults; i2++) {
        const name = Name.fromABI(decoder);
        const result_type = decoder.readString();
        action_results.push({ name, result_type });
      }
    }
    return new ABI({
      version: version2,
      types: types2,
      structs,
      actions,
      tables,
      ricardian_clauses,
      variants,
      action_results
    });
  }
  toABI(encoder) {
    encoder.writeString(this.version);
    encoder.writeVaruint32(this.types.length);
    for (const type of this.types) {
      encoder.writeString(type.new_type_name);
      encoder.writeString(type.type);
    }
    encoder.writeVaruint32(this.structs.length);
    for (const struct of this.structs) {
      encoder.writeString(struct.name);
      encoder.writeString(struct.base);
      encoder.writeVaruint32(struct.fields.length);
      for (const field of struct.fields) {
        encoder.writeString(field.name);
        encoder.writeString(field.type);
      }
    }
    encoder.writeVaruint32(this.actions.length);
    for (const action of this.actions) {
      Name.from(action.name).toABI(encoder);
      encoder.writeString(action.type);
      encoder.writeString(action.ricardian_contract);
    }
    encoder.writeVaruint32(this.tables.length);
    for (const table of this.tables) {
      Name.from(table.name).toABI(encoder);
      encoder.writeString(table.index_type);
      encoder.writeVaruint32(table.key_names.length);
      for (const key2 of table.key_names) {
        encoder.writeString(key2);
      }
      encoder.writeVaruint32(table.key_types.length);
      for (const key2 of table.key_types) {
        encoder.writeString(key2);
      }
      encoder.writeString(table.type);
    }
    encoder.writeVaruint32(this.ricardian_clauses.length);
    for (const clause of this.ricardian_clauses) {
      encoder.writeString(clause.id);
      encoder.writeString(clause.body);
    }
    encoder.writeVaruint32(0);
    encoder.writeVaruint32(0);
    encoder.writeVaruint32(this.variants.length);
    for (const variant of this.variants) {
      encoder.writeString(variant.name);
      encoder.writeVaruint32(variant.types.length);
      for (const type of variant.types) {
        encoder.writeString(type);
      }
    }
    encoder.writeVaruint32(this.action_results.length);
    for (const result of this.action_results) {
      Name.from(result.name).toABI(encoder);
      encoder.writeString(result.result_type);
    }
  }
  resolveType(name) {
    const types2 = {};
    return this.resolve({ name, types: types2 }, { id: 0 });
  }
  resolveAll() {
    const types2 = {};
    const ctx = { id: 0 };
    return {
      types: this.types.map((t2) => this.resolve({ name: t2.new_type_name, types: types2 }, ctx)),
      variants: this.variants.map((t2) => this.resolve({ name: t2.name, types: types2 }, ctx)),
      structs: this.structs.map((t2) => this.resolve({ name: t2.name, types: types2 }, ctx))
    };
  }
  resolve({ name, types: types2 }, ctx) {
    const existing = types2[name];
    if (existing) {
      return existing;
    }
    const type = new ABI.ResolvedType(name, ++ctx.id);
    types2[type.typeName] = type;
    const alias = this.types.find((typeDef) => typeDef.new_type_name == type.name);
    if (alias) {
      type.ref = this.resolve({ name: alias.type, types: types2 }, ctx);
      return type;
    }
    const struct = this.getStruct(type.name);
    if (struct) {
      if (struct.base) {
        type.base = this.resolve({ name: struct.base, types: types2 }, ctx);
      }
      type.fields = struct.fields.map((field) => {
        return {
          name: field.name,
          type: this.resolve({ name: field.type, types: types2 }, ctx)
        };
      });
      return type;
    }
    const variant = this.getVariant(type.name);
    if (variant) {
      type.variant = variant.types.map((name2) => this.resolve({ name: name2, types: types2 }, ctx));
      return type;
    }
    return type;
  }
  getStruct(name) {
    return this.structs.find((struct) => struct.name == name);
  }
  getVariant(name) {
    return this.variants.find((variant) => variant.name == name);
  }
  /** Return arguments type of an action in this ABI. */
  getActionType(actionName) {
    const name = Name.from(actionName).toString();
    const action = this.actions.find((a) => a.name.toString() === name);
    if (action) {
      return action.type;
    }
  }
  equals(other) {
    const o = ABI.from(other);
    if (this.version != o.version || this.types.length != o.types.length || this.structs.length != o.structs.length || this.actions.length != o.actions.length || this.tables.length != o.tables.length || this.ricardian_clauses.length != o.ricardian_clauses.length || this.variants.length != o.variants.length || this.action_results.length != o.action_results.length) {
      return false;
    }
    return abiEncode({ object: this }).equals(abiEncode({ object: o }));
  }
  toJSON() {
    return {
      version: this.version,
      types: this.types,
      structs: this.structs,
      actions: this.actions,
      tables: this.tables,
      ricardian_clauses: this.ricardian_clauses,
      error_messages: [],
      abi_extensions: [],
      variants: this.variants,
      action_results: this.action_results
    };
  }
}
ABI.abiName = "abi";
ABI.version = "eosio::abi/1.1";
(function(ABI2) {
  class ResolvedType {
    constructor(fullName, id = 0) {
      let name = fullName;
      if (name.endsWith("$")) {
        name = name.slice(0, -1);
        this.isExtension = true;
      } else {
        this.isExtension = false;
      }
      if (name.endsWith("?")) {
        name = name.slice(0, -1);
        this.isOptional = true;
      } else {
        this.isOptional = false;
      }
      this.isArray = false;
      if (name.endsWith("[]")) {
        name = name.slice(0, -2);
        this.isArray = true;
      }
      const fixedMatch = name.match(/(.*)\[(\d+)\]/);
      if (fixedMatch) {
        const [, fixedName, fixedSize] = fixedMatch;
        name = fixedName;
        this.isArray = true;
        this.size = Number(fixedSize);
      }
      this.id = id;
      this.name = name;
    }
    /**
     * Type name including suffixes: [] array, ? optional, $ binary ext
     */
    get typeName() {
      let rv = this.name;
      if (this.isArray) {
        if (this.size) {
          rv += `[${this.size}]`;
        } else {
          rv += "[]";
        }
      }
      if (this.isOptional) {
        rv += "?";
      }
      if (this.isExtension) {
        rv += "$";
      }
      return rv;
    }
    /** All fields including base struct(s), undefined if not a struct type. */
    get allFields() {
      let current = this;
      const rv = [];
      const seen = /* @__PURE__ */ new Set();
      do {
        if (!current.fields) {
          return;
        }
        if (seen.has(current.name)) {
          return;
        }
        for (let i2 = current.fields.length - 1; i2 >= 0; i2--) {
          rv.unshift(current.fields[i2]);
        }
        seen.add(current.name);
        current = current.base;
      } while (current !== void 0);
      return rv;
    }
  }
  ABI2.ResolvedType = ResolvedType;
})(ABI || (ABI = {}));
class Struct {
  static from(value) {
    if (value[Resolved] === true) {
      return new this(value);
    }
    if (isInstanceOf(value, this)) {
      return value;
    }
    return abiDecode({ object: value, type: this });
  }
  static get structFields() {
    const rv = [];
    const walk = (t2) => {
      if (t2.abiBase) {
        walk(t2.abiBase);
      }
      for (const field of t2.abiFields || []) {
        rv.push(field);
      }
    };
    walk(this);
    return rv;
  }
  /** @internal */
  constructor(object) {
    const self2 = this.constructor;
    for (const field of self2.structFields) {
      const isOptional = typeof field.type === "string" ? new ABI.ResolvedType(String(field.type)).isOptional : field.optional;
      const value = object[field.name];
      if (isOptional && !value)
        continue;
      this[field.name] = value;
    }
  }
  /**
   * Return true if this struct equals the other.
   *
   * Note: This compares the ABI encoded bytes of both structs, subclasses
   *       should implement their own fast equality check when possible.
   */
  equals(other) {
    const self2 = this.constructor;
    if (other.constructor && typeof other.constructor.abiName === "string" && other.constructor.abiName !== self2.abiName) {
      return false;
    }
    return abiEncode({ object: this }).equals(abiEncode({ object: self2.from(other) }));
  }
  /** @internal */
  toJSON() {
    const self2 = this.constructor;
    const rv = {};
    for (const field of self2.structFields) {
      if (field.optional && !this[field.name])
        continue;
      rv[field.name] = this[field.name];
    }
    return rv;
  }
}
Struct.abiName = "__struct";
(function(Struct2) {
  const FieldsOwner = Symbol("FieldsOwner");
  function type(name) {
    return function(struct) {
      struct.abiName = name;
      return struct;
    };
  }
  Struct2.type = type;
  function field(type2, options = {}) {
    return (target, name) => {
      const ctor = target.constructor;
      if (!ctor.abiFields) {
        ctor.abiFields = [];
        ctor.abiFields[FieldsOwner] = ctor;
      } else if (ctor.abiFields[FieldsOwner] !== ctor) {
        ctor.abiBase = ctor.abiFields[FieldsOwner];
        ctor.abiFields = [];
        ctor.abiFields[FieldsOwner] = ctor;
      }
      ctor.abiFields.push({ ...options, name, type: type2 });
    };
  }
  Struct2.field = field;
})(Struct || (Struct = {}));
function TypeAlias(name) {
  return function(typeAlias) {
    typeAlias.abiAlias = { type: Object.getPrototypeOf(typeAlias.prototype).constructor };
    typeAlias.abiName = name;
    return typeAlias;
  };
}
class Variant {
  static from(object) {
    if (object[Resolved]) {
      return new this(object);
    }
    if (isInstanceOf(object, this)) {
      return object;
    }
    return abiDecode({ object, type: this });
  }
  /** @internal */
  constructor(variant) {
    const abiVariant = this.constructor.abiVariant;
    this.value = variant[1];
    const variantIdx = abiVariant.map(abiTypeString).findIndex((t2) => t2 === variant[0]);
    if (0 > variantIdx || abiVariant.length <= variantIdx) {
      throw new Error(`Unknown variant ${variant[0]}`);
    }
    this.variantIdx = variantIdx;
  }
  /**
   * Return true if this variant equals the other.
   *
   * Note: This compares the ABI encoded bytes of both variants, subclasses
   *       should implement their own fast equality check when possible.
   */
  equals(other) {
    const self2 = this.constructor;
    const otherVariant = self2.from(other);
    if (this.variantIdx !== otherVariant.variantIdx) {
      return false;
    }
    return abiEncode({ object: this }).equals(abiEncode({ object: otherVariant }));
  }
  get variantName() {
    const variant = this.constructor.abiVariant[this.variantIdx];
    return abiTypeString(variant);
  }
  /** @internal */
  toJSON() {
    return [this.variantName, this.value];
  }
}
Variant.abiName = "__variant";
Variant.abiVariant = [];
(function(Variant2) {
  function type(name, types2) {
    return function(variant) {
      variant.abiName = name;
      variant.abiVariant = types2.map(toTypeDescriptor);
      return variant;
    };
  }
  Variant2.type = type;
})(Variant || (Variant = {}));
class Float {
  static from(value) {
    if (isInstanceOf(value, this)) {
      return value;
    }
    if (typeof value === "string") {
      value = Number.parseFloat(value);
    } else if (isInstanceOf(value, Float)) {
      value = value.value;
    }
    return new this(value);
  }
  static fromABI(decoder) {
    return new this(decoder.readFloat(this.byteWidth));
  }
  static abiDefault() {
    return this.from(0);
  }
  static random() {
    const bytes = secureRandom(this.byteWidth);
    const decoder = new ABIDecoder(bytes);
    return this.fromABI(decoder);
  }
  constructor(value) {
    this.value = value;
  }
  equals(other) {
    const self2 = this.constructor;
    return this.value === self2.from(other).value;
  }
  toABI(encoder) {
    const self2 = this.constructor;
    encoder.writeFloat(this.value, self2.byteWidth);
  }
  toString() {
    return this.value.toString();
  }
  toJSON() {
    return this.toString();
  }
}
Float.abiName = "__float";
class Float32 extends Float {
  toString() {
    return this.value.toFixed(7);
  }
}
Float32.abiName = "float32";
Float32.byteWidth = 4;
class Float64 extends Float {
}
Float64.abiName = "float64";
Float64.byteWidth = 8;
class Float128 {
  static from(value) {
    if (isInstanceOf(value, this)) {
      return value;
    }
    if (typeof value === "string" && value.startsWith("0x")) {
      value = value.slice(2);
    }
    return new this(Bytes.from(value));
  }
  static fromABI(decoder) {
    return new this(new Bytes(decoder.readArray(this.byteWidth)));
  }
  static random() {
    const bytes = secureRandom(16);
    const decoder = new ABIDecoder(bytes);
    return this.fromABI(decoder);
  }
  constructor(data) {
    if (data.array.length !== 16) {
      throw new Error("Invalid float128");
    }
    this.data = data;
  }
  equals(other) {
    const self2 = this.constructor;
    return this.data.equals(self2.from(other).data);
  }
  toABI(encoder) {
    encoder.writeArray(this.data.array);
  }
  toString() {
    return "0x" + this.data.hexString;
  }
  toJSON() {
    return this.toString();
  }
}
Float128.abiName = "float128";
Float128.byteWidth = 16;
class Name {
  /**
   * The raw representation of the name.
   * @deprecated Use value instead.
   */
  get rawValue() {
    return this.value;
  }
  /** Create a new Name instance from any of its representing types. */
  static from(value) {
    if (isInstanceOf(value, Name)) {
      return value;
    } else if (typeof value === "string") {
      return new Name(stringToName(value));
    } else if (isInstanceOf(value, UInt64)) {
      return new Name(value);
    } else {
      throw new Error("Invalid name");
    }
  }
  static fromABI(decoder) {
    return new Name(UInt64.fromABI(decoder));
  }
  static abiDefault() {
    return new this(UInt64.from(0));
  }
  constructor(value) {
    this.value = value;
  }
  /** Return true if this name is equal to passed name. */
  equals(other) {
    return this.value.equals(Name.from(other).value);
  }
  /** Return string representation of this name. */
  toString() {
    return nameToString(this.value);
  }
  toABI(encoder) {
    this.value.toABI(encoder);
  }
  /** @internal */
  toJSON() {
    return this.toString();
  }
}
Name.abiName = "name";
Name.pattern = /^[a-z1-5.]{0,13}$/;
function stringToName(s2) {
  function charToSymbol(c2) {
    if (c2 >= "a".charCodeAt(0) && c2 <= "z".charCodeAt(0)) {
      return c2 - "a".charCodeAt(0) + 6;
    }
    if (c2 >= "1".charCodeAt(0) && c2 <= "5".charCodeAt(0)) {
      return c2 - "1".charCodeAt(0) + 1;
    }
    return 0;
  }
  const a = new Uint8Array(8);
  let bit = 63;
  for (let i2 = 0; i2 < s2.length; ++i2) {
    let c2 = charToSymbol(s2.charCodeAt(i2));
    if (bit < 5) {
      c2 = c2 << 1;
    }
    for (let j2 = 4; j2 >= 0; --j2) {
      if (bit >= 0) {
        a[Math.floor(bit / 8)] |= (c2 >> j2 & 1) << bit % 8;
        --bit;
      }
    }
  }
  return UInt64.from(a);
}
function nameToString(n2) {
  const a = n2.value.toArray("le", 8);
  let result = "";
  for (let bit = 63; bit >= 0; ) {
    let c2 = 0;
    for (let i2 = 0; i2 < 5; ++i2) {
      if (bit >= 0) {
        c2 = c2 << 1 | a[Math.floor(bit / 8)] >> bit % 8 & 1;
        --bit;
      }
    }
    if (c2 >= 6) {
      result += String.fromCharCode(c2 + "a".charCodeAt(0) - 6);
    } else if (c2 >= 1) {
      result += String.fromCharCode(c2 + "1".charCodeAt(0) - 1);
    } else {
      result += ".";
    }
  }
  while (result.endsWith(".")) {
    result = result.substr(0, result.length - 1);
  }
  return result;
}
class TimePointBase {
  static from(value) {
    if (isInstanceOf(value, this)) {
      return value;
    }
    if (isInstanceOf(value, TimePointBase)) {
      return this.fromMilliseconds(value.toMilliseconds());
    }
    if (isInstanceOf(value, Date)) {
      return this.fromDate(value);
    }
    if (typeof value === "string") {
      return this.fromString(value);
    }
    return this.fromInteger(value);
  }
  static fromString(string) {
    const value = Date.parse(string + "Z");
    if (!Number.isFinite(value)) {
      throw new Error("Invalid date string");
    }
    return this.fromMilliseconds(value);
  }
  static fromDate(date) {
    return this.fromMilliseconds(date.getTime());
  }
  static abiDefault() {
    return this.from(0);
  }
  toABI(encoder) {
    const self2 = this;
    self2.value.toABI(encoder);
  }
  equals(other) {
    const self2 = this.constructor;
    return this.toMilliseconds() === self2.from(other).toMilliseconds();
  }
  toMilliseconds() {
    throw new Error("Not implemented");
  }
  toDate() {
    return new Date(this.toMilliseconds());
  }
  toJSON() {
    return this.toString();
  }
}
TimePointBase.abiName = "__time_point_base";
class TimePoint extends TimePointBase {
  static fromMilliseconds(ms) {
    return new this(Int64.from(Math.round(ms * 1e3)));
  }
  static fromInteger(value) {
    return new this(Int64.from(value));
  }
  static fromABI(decoder) {
    return new this(Int64.fromABI(decoder));
  }
  constructor(value) {
    super();
    this.value = value;
  }
  toString() {
    return this.toDate().toISOString().slice(0, -1);
  }
  toMilliseconds() {
    return Number(this.value.dividing(1e3, "round"));
  }
}
TimePoint.abiName = "time_point";
class TimePointSec extends TimePointBase {
  static fromMilliseconds(ms) {
    return new this(UInt32.from(Math.round(ms / 1e3)));
  }
  static fromInteger(value) {
    return new this(UInt32.from(value));
  }
  static fromABI(decoder) {
    return new this(UInt32.fromABI(decoder));
  }
  constructor(value) {
    super();
    this.value = value;
  }
  toString() {
    return this.toDate().toISOString().slice(0, -5);
  }
  toMilliseconds() {
    return Number(this.value.cast(UInt64).multiplying(1e3));
  }
}
TimePointSec.abiName = "time_point_sec";
class BlockTimestamp extends TimePointBase {
  static fromMilliseconds(ms) {
    return new this(UInt32.from(Math.round((ms - 9466848e5) / 500)));
  }
  static fromInteger(value) {
    return new this(UInt32.from(value));
  }
  static fromABI(decoder) {
    return new this(UInt32.fromABI(decoder));
  }
  constructor(value) {
    super();
    this.value = value;
  }
  toString() {
    return this.toDate().toISOString().slice(0, -1);
  }
  toMilliseconds() {
    return Number(this.value.cast(UInt64).multiplying(500).adding(9466848e5));
  }
}
BlockTimestamp.abiName = "block_timestamp_type";
let Asset$1 = class Asset {
  static from(value, symbol) {
    if (isInstanceOf(value, Asset)) {
      return value;
    }
    switch (typeof value) {
      case "number":
        if (!symbol) {
          throw new Error("Symbol is required when creating Asset from number");
        }
        return this.fromFloat(value, symbol);
      case "string":
        return this.fromString(value);
      default:
        throw new Error("Invalid asset");
    }
  }
  static fromString(value) {
    const parts = (typeof value === "string" ? value : "").split(" ");
    if (parts.length !== 2) {
      throw new Error("Invalid asset string");
    }
    const amount = parts[0].replace(".", "");
    const precision = (parts[0].split(".")[1] || "").length;
    const symbol = Asset.Symbol.fromParts(parts[1], precision);
    return new Asset(Int64.from(amount), symbol);
  }
  static fromFloat(value, symbol) {
    const s2 = Asset.Symbol.from(symbol);
    return new Asset(s2.convertFloat(value), s2);
  }
  static fromUnits(value, symbol) {
    return new Asset(Int64.from(value), Asset.Symbol.from(symbol));
  }
  static fromABI(decoder) {
    const units = Int64.fromABI(decoder);
    const symbol = Asset.Symbol.fromABI(decoder);
    return new Asset(units, symbol);
  }
  static abiDefault() {
    return new this(Int64.from(0), Asset.Symbol.abiDefault());
  }
  static formatUnits(units, precision) {
    const digits = Int64.from(units).toString().split("");
    let negative = false;
    if (digits[0] === "-") {
      negative = true;
      digits.shift();
    }
    while (digits.length <= precision) {
      digits.unshift("0");
    }
    if (precision > 0) {
      digits.splice(digits.length - precision, 0, ".");
    }
    let rv = digits.join("");
    if (negative) {
      rv = "-" + rv;
    }
    return rv;
  }
  constructor(units, symbol) {
    this.units = units;
    this.symbol = symbol;
  }
  equals(other) {
    const { symbol, units } = Asset.from(other);
    return this.symbol.value.equals(symbol.value) && this.units.equals(units);
  }
  get value() {
    return this.symbol.convertUnits(this.units);
  }
  set value(newValue) {
    this.units = this.symbol.convertFloat(newValue);
  }
  get quantity() {
    return Asset.formatUnits(this.units, this.symbol.precision);
  }
  toABI(encoder) {
    this.units.toABI(encoder);
    this.symbol.toABI(encoder);
  }
  toString() {
    return this.quantity + " " + this.symbol.name;
  }
  toJSON() {
    return this.toString();
  }
};
Asset$1.abiName = "asset";
(function(Asset22) {
  class Symbol2 {
    static from(value) {
      if (isInstanceOf(value, Symbol2)) {
        return value;
      }
      if (isInstanceOf(value, UInt64)) {
        return new Symbol2(value);
      }
      const parts = value.split(",");
      if (parts.length !== 2 && value !== "0,") {
        throw new Error("Invalid symbol string");
      }
      if (value === "0,") {
        parts.push("");
      }
      const precision = Number.parseInt(parts[0]);
      return Symbol2.fromParts(parts[1], precision);
    }
    static fromParts(name, precision) {
      return new Symbol2(toRawSymbol(name, precision));
    }
    // eslint-disable-next-line @typescript-eslint/ban-types
    static fromABI(decoder) {
      return new Symbol2(UInt64.fromABI(decoder));
    }
    static abiDefault() {
      return this.from("4,SYS");
    }
    constructor(value) {
      if (toSymbolPrecision(value) > Symbol2.maxPrecision) {
        throw new Error("Invalid asset symbol, precision too large");
      }
      if (!value.equals(0) && !SymbolCode.pattern.test(toSymbolName(value))) {
        throw new Error("Invalid asset symbol, name must be uppercase A-Z");
      }
      this.value = value;
    }
    equals(other) {
      return this.value.equals(Symbol2.from(other).value);
    }
    get name() {
      return toSymbolName(this.value);
    }
    get precision() {
      return toSymbolPrecision(this.value);
    }
    get code() {
      return new SymbolCode(UInt64.from(this.value.value.clone().iushrn(8)));
    }
    toABI(encoder) {
      this.value.toABI(encoder);
    }
    /**
     * Convert units to floating point number according to symbol precision.
     * @throws If the given units can't be represented in 53 bits.
     **/
    convertUnits(units) {
      return units.value.toNumber() / Math.pow(10, this.precision);
    }
    /**
     * Convert floating point to units according to symbol precision.
     * Note that the value will be rounded to closest precision.
     **/
    convertFloat(float) {
      return Int64.from(float.toFixed(this.precision).replace(".", ""));
    }
    toString() {
      return `${this.precision},${this.name}`;
    }
    toJSON() {
      return this.toString();
    }
  }
  Symbol2.abiName = "symbol";
  Symbol2.maxPrecision = 18;
  Asset22.Symbol = Symbol2;
  class SymbolCode {
    static from(value) {
      if (isInstanceOf(value, SymbolCode)) {
        return value;
      }
      if (typeof value === "string") {
        value = UInt64.from(toRawSymbolCode(value));
      }
      return new this(UInt64.from(value));
    }
    static fromABI(decoder) {
      return new SymbolCode(UInt64.fromABI(decoder));
    }
    static abiDefault() {
      return this.from("SYS");
    }
    constructor(value) {
      if (!value.equals(0) && !SymbolCode.pattern.test(toSymbolName(value))) {
        throw new Error("Invalid asset symbol, name must be uppercase A-Z");
      }
      this.value = value;
    }
    equals(other) {
      return this.value.equals(SymbolCode.from(other).value);
    }
    toABI(encoder) {
      this.value.toABI(encoder);
    }
    toString() {
      return charsToSymbolName(this.value.value.toArray("be"));
    }
    toJSON() {
      return this.toString();
    }
  }
  SymbolCode.abiName = "symbol_code";
  SymbolCode.pattern = /^[A-Z]{0,7}$/;
  Asset22.SymbolCode = SymbolCode;
})(Asset$1 || (Asset$1 = {}));
class ExtendedAsset {
  static from(value) {
    if (isInstanceOf(value, ExtendedAsset)) {
      return value;
    }
    return new this(Asset$1.from(value.quantity), Name.from(value.contract));
  }
  static fromABI(decoder) {
    return new ExtendedAsset(Asset$1.fromABI(decoder), Name.fromABI(decoder));
  }
  constructor(quantity, contract) {
    this.quantity = quantity;
    this.contract = contract;
  }
  equals(other) {
    return this.quantity.equals(other.quantity) && this.contract.equals(other.contract);
  }
  toABI(encoder) {
    this.quantity.toABI(encoder);
    this.contract.toABI(encoder);
  }
  toJSON() {
    return {
      quantity: this.quantity,
      contract: this.contract
    };
  }
}
ExtendedAsset.abiName = "extended_asset";
function toSymbolPrecision(rawSymbol) {
  return rawSymbol.value.and(UInt64.from(255).value).toNumber();
}
function toSymbolName(rawSymbol) {
  const chars = rawSymbol.value.toArray("be").slice(0, -1);
  return charsToSymbolName(chars);
}
function charsToSymbolName(chars) {
  return chars.map((char) => String.fromCharCode(char)).reverse().join("");
}
function toRawSymbol(name, precision) {
  const code = toRawSymbolCode(name);
  const bytes = new Uint8Array(code.length + 1);
  bytes[0] = precision;
  bytes.set(code, 1);
  return UInt64.from(bytes);
}
function toRawSymbolCode(name) {
  const length = Math.min(name.length, 7);
  const bytes = new Uint8Array(length);
  for (let i2 = 0; i2 < length; i2++) {
    bytes[i2] = name.charCodeAt(i2);
  }
  return bytes;
}
var Base58;
(function(Base582) {
  let ErrorCode;
  (function(ErrorCode2) {
    ErrorCode2["E_CHECKSUM"] = "E_CHECKSUM";
    ErrorCode2["E_INVALID"] = "E_INVALID";
  })(ErrorCode = Base582.ErrorCode || (Base582.ErrorCode = {}));
  class DecodingError2 extends Error {
    constructor(message, code, info = {}) {
      super(message);
      this.code = code;
      this.info = info;
    }
  }
  DecodingError2.__className = "DecodingError";
  Base582.DecodingError = DecodingError2;
  const chars = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
  const charMap = new Int16Array(255).fill(-1);
  for (let i2 = 0; i2 < 58; ++i2) {
    charMap[chars.charCodeAt(i2)] = i2;
  }
  function decode2(s2, size2) {
    if (size2 == null) {
      return decodeVar(s2);
    }
    const result = new Uint8Array(size2);
    for (let i2 = 0; i2 < s2.length; ++i2) {
      let carry = charMap[s2.charCodeAt(i2)];
      if (carry < 0) {
        throw new DecodingError2("Invalid Base58 character encountered", ErrorCode.E_INVALID, { char: s2[i2] });
      }
      for (let j2 = 0; j2 < size2; ++j2) {
        const x2 = result[j2] * 58 + carry;
        result[j2] = x2;
        carry = x2 >> 8;
      }
      if (carry) {
        throw new DecodingError2("Base58 value is out of range", ErrorCode.E_INVALID);
      }
    }
    result.reverse();
    return new Bytes(result);
  }
  Base582.decode = decode2;
  function decodeCheck(encoded, size2) {
    const decoded = decode2(encoded, size2 != null ? size2 + 4 : size2);
    const data = decoded.array.subarray(0, -4);
    const expected = decoded.array.subarray(-4);
    const actual = dsha256Checksum(data);
    if (!arrayEquals(expected, actual)) {
      throw new DecodingError2("Checksum mismatch", ErrorCode.E_CHECKSUM, {
        actual,
        expected,
        data,
        hash: "double_sha256"
      });
    }
    return new Bytes(data);
  }
  Base582.decodeCheck = decodeCheck;
  function decodeRipemd160Check(encoded, size2, suffix) {
    const decoded = decode2(encoded, size2 != null ? size2 + 4 : size2);
    const data = decoded.array.subarray(0, -4);
    const expected = decoded.array.subarray(-4);
    const actual = ripemd160Checksum(data, suffix);
    if (!arrayEquals(expected, actual)) {
      throw new DecodingError2("Checksum mismatch", ErrorCode.E_CHECKSUM, {
        actual,
        expected,
        data,
        hash: "ripemd160"
      });
    }
    return new Bytes(data);
  }
  Base582.decodeRipemd160Check = decodeRipemd160Check;
  function encode2(data) {
    data = Bytes.from(data);
    const result = [];
    for (const byte of data.array) {
      let carry = byte;
      for (let j2 = 0; j2 < result.length; ++j2) {
        const x2 = (charMap[result[j2]] << 8) + carry;
        result[j2] = chars.charCodeAt(x2 % 58);
        carry = x2 / 58 | 0;
      }
      while (carry) {
        result.push(chars.charCodeAt(carry % 58));
        carry = carry / 58 | 0;
      }
    }
    for (const byte of data.array) {
      if (byte) {
        break;
      } else {
        result.push("1".charCodeAt(0));
      }
    }
    result.reverse();
    return String.fromCharCode(...result);
  }
  Base582.encode = encode2;
  function encodeCheck(data) {
    data = Bytes.from(data);
    data = data.appending(dsha256Checksum(data.array));
    return encode2(data);
  }
  Base582.encodeCheck = encodeCheck;
  function encodeRipemd160Check(data, suffix) {
    data = Bytes.from(data);
    data = data.appending(ripemd160Checksum(data.array, suffix));
    return encode2(data);
  }
  Base582.encodeRipemd160Check = encodeRipemd160Check;
  function decodeVar(s2) {
    const result = [];
    for (let i2 = 0; i2 < s2.length; ++i2) {
      let carry = charMap[s2.charCodeAt(i2)];
      if (carry < 0) {
        throw new DecodingError2("Invalid Base58 character encountered", ErrorCode.E_INVALID, { char: s2[i2] });
      }
      for (let j2 = 0; j2 < result.length; ++j2) {
        const x2 = result[j2] * 58 + carry;
        result[j2] = x2 & 255;
        carry = x2 >> 8;
      }
      if (carry) {
        result.push(carry);
      }
    }
    for (const ch of s2) {
      if (ch === "1") {
        result.push(0);
      } else {
        break;
      }
    }
    result.reverse();
    return Bytes.from(result);
  }
  function ripemd160Checksum(data, suffix) {
    const hash2 = hashExports.ripemd160().update(data);
    if (suffix) {
      hash2.update(suffix);
    }
    return new Uint8Array(hash2.digest().slice(0, 4));
  }
  function dsha256Checksum(data) {
    const round1 = hashExports.sha256().update(data).digest();
    const round2 = hashExports.sha256().update(round1).digest();
    return new Uint8Array(round2.slice(0, 4));
  }
})(Base58 || (Base58 = {}));
class PublicKey {
  /** Create PublicKey object from representing types. */
  static from(value) {
    if (isInstanceOf(value, PublicKey)) {
      return value;
    }
    if (typeof value === "object" && value.type && value.compressed) {
      return new PublicKey(KeyType.from(value.type), new Bytes(value.compressed));
    }
    if (typeof value !== "string") {
      throw new Error("Invalid public key");
    }
    if (value.startsWith("PUB_")) {
      const parts = value.split("_");
      if (parts.length !== 3) {
        throw new Error("Invalid public key string");
      }
      const type = KeyType.from(parts[1]);
      const size2 = type === KeyType.K1 || type === KeyType.R1 ? 33 : void 0;
      const data = Base58.decodeRipemd160Check(parts[2], size2, type);
      return new PublicKey(type, data);
    } else if (value.length >= 50) {
      const data = Base58.decodeRipemd160Check(value.slice(-50));
      return new PublicKey(KeyType.K1, data);
    } else {
      throw new Error("Invalid public key string");
    }
  }
  /** @internal */
  static fromABI(decoder) {
    const type = KeyType.from(decoder.readByte());
    if (type == KeyType.WA) {
      const startPos = decoder.getPosition();
      decoder.advance(33);
      decoder.advance(1);
      decoder.advance(decoder.readVaruint32());
      const len = decoder.getPosition() - startPos;
      decoder.setPosition(startPos);
      const data = Bytes.from(decoder.readArray(len));
      return new PublicKey(KeyType.WA, data);
    }
    return new PublicKey(type, new Bytes(decoder.readArray(33)));
  }
  /** @internal */
  constructor(type, data) {
    this.type = type;
    this.data = data;
  }
  /**
   * Returns the core 33-byte compressed public key data as a Uint8Array.
   * This is suitable for cryptographic operations like verification.
   */
  getCompressedKeyBytes() {
    return this.type === KeyType.WA ? this.data.array.slice(0, 33) : this.data.array;
  }
  equals(other) {
    const otherKey = PublicKey.from(other);
    return this.type === otherKey.type && this.data.equals(otherKey.data);
  }
  /**
   * Return Antelope/EOSIO legacy (`EOS<base58data>`) formatted key.
   * @throws If the key type isn't `K1`
   */
  toLegacyString(prefix = "EOS") {
    if (this.type !== KeyType.K1) {
      throw new Error("Unable to create legacy formatted string for non-K1 key");
    }
    return `${prefix}${Base58.encodeRipemd160Check(this.data)}`;
  }
  /** Return key in modern Antelope/EOSIO format (`PUB_<type>_<base58data>`) */
  toString() {
    return `PUB_${this.type}_${Base58.encodeRipemd160Check(this.data, this.type)}`;
  }
  /** @internal */
  toABI(encoder) {
    encoder.writeByte(KeyType.indexFor(this.type));
    encoder.writeArray(this.data.array);
  }
  /** @internal */
  toJSON() {
    return this.toString();
  }
}
PublicKey.abiName = "public_key";
const curves = {};
function getCurve(type) {
  let rv = curves[type];
  if (!rv) {
    if (type === "K1") {
      rv = curves[type] = new ellipticExports.ec("secp256k1");
    } else if (type === "R1") {
      rv = curves[type] = new ellipticExports.ec("p256");
    } else if (type === "WA") {
      rv = curves[type] = new ellipticExports.ec("p256");
    } else {
      throw new Error(`Unknown curve type: ${type}`);
    }
  }
  return rv;
}
function recover(signature2, message, type) {
  if (type === KeyType.WA) {
    throw new Error(`can't recover webauthn public keys, please use @wharfkit/webauthn.`);
  }
  const curve2 = getCurve(type);
  const recid = signature2[0] - 31;
  const r = signature2.subarray(1, 33);
  const s2 = signature2.subarray(33, 33 + 32);
  const point = curve2.recoverPubKey(message, { r, s: s2 }, recid);
  return new Uint8Array(point.encodeCompressed());
}
function verify(signature2, message, pubkey, type) {
  const curve2 = getCurve(type);
  const r = signature2.subarray(1, 33);
  const s2 = signature2.subarray(33, 33 + 32);
  return curve2.verify(message, { r, s: s2 }, pubkey);
}
class Signature {
  /** Create Signature object from representing types. */
  static from(value) {
    if (isInstanceOf(value, Signature)) {
      return value;
    }
    if (typeof value === "object" && value.r && value.s) {
      const data = new Uint8Array(1 + 32 + 32);
      let recid = value.recid;
      const type = KeyType.from(value.type);
      if (value.type === KeyType.K1 || value.type === KeyType.R1) {
        recid += 31;
      }
      data[0] = recid;
      data.set(value.r, 1);
      data.set(value.s, 33);
      return new Signature(type, new Bytes(data));
    }
    if (typeof value !== "string") {
      throw new Error("Invalid signature");
    }
    if (value.startsWith("SIG_")) {
      const parts = value.split("_");
      if (parts.length !== 3) {
        throw new Error("Invalid signature string");
      }
      const type = KeyType.from(parts[1]);
      const size2 = type === KeyType.K1 || type === KeyType.R1 ? 65 : void 0;
      const data = Base58.decodeRipemd160Check(parts[2], size2, type);
      return new Signature(type, data);
    } else {
      throw new Error("Invalid signature string");
    }
  }
  /** @internal */
  static fromABI(decoder) {
    const type = KeyType.from(decoder.readByte());
    if (type === KeyType.WA) {
      const startPos = decoder.getPosition();
      decoder.advance(65);
      decoder.advance(decoder.readVaruint32());
      decoder.advance(decoder.readVaruint32());
      const len = decoder.getPosition() - startPos;
      decoder.setPosition(startPos);
      const data = Bytes.from(decoder.readArray(len));
      return new Signature(KeyType.WA, data);
    }
    return new Signature(type, new Bytes(decoder.readArray(65)));
  }
  /** @internal */
  constructor(type, data) {
    this.type = type;
    this.data = data;
  }
  equals(other) {
    const otherSig = Signature.from(other);
    return this.type === otherSig.type && this.data.equals(otherSig.data);
  }
  /** Recover public key from given message digest. */
  recoverDigest(digest) {
    digest = Checksum256.from(digest);
    const compressed = recover(this.data.array, digest.array, this.type);
    return PublicKey.from({ compressed, type: this.type });
  }
  /** Recover public key from given message. */
  recoverMessage(message) {
    return this.recoverDigest(Checksum256.hash(message));
  }
  /** Verify this signature with given message digest and public key. */
  verifyDigest(digest, publicKey) {
    digest = Checksum256.from(digest);
    return verify(this.data.array, digest.array, publicKey.getCompressedKeyBytes(), this.type);
  }
  /** Verify this signature with given message and public key. */
  verifyMessage(message, publicKey) {
    return this.verifyDigest(Checksum256.hash(message), publicKey);
  }
  /** Base58check encoded string representation of this signature (`SIG_<type>_<data>`). */
  toString() {
    return `SIG_${this.type}_${Base58.encodeRipemd160Check(this.data, this.type)}`;
  }
  /** @internal */
  toABI(encoder) {
    encoder.writeByte(KeyType.indexFor(this.type));
    encoder.writeArray(this.data.array);
  }
  /** @internal */
  toJSON() {
    return this.toString();
  }
}
Signature.abiName = "signature";
function getPublic(privkey, type) {
  const curve2 = getCurve(type);
  const key2 = curve2.keyFromPrivate(privkey);
  const point = key2.getPublic();
  return new Uint8Array(point.encodeCompressed());
}
function sharedSecret(privkey, pubkey, type) {
  const curve2 = getCurve(type);
  const priv = curve2.keyFromPrivate(privkey);
  const pub = curve2.keyFromPublic(pubkey).getPublic();
  return priv.derive(pub).toArrayLike(Uint8Array, "be");
}
function sign(secret, message, type) {
  const curve2 = getCurve(type);
  const key2 = curve2.keyFromPrivate(secret);
  let sig;
  let r;
  let s2;
  if (type === "K1") {
    let attempt = 1;
    do {
      sig = key2.sign(message, { canonical: true, pers: [attempt++] });
      r = sig.r.toArrayLike(Uint8Array, "be", 32);
      s2 = sig.s.toArrayLike(Uint8Array, "be", 32);
    } while (!isCanonical(r, s2));
  } else {
    sig = key2.sign(message, { canonical: true });
    r = sig.r.toArrayLike(Uint8Array, "be", 32);
    s2 = sig.s.toArrayLike(Uint8Array, "be", 32);
  }
  return { type, r, s: s2, recid: sig.recoveryParam || 0 };
}
function isCanonical(r, s2) {
  return !(r[0] & 128) && !(r[0] === 0 && !(r[1] & 128)) && !(s2[0] & 128) && !(s2[0] === 0 && !(s2[1] & 128));
}
function generate$1(type) {
  const curve2 = getCurve(type);
  const privkey = curve2.genKeyPair().getPrivate();
  return privkey.toArrayLike(Uint8Array, "be", 32);
}
class PrivateKey {
  /** Create PrivateKey object from representing types. */
  static from(value) {
    if (isInstanceOf(value, PrivateKey)) {
      return value;
    } else {
      return this.fromString(value);
    }
  }
  /**
   * Create PrivateKey object from a string representation.
   * Accepts WIF (5...) and Antelope/EOSIO (PVT_...) style private keys.
   */
  static fromString(string, ignoreChecksumError = false) {
    try {
      const { type, data } = decodeKey(string);
      if (this.isAllZero(data)) {
        throw new Error("Invalid private key: All-zero private key is not allowed");
      }
      return new this(type, data);
    } catch (error2) {
      error2.message = `Invalid private key (${error2.message})`;
      if (ignoreChecksumError && isInstanceOf(error2, Base58.DecodingError) && error2.code === Base58.ErrorCode.E_CHECKSUM) {
        const type = string.startsWith("PVT_R1") ? KeyType.R1 : KeyType.K1;
        const data = new Bytes(error2.info.data);
        if (data.length === 33) {
          data.dropFirst();
        }
        data.zeropad(32, true);
        if (this.isAllZero(data)) {
          throw new Error("Invalid private key: All-zero private key is not allowed");
        }
        return new this(type, data);
      }
      throw error2;
    }
  }
  /**
   * Generate new PrivateKey.
   * @throws If a secure random source isn't available.
   */
  static generate(type) {
    const keyType = KeyType.from(type);
    const maxRetries = 3;
    let attempts = 0;
    let data;
    do {
      if (attempts >= maxRetries) {
        throw new Error("Failed to generate valid private key: Maximum retries exceeded");
      }
      data = new Bytes(generate$1(keyType));
      attempts++;
    } while (this.isAllZero(data));
    return new PrivateKey(keyType, data);
  }
  /** @internal */
  constructor(type, data) {
    if ((type === KeyType.K1 || type === KeyType.R1) && data.length !== 32) {
      throw new Error("Invalid private key length");
    }
    this.type = type;
    this.data = data;
  }
  /**
   * Sign message digest using this key.
   * @throws If the key type isn't R1 or K1.
   */
  signDigest(digest) {
    digest = Checksum256.from(digest);
    return Signature.from(sign(this.data.array, digest.array, this.type));
  }
  /**
   * Sign message using this key.
   * @throws If the key type isn't R1 or K1.
   */
  signMessage(message) {
    return this.signDigest(Checksum256.hash(message));
  }
  /**
   * Derive the shared secret between this private key and given public key.
   * @throws If the key type isn't R1 or K1.
   */
  sharedSecret(publicKey) {
    const shared = sharedSecret(this.data.array, publicKey.data.array, this.type);
    return Checksum512.hash(shared);
  }
  /**
   * Get the corresponding public key.
   * @throws If the key type isn't R1 or K1.
   */
  toPublic() {
    const compressed = getPublic(this.data.array, this.type);
    return PublicKey.from({ compressed, type: this.type });
  }
  /**
   * Return WIF representation of this private key
   * @throws If the key type isn't K1.
   */
  toWif() {
    if (this.type !== KeyType.K1) {
      throw new Error("Unable to generate WIF for non-k1 key");
    }
    return Base58.encodeCheck(Bytes.from([128]).appending(this.data));
  }
  static isAllZero(data) {
    return data.array.every((byte) => byte === 0);
  }
  /**
   * Return the key in Antelope/EOSIO PVT_<type>_<base58check> format.
   */
  toString() {
    return `PVT_${this.type}_${Base58.encodeRipemd160Check(this.data, this.type)}`;
  }
  toJSON() {
    return this.toString();
  }
}
function decodeKey(value) {
  const type = typeof value;
  if (type !== "string") {
    throw new Error(`Expected string, got ${type}`);
  }
  if (value.startsWith("PVT_")) {
    const parts = value.split("_");
    if (parts.length !== 3) {
      throw new Error("Invalid PVT format");
    }
    const type2 = KeyType.from(parts[1]);
    let size2;
    switch (type2) {
      case KeyType.K1:
      case KeyType.R1:
        size2 = 32;
        break;
    }
    const data = Base58.decodeRipemd160Check(parts[2], size2, type2);
    return { type: type2, data };
  } else {
    const type2 = KeyType.K1;
    const data = Base58.decodeCheck(value);
    if (data.array[0] !== 128) {
      throw new Error("Invalid WIF");
    }
    return { type: type2, data: data.droppingFirst() };
  }
}
var PermissionLevel_1;
let PermissionLevel = PermissionLevel_1 = class PermissionLevel2 extends Struct {
  /** Create new permission level from representing types. Can be expressed as a string in the format `<actor>@<permission>`. */
  static from(value) {
    if (typeof value === "string") {
      const parts = value.split("@");
      if (parts.length !== 2 && parts[0].length > 0 && parts[1].length > 0) {
        throw new Error("Invalid permission level string, should be in the format <actor>@<permission>");
      }
      value = { actor: parts[0], permission: parts[1] };
    }
    return super.from(value);
  }
  /** Return true if this permission level equals other. */
  equals(other) {
    const otherPerm = PermissionLevel_1.from(other);
    return this.actor.equals(otherPerm.actor) && this.permission.equals(otherPerm.permission);
  }
  toString() {
    return `${this.actor}@${this.permission}`;
  }
};
__decorate$1([
  Struct.field("name")
], PermissionLevel.prototype, "actor", void 0);
__decorate$1([
  Struct.field("name")
], PermissionLevel.prototype, "permission", void 0);
PermissionLevel = PermissionLevel_1 = __decorate$1([
  Struct.type("permission_level")
], PermissionLevel);
var Action_1;
let Action = Action_1 = class Action2 extends Struct {
  static from(anyAction, abi) {
    let object = { ...anyAction };
    const data = object.data;
    if (!Bytes.isBytes(data)) {
      let type;
      if (abi) {
        type = ABI.from(abi).getActionType(object.name);
        if (!type) {
          throw new Error(`The action "${object.name}" does not exist on the ABI provided.`);
        }
      } else if (!data.constructor || data.constructor.abiName === void 0) {
        throw new Error("Missing ABI definition when creating action with untyped action data");
      }
      object = {
        ...object,
        data: abiEncode({ object: data, type, abi })
      };
    }
    const action = super.from(object);
    if (abi) {
      action.abi = ABI.from(abi);
    } else {
      const type = getType(data);
      if (type) {
        action.abi = ABI.from({
          ...synthesizeABI(type).abi,
          actions: [
            {
              name: action.name,
              type: type.abiName,
              ricardian_contract: ""
            }
          ]
        });
      }
    }
    return action;
  }
  /** Return true if this Action is equal to given action. */
  equals(other) {
    const otherAction = Action_1.from(other, this.abi);
    return this.account.equals(otherAction.account) && this.name.equals(otherAction.name) && arrayEquatableEquals(this.authorization, otherAction.authorization) && this.data.equals(otherAction.data);
  }
  decodeData(typeOrAbi) {
    if (typeof typeOrAbi === "string" || typeOrAbi.abiName) {
      return abiDecode({
        data: this.data,
        type: typeOrAbi
      });
    } else {
      const abi = ABI.from(typeOrAbi);
      const type = abi.getActionType(this.name);
      if (!type) {
        throw new Error(`Action ${this.name} does not exist in provided ABI`);
      }
      return abiDecode({ data: this.data, type, abi });
    }
  }
  get decoded() {
    if (!this.abi) {
      throw new Error("Missing ABI definition when decoding action data");
    }
    return {
      ...this.toJSON(),
      data: this.decodeData(this.abi)
    };
  }
};
__decorate$1([
  Struct.field("name")
], Action.prototype, "account", void 0);
__decorate$1([
  Struct.field("name")
], Action.prototype, "name", void 0);
__decorate$1([
  Struct.field(PermissionLevel, { array: true })
], Action.prototype, "authorization", void 0);
__decorate$1([
  Struct.field("bytes")
], Action.prototype, "data", void 0);
Action = Action_1 = __decorate$1([
  Struct.type("action")
], Action);
var Transaction_1;
let TransactionExtension = class TransactionExtension2 extends Struct {
};
__decorate$1([
  Struct.field("uint16")
], TransactionExtension.prototype, "type", void 0);
__decorate$1([
  Struct.field("bytes")
], TransactionExtension.prototype, "data", void 0);
TransactionExtension = __decorate$1([
  Struct.type("transaction_extension")
], TransactionExtension);
let TransactionHeader = class TransactionHeader2 extends Struct {
  static from(object) {
    return super.from({
      max_net_usage_words: 0,
      max_cpu_usage_ms: 0,
      delay_sec: 0,
      ...object
    });
  }
};
__decorate$1([
  Struct.field("time_point_sec")
], TransactionHeader.prototype, "expiration", void 0);
__decorate$1([
  Struct.field("uint16")
], TransactionHeader.prototype, "ref_block_num", void 0);
__decorate$1([
  Struct.field("uint32")
], TransactionHeader.prototype, "ref_block_prefix", void 0);
__decorate$1([
  Struct.field("varuint32")
], TransactionHeader.prototype, "max_net_usage_words", void 0);
__decorate$1([
  Struct.field("uint8")
], TransactionHeader.prototype, "max_cpu_usage_ms", void 0);
__decorate$1([
  Struct.field("varuint32")
], TransactionHeader.prototype, "delay_sec", void 0);
TransactionHeader = __decorate$1([
  Struct.type("transaction_header")
], TransactionHeader);
let Transaction = Transaction_1 = class Transaction2 extends TransactionHeader {
  static from(object, abis) {
    const abiFor = (contract) => {
      if (!abis) {
        return;
      } else if (Array.isArray(abis)) {
        return abis.filter((abi) => Name.from(abi.contract).equals(contract)).map(({ abi }) => abi)[0];
      } else {
        return abis;
      }
    };
    const resolveAction = (action) => {
      if (action instanceof Action) {
        return action;
      } else {
        return Action.from(action, abiFor(action.account));
      }
    };
    const actions = (object.actions || []).map(resolveAction);
    const context_free_actions = (object.context_free_actions || []).map(resolveAction);
    const transaction = {
      transaction_extensions: [],
      ...object,
      context_free_actions,
      actions
    };
    return super.from(transaction);
  }
  /** Return true if this transaction is equal to given transaction. */
  equals(other) {
    const tx = Transaction_1.from(other);
    return this.id.equals(tx.id);
  }
  get id() {
    return Checksum256.hash(abiEncode({ object: this }));
  }
  signingDigest(chainId) {
    const data = this.signingData(chainId);
    return Checksum256.hash(data);
  }
  signingData(chainId) {
    let data = Bytes.from(Checksum256.from(chainId).array);
    data = data.appending(abiEncode({ object: this }));
    data = data.appending(new Uint8Array(32));
    return data;
  }
};
__decorate$1([
  Struct.field(Action, { array: true })
], Transaction.prototype, "context_free_actions", void 0);
__decorate$1([
  Struct.field(Action, { array: true })
], Transaction.prototype, "actions", void 0);
__decorate$1([
  Struct.field(TransactionExtension, { array: true })
], Transaction.prototype, "transaction_extensions", void 0);
Transaction = Transaction_1 = __decorate$1([
  Struct.type("transaction")
], Transaction);
let SignedTransaction = class SignedTransaction2 extends Transaction {
  /** The transaction without the signatures. */
  get transaction() {
    return Transaction.from({
      ...this,
      signatures: void 0,
      context_free_data: void 0
    });
  }
  get id() {
    return this.transaction.id;
  }
  static from(object) {
    return super.from({
      signatures: [],
      context_free_data: [],
      ...object
    });
  }
};
__decorate$1([
  Struct.field("signature[]")
], SignedTransaction.prototype, "signatures", void 0);
__decorate$1([
  Struct.field("bytes[]")
], SignedTransaction.prototype, "context_free_data", void 0);
SignedTransaction = __decorate$1([
  Struct.type("signed_transaction")
], SignedTransaction);
var CompressionType;
(function(CompressionType2) {
  CompressionType2[CompressionType2["none"] = 0] = "none";
  CompressionType2[CompressionType2["zlib"] = 1] = "zlib";
})(CompressionType || (CompressionType = {}));
let PackedTransaction = class PackedTransaction2 extends Struct {
  static from(object) {
    return super.from({
      signatures: [],
      packed_context_free_data: "",
      compression: 0,
      ...object
    });
  }
  static fromSigned(signed, compression = 1) {
    let packed_trx = abiEncode({ object: Transaction.from(signed) });
    let packed_context_free_data = abiEncode({
      object: signed.context_free_data,
      type: "bytes[]"
    });
    switch (compression) {
      case CompressionType.zlib: {
        packed_trx = pako.deflate(packed_trx.array);
        packed_context_free_data = pako.deflate(packed_context_free_data.array);
        break;
      }
      case CompressionType.none: {
        break;
      }
    }
    return this.from({
      compression,
      signatures: signed.signatures,
      packed_context_free_data,
      packed_trx
    });
  }
  getTransaction() {
    switch (Number(this.compression)) {
      // none
      case CompressionType.none: {
        return abiDecode({ data: this.packed_trx, type: Transaction });
      }
      // zlib compressed
      case CompressionType.zlib: {
        const inflated = pako.inflate(this.packed_trx.array);
        return abiDecode({ data: inflated, type: Transaction });
      }
      default: {
        throw new Error(`Unknown transaction compression ${this.compression}`);
      }
    }
  }
  getSignedTransaction() {
    const transaction = this.getTransaction();
    return SignedTransaction.from({
      ...transaction,
      signatures: this.signatures
    });
  }
};
__decorate$1([
  Struct.field("signature[]")
], PackedTransaction.prototype, "signatures", void 0);
__decorate$1([
  Struct.field("uint8")
], PackedTransaction.prototype, "compression", void 0);
__decorate$1([
  Struct.field("bytes")
], PackedTransaction.prototype, "packed_context_free_data", void 0);
__decorate$1([
  Struct.field("bytes")
], PackedTransaction.prototype, "packed_trx", void 0);
PackedTransaction = __decorate$1([
  Struct.type("packed_transaction")
], PackedTransaction);
let TransactionReceipt = class TransactionReceipt2 extends Struct {
};
__decorate$1([
  Struct.field("string")
], TransactionReceipt.prototype, "status", void 0);
__decorate$1([
  Struct.field("uint32")
], TransactionReceipt.prototype, "cpu_usage_us", void 0);
__decorate$1([
  Struct.field("uint32")
], TransactionReceipt.prototype, "net_usage_words", void 0);
TransactionReceipt = __decorate$1([
  Struct.type("transaction_receipt")
], TransactionReceipt);
var Authority_1;
let Weight = class Weight2 extends UInt16 {
};
Weight = __decorate$1([
  TypeAlias("weight_type")
], Weight);
let KeyWeight = class KeyWeight2 extends Struct {
};
__decorate$1([
  Struct.field(PublicKey)
], KeyWeight.prototype, "key", void 0);
__decorate$1([
  Struct.field(Weight)
], KeyWeight.prototype, "weight", void 0);
KeyWeight = __decorate$1([
  Struct.type("key_weight")
], KeyWeight);
let PermissionLevelWeight = class PermissionLevelWeight2 extends Struct {
};
__decorate$1([
  Struct.field(PermissionLevel)
], PermissionLevelWeight.prototype, "permission", void 0);
__decorate$1([
  Struct.field(Weight)
], PermissionLevelWeight.prototype, "weight", void 0);
PermissionLevelWeight = __decorate$1([
  Struct.type("permission_level_weight")
], PermissionLevelWeight);
let WaitWeight = class WaitWeight2 extends Struct {
};
__decorate$1([
  Struct.field(UInt32)
], WaitWeight.prototype, "wait_sec", void 0);
__decorate$1([
  Struct.field(Weight)
], WaitWeight.prototype, "weight", void 0);
WaitWeight = __decorate$1([
  Struct.type("wait_weight")
], WaitWeight);
let Authority = Authority_1 = class Authority2 extends Struct {
  static from(value) {
    if (isInstanceOf(value, Authority_1)) {
      return value;
    }
    const rv = super.from({
      keys: [],
      accounts: [],
      waits: [],
      ...value
    });
    rv.sort();
    return rv;
  }
  /** Total weight of all waits. */
  get waitThreshold() {
    return this.waits.reduce((val, wait2) => val + wait2.weight.toNumber(), 0);
  }
  /** Weight a key needs to sign for this authority. */
  get keyThreshold() {
    return this.threshold.toNumber() - this.waitThreshold;
  }
  /** Return the weight for given public key, or zero if it is not included in this authority. */
  keyWeight(publicKey) {
    const weight = this.keys.find(({ key: key2 }) => key2.equals(publicKey));
    return weight ? weight.weight.toNumber() : 0;
  }
  /**
   * Check if given public key has permission in this authority,
   * @attention Does not take indirect permissions for the key via account weights into account.
   * @param publicKey The key to check.
   * @param includePartial Whether to consider auths where the key is included but can't be reached alone (e.g. multisig).
   */
  hasPermission(publicKey, includePartial = false) {
    const threshold = includePartial ? 1 : this.keyThreshold;
    const weight = this.keyWeight(publicKey);
    return weight >= threshold;
  }
  /**
   * Sorts the authority weights in place, should be called before including the authority in a `updateauth` action or it might be rejected.
   */
  sort() {
    this.keys.sort((a, b) => String(a.key).localeCompare(String(b.key)));
    this.accounts.sort((a, b) => String(a.permission).localeCompare(String(b.permission)));
    this.waits.sort((a, b) => String(a.wait_sec).localeCompare(String(b.wait_sec)));
  }
};
__decorate$1([
  Struct.field(UInt32)
], Authority.prototype, "threshold", void 0);
__decorate$1([
  Struct.field(KeyWeight, { array: true })
], Authority.prototype, "keys", void 0);
__decorate$1([
  Struct.field(PermissionLevelWeight, { array: true })
], Authority.prototype, "accounts", void 0);
__decorate$1([
  Struct.field(WaitWeight, { array: true })
], Authority.prototype, "waits", void 0);
Authority = Authority_1 = __decorate$1([
  Struct.type("authority")
], Authority);
class BlockId {
  static from(value) {
    if (isInstanceOf(value, this)) {
      return value;
    }
    if (Bytes.isBytes(value)) {
      return new this(Bytes.from(value).array);
    } else {
      return this.fromBlockChecksum(value.checksum, value.blockNum);
    }
  }
  static fromABI(decoder) {
    return new this(decoder.readArray(32));
  }
  static fromBlockChecksum(checksum, blockNum) {
    const id = new BlockId(Checksum256.from(checksum).array);
    const numBuffer = new Uint8Array(4);
    numBuffer[0] = Number(blockNum) >> 24 & 255;
    numBuffer[1] = Number(blockNum) >> 16 & 255;
    numBuffer[2] = Number(blockNum) >> 8 & 255;
    numBuffer[3] = Number(blockNum) & 255;
    id.array.set(numBuffer, 0);
    return id;
  }
  constructor(array) {
    if (array.byteLength !== 32) {
      throw new Error(`BlockId size mismatch, expected 32 bytes got ${array.byteLength}`);
    }
    this.array = array;
  }
  equals(other) {
    const self2 = this.constructor;
    try {
      return arrayEquals(this.array, self2.from(other).array);
    } catch {
      return false;
    }
  }
  toABI(encoder) {
    encoder.writeArray(this.array);
  }
  toString() {
    return this.hexString;
  }
  toJSON() {
    return this.toString();
  }
  get hexString() {
    return arrayToHex(this.array);
  }
  get blockNum() {
    const bytes = this.array.slice(0, 4);
    let num = 0;
    for (let i2 = 0; i2 < 4; i2++) {
      num = (num << 8) + bytes[i2];
    }
    return UInt32.from(num);
  }
}
BlockId.abiName = "block_id_type";
var Serializer;
(function(Serializer2) {
  Serializer2.encode = abiEncode;
  Serializer2.decode = abiDecode;
  function synthesize(type) {
    return synthesizeABI(type).abi;
  }
  Serializer2.synthesize = synthesize;
  function stringify(object) {
    return JSON.stringify(object);
  }
  Serializer2.stringify = stringify;
  function objectify(object) {
    const walk = (v2) => {
      switch (typeof v2) {
        case "boolean":
        case "number":
        case "string":
          return v2;
        case "object": {
          if (v2 === null) {
            return v2;
          }
          if (typeof v2.toJSON === "function") {
            return walk(v2.toJSON());
          }
          if (Array.isArray(v2)) {
            return v2.map(walk);
          }
          const rv = {};
          for (const key2 of Object.keys(v2)) {
            rv[key2] = walk(v2[key2]);
          }
          return rv;
        }
      }
    };
    return walk(object);
  }
  Serializer2.objectify = objectify;
})(Serializer || (Serializer = {}));
class FetchProvider {
  constructor(url, options = {}) {
    this.headers = {};
    url = url.trim();
    if (url.endsWith("/"))
      url = url.slice(0, -1);
    this.url = url;
    if (options.headers) {
      this.headers = options.headers;
    }
    if (!options.fetch) {
      if (typeof window !== "undefined" && window.fetch) {
        this.fetch = window.fetch.bind(window);
      } else if (typeof globalThis !== "undefined" && globalThis.fetch) {
        this.fetch = globalThis.fetch.bind(globalThis);
      } else {
        throw new Error("Missing fetch");
      }
    } else {
      this.fetch = options.fetch;
    }
  }
  async call(args) {
    const url = this.url + args.path;
    const reqBody = args.params !== void 0 ? JSON.stringify(args.params) : void 0;
    const reqHeaders = {
      ...this.headers,
      ...args.headers
    };
    const response = await this.fetch(url, {
      method: args.method || "POST",
      body: reqBody,
      headers: reqHeaders
    });
    const text2 = await response.text();
    let json;
    try {
      json = JSON.parse(text2);
    } catch {
    }
    const headers = {};
    for (const [key2, value] of response.headers.entries()) {
      headers[key2] = value;
    }
    return { headers, status: response.status, json, text: text2 };
  }
}
let AccountLinkedAction = class AccountLinkedAction2 extends Struct {
};
__decorate$1([
  Struct.field("name")
], AccountLinkedAction.prototype, "account", void 0);
__decorate$1([
  Struct.field("name", { optional: true })
], AccountLinkedAction.prototype, "action", void 0);
AccountLinkedAction = __decorate$1([
  Struct.type("account_linked_action")
], AccountLinkedAction);
let AccountPermission = class AccountPermission2 extends Struct {
};
__decorate$1([
  Struct.field("name")
], AccountPermission.prototype, "perm_name", void 0);
__decorate$1([
  Struct.field("name")
], AccountPermission.prototype, "parent", void 0);
__decorate$1([
  Struct.field(Authority)
], AccountPermission.prototype, "required_auth", void 0);
__decorate$1([
  Struct.field(AccountLinkedAction, { optional: true, array: true })
], AccountPermission.prototype, "linked_actions", void 0);
AccountPermission = __decorate$1([
  Struct.type("account_permission")
], AccountPermission);
let AccountResourceLimit = class AccountResourceLimit2 extends Struct {
};
__decorate$1([
  Struct.field("int64")
], AccountResourceLimit.prototype, "used", void 0);
__decorate$1([
  Struct.field("int64")
], AccountResourceLimit.prototype, "available", void 0);
__decorate$1([
  Struct.field("int64")
], AccountResourceLimit.prototype, "max", void 0);
__decorate$1([
  Struct.field("time_point", { optional: true })
], AccountResourceLimit.prototype, "last_usage_update_time", void 0);
__decorate$1([
  Struct.field("int64", { optional: true })
], AccountResourceLimit.prototype, "current_used", void 0);
AccountResourceLimit = __decorate$1([
  Struct.type("account_resource_limit")
], AccountResourceLimit);
let AccountTotalResources = class AccountTotalResources2 extends Struct {
};
__decorate$1([
  Struct.field("name")
], AccountTotalResources.prototype, "owner", void 0);
__decorate$1([
  Struct.field("asset")
], AccountTotalResources.prototype, "net_weight", void 0);
__decorate$1([
  Struct.field("asset")
], AccountTotalResources.prototype, "cpu_weight", void 0);
__decorate$1([
  Struct.field("uint64")
], AccountTotalResources.prototype, "ram_bytes", void 0);
AccountTotalResources = __decorate$1([
  Struct.type("account_total_resources")
], AccountTotalResources);
let AccountSelfDelegatedBandwidth = class AccountSelfDelegatedBandwidth2 extends Struct {
};
__decorate$1([
  Struct.field("name")
], AccountSelfDelegatedBandwidth.prototype, "from", void 0);
__decorate$1([
  Struct.field("name")
], AccountSelfDelegatedBandwidth.prototype, "to", void 0);
__decorate$1([
  Struct.field("asset")
], AccountSelfDelegatedBandwidth.prototype, "net_weight", void 0);
__decorate$1([
  Struct.field("asset")
], AccountSelfDelegatedBandwidth.prototype, "cpu_weight", void 0);
AccountSelfDelegatedBandwidth = __decorate$1([
  Struct.type("account_self_delegated_bandwidth")
], AccountSelfDelegatedBandwidth);
let AccountRefundRequest = class AccountRefundRequest2 extends Struct {
};
__decorate$1([
  Struct.field("name")
], AccountRefundRequest.prototype, "owner", void 0);
__decorate$1([
  Struct.field("time_point")
], AccountRefundRequest.prototype, "request_time", void 0);
__decorate$1([
  Struct.field("asset")
], AccountRefundRequest.prototype, "net_amount", void 0);
__decorate$1([
  Struct.field("asset")
], AccountRefundRequest.prototype, "cpu_amount", void 0);
AccountRefundRequest = __decorate$1([
  Struct.type("account_refund_request")
], AccountRefundRequest);
let AccountVoterInfo = class AccountVoterInfo2 extends Struct {
};
__decorate$1([
  Struct.field("name")
], AccountVoterInfo.prototype, "owner", void 0);
__decorate$1([
  Struct.field("name")
], AccountVoterInfo.prototype, "proxy", void 0);
__decorate$1([
  Struct.field("name", { array: true })
], AccountVoterInfo.prototype, "producers", void 0);
__decorate$1([
  Struct.field("int64", { optional: true })
], AccountVoterInfo.prototype, "staked", void 0);
__decorate$1([
  Struct.field("float64")
], AccountVoterInfo.prototype, "last_vote_weight", void 0);
__decorate$1([
  Struct.field("float64")
], AccountVoterInfo.prototype, "proxied_vote_weight", void 0);
__decorate$1([
  Struct.field("bool")
], AccountVoterInfo.prototype, "is_proxy", void 0);
__decorate$1([
  Struct.field("uint32", { optional: true })
], AccountVoterInfo.prototype, "flags1", void 0);
__decorate$1([
  Struct.field("uint32")
], AccountVoterInfo.prototype, "reserved2", void 0);
__decorate$1([
  Struct.field("string")
], AccountVoterInfo.prototype, "reserved3", void 0);
AccountVoterInfo = __decorate$1([
  Struct.type("account_voter_info")
], AccountVoterInfo);
let AccountRexInfoMaturities = class AccountRexInfoMaturities2 extends Struct {
};
__decorate$1([
  Struct.field("time_point", { optional: true })
], AccountRexInfoMaturities.prototype, "key", void 0);
__decorate$1([
  Struct.field("int64", { optional: true })
], AccountRexInfoMaturities.prototype, "value", void 0);
__decorate$1([
  Struct.field("time_point", { optional: true })
], AccountRexInfoMaturities.prototype, "first", void 0);
__decorate$1([
  Struct.field("int64", { optional: true })
], AccountRexInfoMaturities.prototype, "second", void 0);
AccountRexInfoMaturities = __decorate$1([
  Struct.type("account_rex_info_maturities")
], AccountRexInfoMaturities);
let AccountRexInfo = class AccountRexInfo2 extends Struct {
};
__decorate$1([
  Struct.field("uint32")
], AccountRexInfo.prototype, "version", void 0);
__decorate$1([
  Struct.field("name")
], AccountRexInfo.prototype, "owner", void 0);
__decorate$1([
  Struct.field("asset")
], AccountRexInfo.prototype, "vote_stake", void 0);
__decorate$1([
  Struct.field("asset")
], AccountRexInfo.prototype, "rex_balance", void 0);
__decorate$1([
  Struct.field("int64")
], AccountRexInfo.prototype, "matured_rex", void 0);
__decorate$1([
  Struct.field(AccountRexInfoMaturities, { array: true })
], AccountRexInfo.prototype, "rex_maturities", void 0);
AccountRexInfo = __decorate$1([
  Struct.type("account_rex_info")
], AccountRexInfo);
let GetRawAbiResponse = class GetRawAbiResponse2 extends Struct {
};
__decorate$1([
  Struct.field("name")
], GetRawAbiResponse.prototype, "account_name", void 0);
__decorate$1([
  Struct.field("checksum256")
], GetRawAbiResponse.prototype, "code_hash", void 0);
__decorate$1([
  Struct.field("checksum256")
], GetRawAbiResponse.prototype, "abi_hash", void 0);
__decorate$1([
  Struct.field(Blob)
], GetRawAbiResponse.prototype, "abi", void 0);
GetRawAbiResponse = __decorate$1([
  Struct.type("get_raw_abi_response")
], GetRawAbiResponse);
let AccountObject = class AccountObject2 extends Struct {
  getPermission(permission) {
    const name = Name.from(permission);
    const match = this.permissions.find((p2) => p2.perm_name.equals(name));
    if (!match) {
      throw new Error(`Unknown permission ${name} on account ${this.account_name}.`);
    }
    return match;
  }
};
__decorate$1([
  Struct.field("name")
], AccountObject.prototype, "account_name", void 0);
__decorate$1([
  Struct.field("uint32")
], AccountObject.prototype, "head_block_num", void 0);
__decorate$1([
  Struct.field("time_point")
], AccountObject.prototype, "head_block_time", void 0);
__decorate$1([
  Struct.field("bool")
], AccountObject.prototype, "privileged", void 0);
__decorate$1([
  Struct.field("time_point")
], AccountObject.prototype, "last_code_update", void 0);
__decorate$1([
  Struct.field("time_point")
], AccountObject.prototype, "created", void 0);
__decorate$1([
  Struct.field("asset?")
], AccountObject.prototype, "core_liquid_balance", void 0);
__decorate$1([
  Struct.field("int64")
], AccountObject.prototype, "ram_quota", void 0);
__decorate$1([
  Struct.field("int64")
], AccountObject.prototype, "net_weight", void 0);
__decorate$1([
  Struct.field("int64")
], AccountObject.prototype, "cpu_weight", void 0);
__decorate$1([
  Struct.field(AccountResourceLimit)
], AccountObject.prototype, "net_limit", void 0);
__decorate$1([
  Struct.field(AccountResourceLimit)
], AccountObject.prototype, "cpu_limit", void 0);
__decorate$1([
  Struct.field(AccountResourceLimit, { optional: true })
], AccountObject.prototype, "subjective_cpu_bill_limit", void 0);
__decorate$1([
  Struct.field("uint64")
], AccountObject.prototype, "ram_usage", void 0);
__decorate$1([
  Struct.field(AccountPermission, { array: true })
], AccountObject.prototype, "permissions", void 0);
__decorate$1([
  Struct.field(AccountTotalResources, { optional: true })
], AccountObject.prototype, "total_resources", void 0);
__decorate$1([
  Struct.field(AccountSelfDelegatedBandwidth, { optional: true })
], AccountObject.prototype, "self_delegated_bandwidth", void 0);
__decorate$1([
  Struct.field(AccountRefundRequest, { optional: true })
], AccountObject.prototype, "refund_request", void 0);
__decorate$1([
  Struct.field(AccountVoterInfo, { optional: true })
], AccountObject.prototype, "voter_info", void 0);
__decorate$1([
  Struct.field(AccountRexInfo, { optional: true })
], AccountObject.prototype, "rex_info", void 0);
AccountObject = __decorate$1([
  Struct.type("account_object")
], AccountObject);
let AccountByAuthorizersRow = class AccountByAuthorizersRow2 extends Struct {
};
__decorate$1([
  Struct.field(Name)
], AccountByAuthorizersRow.prototype, "account_name", void 0);
__decorate$1([
  Struct.field(Name)
], AccountByAuthorizersRow.prototype, "permission_name", void 0);
__decorate$1([
  Struct.field(PublicKey, { optional: true })
], AccountByAuthorizersRow.prototype, "authorizing_key", void 0);
__decorate$1([
  Struct.field(PermissionLevel, { optional: true })
], AccountByAuthorizersRow.prototype, "authorizing_account", void 0);
__decorate$1([
  Struct.field(Weight)
], AccountByAuthorizersRow.prototype, "weight", void 0);
__decorate$1([
  Struct.field(UInt32)
], AccountByAuthorizersRow.prototype, "threshold", void 0);
AccountByAuthorizersRow = __decorate$1([
  Struct.type("account_by_authorizers_row")
], AccountByAuthorizersRow);
let AccountsByAuthorizers = class AccountsByAuthorizers2 extends Struct {
};
__decorate$1([
  Struct.field(AccountByAuthorizersRow, { array: true })
], AccountsByAuthorizers.prototype, "accounts", void 0);
AccountsByAuthorizers = __decorate$1([
  Struct.type("account_by_authorizers")
], AccountsByAuthorizers);
let NewProducersEntry$1 = class NewProducersEntry extends Struct {
};
__decorate$1([
  Struct.field("name")
], NewProducersEntry$1.prototype, "producer_name", void 0);
__decorate$1([
  Struct.field("public_key")
], NewProducersEntry$1.prototype, "block_signing_key", void 0);
NewProducersEntry$1 = __decorate$1([
  Struct.type("new_producers_entry")
], NewProducersEntry$1);
let NewProducers$1 = class NewProducers extends Struct {
};
__decorate$1([
  Struct.field("uint32")
], NewProducers$1.prototype, "version", void 0);
__decorate$1([
  Struct.field(NewProducersEntry$1, { array: true })
], NewProducers$1.prototype, "producers", void 0);
NewProducers$1 = __decorate$1([
  Struct.type("new_producers")
], NewProducers$1);
let BlockExtension$1 = class BlockExtension extends Struct {
};
__decorate$1([
  Struct.field("uint16")
], BlockExtension$1.prototype, "type", void 0);
__decorate$1([
  Struct.field("bytes")
], BlockExtension$1.prototype, "data", void 0);
BlockExtension$1 = __decorate$1([
  Struct.type("block_extension")
], BlockExtension$1);
let HeaderExtension$1 = class HeaderExtension extends Struct {
};
__decorate$1([
  Struct.field("uint16")
], HeaderExtension$1.prototype, "type", void 0);
__decorate$1([
  Struct.field("bytes")
], HeaderExtension$1.prototype, "data", void 0);
HeaderExtension$1 = __decorate$1([
  Struct.type("header_extension")
], HeaderExtension$1);
let TrxVariant$1 = class TrxVariant {
  static from(data) {
    let id;
    let extra;
    if (typeof data === "string") {
      id = Checksum256.from(data);
      extra = {};
    } else {
      id = Checksum256.from(data.id);
      extra = data;
    }
    return new this(id, extra);
  }
  constructor(id, extra) {
    this.id = id;
    this.extra = extra;
  }
  get transaction() {
    if (this.extra.packed_trx) {
      switch (this.extra.compression) {
        case "zlib": {
          const inflated = pako.inflate(Bytes.from(this.extra.packed_trx, "hex").array);
          return Serializer.decode({ data: inflated, type: Transaction });
        }
        case "none": {
          return Serializer.decode({ data: this.extra.packed_trx, type: Transaction });
        }
        default: {
          throw new Error(`Unsupported compression type ${this.extra.compression}`);
        }
      }
    }
  }
  get signatures() {
    if (this.extra.signatures) {
      return this.extra.signatures.map(Signature.from);
    }
  }
  equals(other) {
    return this.id.equals(other.id);
  }
  toJSON() {
    return this.id;
  }
};
TrxVariant$1.abiName = "trx_variant";
let GetBlockResponseTransactionReceipt = class GetBlockResponseTransactionReceipt2 extends TransactionReceipt {
  get id() {
    return this.trx.id;
  }
};
__decorate$1([
  Struct.field(TrxVariant$1)
], GetBlockResponseTransactionReceipt.prototype, "trx", void 0);
GetBlockResponseTransactionReceipt = __decorate$1([
  Struct.type("get_block_response_receipt")
], GetBlockResponseTransactionReceipt);
let GetBlockResponse = class GetBlockResponse2 extends Struct {
};
__decorate$1([
  Struct.field("time_point")
], GetBlockResponse.prototype, "timestamp", void 0);
__decorate$1([
  Struct.field("name")
], GetBlockResponse.prototype, "producer", void 0);
__decorate$1([
  Struct.field("uint16")
], GetBlockResponse.prototype, "confirmed", void 0);
__decorate$1([
  Struct.field(BlockId)
], GetBlockResponse.prototype, "previous", void 0);
__decorate$1([
  Struct.field("checksum256")
], GetBlockResponse.prototype, "transaction_mroot", void 0);
__decorate$1([
  Struct.field("checksum256")
], GetBlockResponse.prototype, "action_mroot", void 0);
__decorate$1([
  Struct.field("uint32")
], GetBlockResponse.prototype, "schedule_version", void 0);
__decorate$1([
  Struct.field(NewProducers$1, { optional: true })
], GetBlockResponse.prototype, "new_producers", void 0);
__decorate$1([
  Struct.field("any", { optional: true })
], GetBlockResponse.prototype, "header_extensions", void 0);
__decorate$1([
  Struct.field("any", { optional: true })
], GetBlockResponse.prototype, "new_protocol_features", void 0);
__decorate$1([
  Struct.field("signature")
], GetBlockResponse.prototype, "producer_signature", void 0);
__decorate$1([
  Struct.field(GetBlockResponseTransactionReceipt, { array: true })
], GetBlockResponse.prototype, "transactions", void 0);
__decorate$1([
  Struct.field("block_extension", { optional: true })
], GetBlockResponse.prototype, "block_extensions", void 0);
__decorate$1([
  Struct.field(BlockId)
], GetBlockResponse.prototype, "id", void 0);
__decorate$1([
  Struct.field("uint32")
], GetBlockResponse.prototype, "block_num", void 0);
__decorate$1([
  Struct.field("uint32")
], GetBlockResponse.prototype, "ref_block_prefix", void 0);
GetBlockResponse = __decorate$1([
  Struct.type("get_block_response")
], GetBlockResponse);
let GetBlockInfoResponse = class GetBlockInfoResponse2 extends Struct {
};
__decorate$1([
  Struct.field("uint32")
], GetBlockInfoResponse.prototype, "block_num", void 0);
__decorate$1([
  Struct.field("uint32")
], GetBlockInfoResponse.prototype, "ref_block_num", void 0);
__decorate$1([
  Struct.field(BlockId)
], GetBlockInfoResponse.prototype, "id", void 0);
__decorate$1([
  Struct.field("time_point")
], GetBlockInfoResponse.prototype, "timestamp", void 0);
__decorate$1([
  Struct.field("name")
], GetBlockInfoResponse.prototype, "producer", void 0);
__decorate$1([
  Struct.field("uint16")
], GetBlockInfoResponse.prototype, "confirmed", void 0);
__decorate$1([
  Struct.field(BlockId)
], GetBlockInfoResponse.prototype, "previous", void 0);
__decorate$1([
  Struct.field("checksum256")
], GetBlockInfoResponse.prototype, "transaction_mroot", void 0);
__decorate$1([
  Struct.field("checksum256")
], GetBlockInfoResponse.prototype, "action_mroot", void 0);
__decorate$1([
  Struct.field("uint32")
], GetBlockInfoResponse.prototype, "schedule_version", void 0);
__decorate$1([
  Struct.field("signature")
], GetBlockInfoResponse.prototype, "producer_signature", void 0);
__decorate$1([
  Struct.field("uint32")
], GetBlockInfoResponse.prototype, "ref_block_prefix", void 0);
GetBlockInfoResponse = __decorate$1([
  Struct.type("get_block_response")
], GetBlockInfoResponse);
let ActiveScheduleProducerAuthority = class ActiveScheduleProducerAuthority2 extends Struct {
};
__decorate$1([
  Struct.field("name")
], ActiveScheduleProducerAuthority.prototype, "producer_name", void 0);
__decorate$1([
  Struct.field("any")
], ActiveScheduleProducerAuthority.prototype, "authority", void 0);
ActiveScheduleProducerAuthority = __decorate$1([
  Struct.type("active_schedule_producer_authority")
], ActiveScheduleProducerAuthority);
let ActiveScheduleProducer = class ActiveScheduleProducer2 extends Struct {
};
__decorate$1([
  Struct.field("name")
], ActiveScheduleProducer.prototype, "producer_name", void 0);
__decorate$1([
  Struct.field(ActiveScheduleProducerAuthority)
], ActiveScheduleProducer.prototype, "authority", void 0);
ActiveScheduleProducer = __decorate$1([
  Struct.type("active_schedule_producer")
], ActiveScheduleProducer);
let ActiveSchedule = class ActiveSchedule2 extends Struct {
};
__decorate$1([
  Struct.field("uint32")
], ActiveSchedule.prototype, "version", void 0);
__decorate$1([
  Struct.field(ActiveScheduleProducer, { array: true })
], ActiveSchedule.prototype, "producers", void 0);
ActiveSchedule = __decorate$1([
  Struct.type("active_schedule")
], ActiveSchedule);
let BlockStateHeader = class BlockStateHeader2 extends Struct {
};
__decorate$1([
  Struct.field("time_point")
], BlockStateHeader.prototype, "timestamp", void 0);
__decorate$1([
  Struct.field("name")
], BlockStateHeader.prototype, "producer", void 0);
__decorate$1([
  Struct.field("uint16")
], BlockStateHeader.prototype, "confirmed", void 0);
__decorate$1([
  Struct.field(BlockId)
], BlockStateHeader.prototype, "previous", void 0);
__decorate$1([
  Struct.field("checksum256")
], BlockStateHeader.prototype, "transaction_mroot", void 0);
__decorate$1([
  Struct.field("checksum256")
], BlockStateHeader.prototype, "action_mroot", void 0);
__decorate$1([
  Struct.field("uint32")
], BlockStateHeader.prototype, "schedule_version", void 0);
__decorate$1([
  Struct.field("any", { array: true, optional: true })
], BlockStateHeader.prototype, "header_extensions", void 0);
__decorate$1([
  Struct.field("signature")
], BlockStateHeader.prototype, "producer_signature", void 0);
BlockStateHeader = __decorate$1([
  Struct.type("block_state_header")
], BlockStateHeader);
let GetBlockHeaderStateResponse = class GetBlockHeaderStateResponse2 extends Struct {
};
__decorate$1([
  Struct.field("uint32")
], GetBlockHeaderStateResponse.prototype, "block_num", void 0);
__decorate$1([
  Struct.field("uint32")
], GetBlockHeaderStateResponse.prototype, "dpos_proposed_irreversible_blocknum", void 0);
__decorate$1([
  Struct.field("uint32")
], GetBlockHeaderStateResponse.prototype, "dpos_irreversible_blocknum", void 0);
__decorate$1([
  Struct.field(BlockId)
], GetBlockHeaderStateResponse.prototype, "id", void 0);
__decorate$1([
  Struct.field(BlockStateHeader)
], GetBlockHeaderStateResponse.prototype, "header", void 0);
__decorate$1([
  Struct.field("any")
], GetBlockHeaderStateResponse.prototype, "active_schedule", void 0);
__decorate$1([
  Struct.field("any")
], GetBlockHeaderStateResponse.prototype, "blockroot_merkle", void 0);
__decorate$1([
  Struct.field("any")
], GetBlockHeaderStateResponse.prototype, "producer_to_last_produced", void 0);
__decorate$1([
  Struct.field("any")
], GetBlockHeaderStateResponse.prototype, "producer_to_last_implied_irb", void 0);
__decorate$1([
  Struct.field("any")
], GetBlockHeaderStateResponse.prototype, "valid_block_signing_authority", void 0);
__decorate$1([
  Struct.field("any")
], GetBlockHeaderStateResponse.prototype, "confirm_count", void 0);
__decorate$1([
  Struct.field("any")
], GetBlockHeaderStateResponse.prototype, "pending_schedule", void 0);
__decorate$1([
  Struct.field("any", { optional: true })
], GetBlockHeaderStateResponse.prototype, "activated_protocol_features", void 0);
__decorate$1([
  Struct.field("any")
], GetBlockHeaderStateResponse.prototype, "additional_signatures", void 0);
GetBlockHeaderStateResponse = __decorate$1([
  Struct.type("get_block_header_state_response")
], GetBlockHeaderStateResponse);
let GetInfoResponse = class GetInfoResponse2 extends Struct {
  getTransactionHeader(secondsAhead = 120) {
    const expiration = TimePointSec.fromMilliseconds(this.head_block_time.toMilliseconds() + secondsAhead * 1e3);
    const id = this.last_irreversible_block_id;
    const prefixArray = id.array.subarray(8, 12);
    const prefix = new Uint32Array(prefixArray.buffer, prefixArray.byteOffset, 1)[0];
    return TransactionHeader.from({
      expiration,
      ref_block_num: Number(this.last_irreversible_block_num) & 65535,
      ref_block_prefix: prefix
    });
  }
};
__decorate$1([
  Struct.field("string")
], GetInfoResponse.prototype, "server_version", void 0);
__decorate$1([
  Struct.field("checksum256")
], GetInfoResponse.prototype, "chain_id", void 0);
__decorate$1([
  Struct.field("uint32")
], GetInfoResponse.prototype, "head_block_num", void 0);
__decorate$1([
  Struct.field("uint32")
], GetInfoResponse.prototype, "last_irreversible_block_num", void 0);
__decorate$1([
  Struct.field(BlockId)
], GetInfoResponse.prototype, "last_irreversible_block_id", void 0);
__decorate$1([
  Struct.field(BlockId)
], GetInfoResponse.prototype, "head_block_id", void 0);
__decorate$1([
  Struct.field("time_point")
], GetInfoResponse.prototype, "head_block_time", void 0);
__decorate$1([
  Struct.field("name")
], GetInfoResponse.prototype, "head_block_producer", void 0);
__decorate$1([
  Struct.field("uint64")
], GetInfoResponse.prototype, "virtual_block_cpu_limit", void 0);
__decorate$1([
  Struct.field("uint64")
], GetInfoResponse.prototype, "virtual_block_net_limit", void 0);
__decorate$1([
  Struct.field("uint64")
], GetInfoResponse.prototype, "block_cpu_limit", void 0);
__decorate$1([
  Struct.field("uint64")
], GetInfoResponse.prototype, "block_net_limit", void 0);
__decorate$1([
  Struct.field("string?")
], GetInfoResponse.prototype, "server_version_string", void 0);
__decorate$1([
  Struct.field("uint32?")
], GetInfoResponse.prototype, "fork_db_head_block_num", void 0);
__decorate$1([
  Struct.field("block_id_type?")
], GetInfoResponse.prototype, "fork_db_head_block_id", void 0);
GetInfoResponse = __decorate$1([
  Struct.type("get_info_response")
], GetInfoResponse);
let GetTableByScopeResponseRow = class GetTableByScopeResponseRow2 extends Struct {
};
__decorate$1([
  Struct.field("name")
], GetTableByScopeResponseRow.prototype, "code", void 0);
__decorate$1([
  Struct.field("name")
], GetTableByScopeResponseRow.prototype, "scope", void 0);
__decorate$1([
  Struct.field("name")
], GetTableByScopeResponseRow.prototype, "table", void 0);
__decorate$1([
  Struct.field("name")
], GetTableByScopeResponseRow.prototype, "payer", void 0);
__decorate$1([
  Struct.field("uint32")
], GetTableByScopeResponseRow.prototype, "count", void 0);
GetTableByScopeResponseRow = __decorate$1([
  Struct.type("get_table_by_scope_response_row")
], GetTableByScopeResponseRow);
let GetTableByScopeResponse = class GetTableByScopeResponse2 extends Struct {
};
__decorate$1([
  Struct.field(GetTableByScopeResponseRow, { array: true })
], GetTableByScopeResponse.prototype, "rows", void 0);
__decorate$1([
  Struct.field("string")
], GetTableByScopeResponse.prototype, "more", void 0);
GetTableByScopeResponse = __decorate$1([
  Struct.type("get_table_by_scope_response")
], GetTableByScopeResponse);
let OrderedActionsResult = class OrderedActionsResult2 extends Struct {
};
__decorate$1([
  Struct.field(UInt64)
], OrderedActionsResult.prototype, "global_action_seq", void 0);
__decorate$1([
  Struct.field(Int64)
], OrderedActionsResult.prototype, "account_action_seq", void 0);
__decorate$1([
  Struct.field(UInt32)
], OrderedActionsResult.prototype, "block_num", void 0);
__decorate$1([
  Struct.field(BlockTimestamp)
], OrderedActionsResult.prototype, "block_time", void 0);
__decorate$1([
  Struct.field("any")
], OrderedActionsResult.prototype, "action_trace", void 0);
__decorate$1([
  Struct.field("boolean?")
], OrderedActionsResult.prototype, "irrevirsible", void 0);
OrderedActionsResult = __decorate$1([
  Struct.type("ordered_action_result")
], OrderedActionsResult);
let GetActionsResponse = class GetActionsResponse2 extends Struct {
};
__decorate$1([
  Struct.field(OrderedActionsResult, { array: true })
], GetActionsResponse.prototype, "actions", void 0);
__decorate$1([
  Struct.field(Int32)
], GetActionsResponse.prototype, "last_irreversible_block", void 0);
__decorate$1([
  Struct.field(Int32)
], GetActionsResponse.prototype, "head_block_num", void 0);
__decorate$1([
  Struct.field("boolean?")
], GetActionsResponse.prototype, "time_limit_exceeded_error", void 0);
GetActionsResponse = __decorate$1([
  Struct.type("get_actions_response")
], GetActionsResponse);
let TransactionTrace = class TransactionTrace2 extends Struct {
};
TransactionTrace = __decorate$1([
  Struct.type("transaction_trace")
], TransactionTrace);
let Trx = class Trx2 extends Struct {
};
__decorate$1([
  Struct.field("any")
], Trx.prototype, "actions", void 0);
__decorate$1([
  Struct.field("any")
], Trx.prototype, "context_free_actions", void 0);
__decorate$1([
  Struct.field("any")
], Trx.prototype, "context_free_data", void 0);
__decorate$1([
  Struct.field("number")
], Trx.prototype, "delay_sec", void 0);
__decorate$1([
  Struct.field("string")
], Trx.prototype, "expiration", void 0);
__decorate$1([
  Struct.field("number")
], Trx.prototype, "max_cpu_usage_ms", void 0);
__decorate$1([
  Struct.field("number")
], Trx.prototype, "max_net_usage_words", void 0);
__decorate$1([
  Struct.field("number")
], Trx.prototype, "ref_block_num", void 0);
__decorate$1([
  Struct.field("number")
], Trx.prototype, "ref_block_prefix", void 0);
__decorate$1([
  Struct.field("string", { array: true })
], Trx.prototype, "signatures", void 0);
Trx = __decorate$1([
  Struct.type("trx")
], Trx);
let TransactionInfo = class TransactionInfo2 extends Struct {
};
__decorate$1([
  Struct.field(TransactionReceipt)
], TransactionInfo.prototype, "receipt", void 0);
__decorate$1([
  Struct.field("trx")
], TransactionInfo.prototype, "trx", void 0);
TransactionInfo = __decorate$1([
  Struct.type("transaction_info")
], TransactionInfo);
let GetTransactionResponse = class GetTransactionResponse2 extends Struct {
};
__decorate$1([
  Struct.field(Checksum256)
], GetTransactionResponse.prototype, "id", void 0);
__decorate$1([
  Struct.field(UInt32)
], GetTransactionResponse.prototype, "block_num", void 0);
__decorate$1([
  Struct.field(BlockTimestamp)
], GetTransactionResponse.prototype, "block_time", void 0);
__decorate$1([
  Struct.field(UInt32)
], GetTransactionResponse.prototype, "last_irreversible_block", void 0);
__decorate$1([
  Struct.field("any?")
], GetTransactionResponse.prototype, "traces", void 0);
__decorate$1([
  Struct.field("any")
], GetTransactionResponse.prototype, "trx", void 0);
GetTransactionResponse = __decorate$1([
  Struct.type("get_transaction_response")
], GetTransactionResponse);
let GetKeyAccountsResponse = class GetKeyAccountsResponse2 extends Struct {
};
__decorate$1([
  Struct.field("name", { array: true })
], GetKeyAccountsResponse.prototype, "account_names", void 0);
GetKeyAccountsResponse = __decorate$1([
  Struct.type("get_key_accounts_response")
], GetKeyAccountsResponse);
let GetCodeResponse = class GetCodeResponse2 extends Struct {
};
__decorate$1([
  Struct.field(ABI)
], GetCodeResponse.prototype, "abi", void 0);
__decorate$1([
  Struct.field("name")
], GetCodeResponse.prototype, "account_name", void 0);
__decorate$1([
  Struct.field("checksum256")
], GetCodeResponse.prototype, "code_hash", void 0);
__decorate$1([
  Struct.field("string")
], GetCodeResponse.prototype, "wast", void 0);
__decorate$1([
  Struct.field("string")
], GetCodeResponse.prototype, "wasm", void 0);
GetCodeResponse = __decorate$1([
  Struct.type("get_code_response")
], GetCodeResponse);
let GetControlledAccountsResponse = class GetControlledAccountsResponse2 extends Struct {
};
__decorate$1([
  Struct.field("name", { array: true })
], GetControlledAccountsResponse.prototype, "controlled_accounts", void 0);
GetControlledAccountsResponse = __decorate$1([
  Struct.type("get_controlled_accounts_response")
], GetControlledAccountsResponse);
let GetCurrencyStatsItemResponse = class GetCurrencyStatsItemResponse2 extends Struct {
};
__decorate$1([
  Struct.field("asset")
], GetCurrencyStatsItemResponse.prototype, "supply", void 0);
__decorate$1([
  Struct.field("asset")
], GetCurrencyStatsItemResponse.prototype, "max_supply", void 0);
__decorate$1([
  Struct.field("name")
], GetCurrencyStatsItemResponse.prototype, "issuer", void 0);
GetCurrencyStatsItemResponse = __decorate$1([
  Struct.type("get_currency_stats_item_response")
], GetCurrencyStatsItemResponse);
let GetTransactionStatusResponse = class GetTransactionStatusResponse2 extends Struct {
};
__decorate$1([
  Struct.field("string")
], GetTransactionStatusResponse.prototype, "state", void 0);
__decorate$1([
  Struct.field("uint32")
], GetTransactionStatusResponse.prototype, "head_number", void 0);
__decorate$1([
  Struct.field(BlockId)
], GetTransactionStatusResponse.prototype, "head_id", void 0);
__decorate$1([
  Struct.field("time_point")
], GetTransactionStatusResponse.prototype, "head_timestamp", void 0);
__decorate$1([
  Struct.field("uint32")
], GetTransactionStatusResponse.prototype, "irreversible_number", void 0);
__decorate$1([
  Struct.field(BlockId)
], GetTransactionStatusResponse.prototype, "irreversible_id", void 0);
__decorate$1([
  Struct.field("time_point")
], GetTransactionStatusResponse.prototype, "irreversible_timestamp", void 0);
__decorate$1([
  Struct.field(BlockId)
], GetTransactionStatusResponse.prototype, "earliest_tracked_block_id", void 0);
__decorate$1([
  Struct.field("uint32")
], GetTransactionStatusResponse.prototype, "earliest_tracked_block_number", void 0);
GetTransactionStatusResponse = __decorate$1([
  Struct.type("get_transaction_status_response")
], GetTransactionStatusResponse);
let ProducerAuthority = class ProducerAuthority2 extends Struct {
};
__decorate$1([
  Struct.field(UInt32)
], ProducerAuthority.prototype, "threshold", void 0);
__decorate$1([
  Struct.field(KeyWeight, { array: true })
], ProducerAuthority.prototype, "keys", void 0);
ProducerAuthority = __decorate$1([
  Struct.type("producer_authority")
], ProducerAuthority);
let Producer = class Producer2 extends Struct {
  static from(data) {
    return super.from({
      ...data,
      authority: [data.authority[0], ProducerAuthority.from(data.authority[1])]
    });
  }
};
__decorate$1([
  Struct.field("name")
], Producer.prototype, "producer_name", void 0);
__decorate$1([
  Struct.field("any", { array: true })
], Producer.prototype, "authority", void 0);
Producer = __decorate$1([
  Struct.type("producer")
], Producer);
let ProducerSchedule = class ProducerSchedule2 extends Struct {
};
__decorate$1([
  Struct.field("uint32")
], ProducerSchedule.prototype, "version", void 0);
__decorate$1([
  Struct.field(Producer, { array: true })
], ProducerSchedule.prototype, "producers", void 0);
ProducerSchedule = __decorate$1([
  Struct.type("producer_schedule")
], ProducerSchedule);
let GetProducerScheduleResponse = class GetProducerScheduleResponse2 extends Struct {
};
__decorate$1([
  Struct.field(ProducerSchedule, { optional: true })
], GetProducerScheduleResponse.prototype, "active", void 0);
__decorate$1([
  Struct.field(ProducerSchedule, { optional: true })
], GetProducerScheduleResponse.prototype, "pending", void 0);
__decorate$1([
  Struct.field(ProducerSchedule, { optional: true })
], GetProducerScheduleResponse.prototype, "proposed", void 0);
GetProducerScheduleResponse = __decorate$1([
  Struct.type("get_producer_schedule_response")
], GetProducerScheduleResponse);
let ProtocolFeature = class ProtocolFeature2 extends Struct {
};
__decorate$1([
  Struct.field("checksum256")
], ProtocolFeature.prototype, "feature_digest", void 0);
__decorate$1([
  Struct.field("uint32")
], ProtocolFeature.prototype, "activation_ordinal", void 0);
__decorate$1([
  Struct.field("uint32")
], ProtocolFeature.prototype, "activation_block_num", void 0);
__decorate$1([
  Struct.field("checksum256")
], ProtocolFeature.prototype, "description_digest", void 0);
__decorate$1([
  Struct.field("string", { array: true })
], ProtocolFeature.prototype, "dependencies", void 0);
__decorate$1([
  Struct.field("string")
], ProtocolFeature.prototype, "protocol_feature_type", void 0);
__decorate$1([
  Struct.field("any", { array: true })
], ProtocolFeature.prototype, "specification", void 0);
ProtocolFeature = __decorate$1([
  Struct.type("protocol_feature")
], ProtocolFeature);
let GetProtocolFeaturesResponse = class GetProtocolFeaturesResponse2 extends Struct {
};
__decorate$1([
  Struct.field(ProtocolFeature, { array: true })
], GetProtocolFeaturesResponse.prototype, "activated_protocol_features", void 0);
__decorate$1([
  Struct.field("uint32", { optional: true })
], GetProtocolFeaturesResponse.prototype, "more", void 0);
GetProtocolFeaturesResponse = __decorate$1([
  Struct.type("get_protocol_features_response")
], GetProtocolFeaturesResponse);
var types$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  get AccountByAuthorizersRow() {
    return AccountByAuthorizersRow;
  },
  get AccountLinkedAction() {
    return AccountLinkedAction;
  },
  get AccountObject() {
    return AccountObject;
  },
  get AccountPermission() {
    return AccountPermission;
  },
  get AccountRefundRequest() {
    return AccountRefundRequest;
  },
  get AccountResourceLimit() {
    return AccountResourceLimit;
  },
  get AccountRexInfo() {
    return AccountRexInfo;
  },
  get AccountRexInfoMaturities() {
    return AccountRexInfoMaturities;
  },
  get AccountSelfDelegatedBandwidth() {
    return AccountSelfDelegatedBandwidth;
  },
  get AccountTotalResources() {
    return AccountTotalResources;
  },
  get AccountVoterInfo() {
    return AccountVoterInfo;
  },
  get AccountsByAuthorizers() {
    return AccountsByAuthorizers;
  },
  get ActiveSchedule() {
    return ActiveSchedule;
  },
  get ActiveScheduleProducer() {
    return ActiveScheduleProducer;
  },
  get ActiveScheduleProducerAuthority() {
    return ActiveScheduleProducerAuthority;
  },
  get BlockExtension() {
    return BlockExtension$1;
  },
  get BlockStateHeader() {
    return BlockStateHeader;
  },
  get GetActionsResponse() {
    return GetActionsResponse;
  },
  get GetBlockHeaderStateResponse() {
    return GetBlockHeaderStateResponse;
  },
  get GetBlockInfoResponse() {
    return GetBlockInfoResponse;
  },
  get GetBlockResponse() {
    return GetBlockResponse;
  },
  get GetBlockResponseTransactionReceipt() {
    return GetBlockResponseTransactionReceipt;
  },
  get GetCodeResponse() {
    return GetCodeResponse;
  },
  get GetControlledAccountsResponse() {
    return GetControlledAccountsResponse;
  },
  get GetCurrencyStatsItemResponse() {
    return GetCurrencyStatsItemResponse;
  },
  get GetInfoResponse() {
    return GetInfoResponse;
  },
  get GetKeyAccountsResponse() {
    return GetKeyAccountsResponse;
  },
  get GetProducerScheduleResponse() {
    return GetProducerScheduleResponse;
  },
  get GetProtocolFeaturesResponse() {
    return GetProtocolFeaturesResponse;
  },
  get GetRawAbiResponse() {
    return GetRawAbiResponse;
  },
  get GetTableByScopeResponse() {
    return GetTableByScopeResponse;
  },
  get GetTableByScopeResponseRow() {
    return GetTableByScopeResponseRow;
  },
  get GetTransactionResponse() {
    return GetTransactionResponse;
  },
  get GetTransactionStatusResponse() {
    return GetTransactionStatusResponse;
  },
  get HeaderExtension() {
    return HeaderExtension$1;
  },
  get NewProducers() {
    return NewProducers$1;
  },
  get NewProducersEntry() {
    return NewProducersEntry$1;
  },
  get OrderedActionsResult() {
    return OrderedActionsResult;
  },
  get Producer() {
    return Producer;
  },
  get ProducerAuthority() {
    return ProducerAuthority;
  },
  get ProducerSchedule() {
    return ProducerSchedule;
  },
  get ProtocolFeature() {
    return ProtocolFeature;
  },
  get TransactionInfo() {
    return TransactionInfo;
  },
  get TransactionTrace() {
    return TransactionTrace;
  },
  get Trx() {
    return Trx;
  },
  TrxVariant: TrxVariant$1
});
class ChainAPI {
  constructor(client) {
    this.client = client;
  }
  async get_abi(accountName) {
    return this.client.call({
      path: "/v1/chain/get_abi",
      params: { account_name: Name.from(accountName) }
    });
  }
  async get_code(accountName) {
    return this.client.call({
      path: "/v1/chain/get_code",
      params: { account_name: Name.from(accountName) },
      responseType: GetCodeResponse
    });
  }
  async get_raw_abi(accountName) {
    return this.client.call({
      path: "/v1/chain/get_raw_abi",
      params: { account_name: Name.from(accountName) },
      responseType: GetRawAbiResponse
    });
  }
  async get_account(accountName, responseType = AccountObject) {
    return this.client.call({
      path: "/v1/chain/get_account",
      params: { account_name: Name.from(accountName) },
      responseType
    });
  }
  async get_accounts_by_authorizers(params) {
    return this.client.call({
      path: "/v1/chain/get_accounts_by_authorizers",
      params,
      responseType: AccountsByAuthorizers
    });
  }
  async get_activated_protocol_features(params) {
    return this.client.call({
      path: "/v1/chain/get_activated_protocol_features",
      params,
      responseType: GetProtocolFeaturesResponse
    });
  }
  async get_block(block_num_or_id) {
    return this.client.call({
      path: "/v1/chain/get_block",
      params: { block_num_or_id },
      responseType: GetBlockResponse
    });
  }
  async get_block_header_state(block_num_or_id) {
    return this.client.call({
      path: "/v1/chain/get_block_header_state",
      params: { block_num_or_id },
      responseType: GetBlockHeaderStateResponse
    });
  }
  async get_block_info(block_num) {
    return this.client.call({
      path: "/v1/chain/get_block_info",
      params: { block_num },
      responseType: GetBlockInfoResponse
    });
  }
  async get_currency_balance(contract, accountName, symbol) {
    const params = {
      account: Name.from(accountName),
      code: Name.from(contract)
    };
    if (symbol) {
      params.symbol = symbol;
    }
    return this.client.call({
      path: "/v1/chain/get_currency_balance",
      params,
      responseType: "asset[]"
    });
  }
  async get_currency_stats(contract, symbol) {
    const params = {
      code: Name.from(contract),
      symbol
    };
    const response = await this.client.call({
      path: "/v1/chain/get_currency_stats",
      params
    });
    const result = {};
    Object.keys(response).forEach((r) => result[r] = GetCurrencyStatsItemResponse.from(response[r]));
    return result;
  }
  async get_info() {
    return this.client.call({
      path: "/v1/chain/get_info",
      responseType: GetInfoResponse,
      method: "GET"
    });
  }
  async get_producer_schedule() {
    return this.client.call({
      path: "/v1/chain/get_producer_schedule",
      responseType: GetProducerScheduleResponse
    });
  }
  async compute_transaction(tx) {
    if (!isInstanceOf(tx, PackedTransaction)) {
      tx = PackedTransaction.fromSigned(SignedTransaction.from(tx));
    }
    return this.client.call({
      path: "/v1/chain/compute_transaction",
      params: {
        transaction: tx
      }
    });
  }
  async send_read_only_transaction(tx) {
    if (!isInstanceOf(tx, PackedTransaction)) {
      tx = PackedTransaction.fromSigned(SignedTransaction.from(tx));
    }
    return this.client.call({
      path: "/v1/chain/send_read_only_transaction",
      params: {
        transaction: tx
      }
    });
  }
  async push_transaction(tx) {
    if (!isInstanceOf(tx, PackedTransaction)) {
      tx = PackedTransaction.fromSigned(SignedTransaction.from(tx));
    }
    return this.client.call({
      path: "/v1/chain/push_transaction",
      params: tx
    });
  }
  async send_transaction(tx) {
    if (!isInstanceOf(tx, PackedTransaction)) {
      tx = PackedTransaction.fromSigned(SignedTransaction.from(tx));
    }
    return this.client.call({
      path: "/v1/chain/send_transaction",
      params: tx
    });
  }
  async send_transaction2(tx, options) {
    if (!isInstanceOf(tx, PackedTransaction)) {
      tx = PackedTransaction.fromSigned(SignedTransaction.from(tx));
    }
    return this.client.call({
      path: "/v1/chain/send_transaction2",
      params: {
        return_failure_trace: true,
        retry_trx: false,
        retry_trx_num_blocks: 0,
        transaction: tx,
        ...options
      }
    });
  }
  async get_table_rows(params) {
    const type = params.type;
    let key_type = params.key_type;
    const someBound = params.lower_bound || params.upper_bound;
    if (!key_type && someBound) {
      if (isInstanceOf(someBound, UInt64)) {
        key_type = "i64";
      } else if (isInstanceOf(someBound, UInt128)) {
        key_type = "i128";
      } else if (isInstanceOf(someBound, Checksum256)) {
        key_type = "sha256";
      } else if (isInstanceOf(someBound, Checksum160)) {
        key_type = "ripemd160";
      }
    }
    if (!key_type) {
      key_type = "name";
    }
    let json = params.json;
    if (json === void 0) {
      json = type === void 0;
    }
    let upper_bound = params.upper_bound;
    if (upper_bound && typeof upper_bound !== "string") {
      upper_bound = String(upper_bound);
    }
    let lower_bound = params.lower_bound;
    if (lower_bound && typeof lower_bound !== "string") {
      lower_bound = String(lower_bound);
    }
    let scope = params.scope;
    if (typeof scope === "undefined") {
      scope = String(Name.from(params.code));
    } else if (typeof scope !== "string") {
      scope = String(scope);
    }
    let { rows, more, next_key } = await this.client.call({
      path: "/v1/chain/get_table_rows",
      params: {
        ...params,
        code: Name.from(params.code),
        table: Name.from(params.table),
        limit: params.limit !== void 0 ? UInt32.from(params.limit) : void 0,
        scope,
        key_type,
        json,
        upper_bound,
        lower_bound
      }
    });
    let ram_payers;
    if (params.show_payer) {
      ram_payers = [];
      rows = rows.map(({ data, payer }) => {
        ram_payers.push(Name.from(payer));
        return data;
      });
    }
    if (type) {
      if (json) {
        rows = rows.map((value) => {
          if (typeof value === "string" && Bytes.isBytes(value)) {
            return Serializer.decode({ data: Bytes.from(value), type });
          } else {
            return Serializer.decode({ object: value, type });
          }
        });
      } else {
        rows = rows.map((hex) => Bytes.from(hex)).map((data) => Serializer.decode({ data, type }));
      }
    }
    if (next_key && next_key.length > 0) {
      let indexType;
      switch (key_type) {
        case "i64":
          indexType = UInt64;
          break;
        case "i128":
          indexType = UInt128;
          break;
        case "name":
          indexType = Name;
          break;
        case "float64":
          indexType = Float64;
          break;
        case "float128":
          indexType = Float128;
          break;
        case "sha256":
          indexType = Checksum256;
          break;
        case "ripemd160":
          indexType = Checksum160;
          break;
        default:
          throw new Error(`Unsupported key type: ${key_type}`);
      }
      if (indexType === Name) {
        next_key = Name.from(Serializer.decode({ object: next_key, type: UInt64 }));
      } else {
        next_key = Serializer.decode({ object: next_key, type: indexType });
      }
    } else {
      next_key = void 0;
    }
    return { rows, more, next_key, ram_payers };
  }
  async get_table_by_scope(params) {
    return this.client.call({
      path: "/v1/chain/get_table_by_scope",
      params,
      responseType: GetTableByScopeResponse
    });
  }
  async get_transaction_status(id) {
    return this.client.call({
      path: "/v1/chain/get_transaction_status",
      params: {
        id: Checksum256.from(id)
      },
      responseType: GetTransactionStatusResponse
    });
  }
}
class HistoryAPI {
  constructor(client) {
    this.client = client;
  }
  async get_actions(accountName, pos, offset) {
    return this.client.call({
      path: "/v1/history/get_actions",
      params: {
        account_name: Name.from(accountName),
        pos: Int32.from(pos),
        offset: Int32.from(offset)
      },
      responseType: GetActionsResponse
    });
  }
  async get_transaction(id, options = {}) {
    return this.client.call({
      path: "/v1/history/get_transaction",
      params: {
        id: Checksum256.from(id),
        block_num_hint: options.blockNumHint && UInt32.from(options.blockNumHint),
        traces: options.excludeTraces === true ? false : void 0
      },
      responseType: GetTransactionResponse
    });
  }
  async get_key_accounts(publicKey) {
    return this.client.call({
      path: "/v1/history/get_key_accounts",
      params: { public_key: PublicKey.from(publicKey) },
      responseType: GetKeyAccountsResponse
    });
  }
  async get_controlled_accounts(controllingAccount) {
    return this.client.call({
      path: "/v1/history/get_controlled_accounts",
      params: { controlling_account: Name.from(controllingAccount) },
      responseType: GetControlledAccountsResponse
    });
  }
}
class APIError extends Error {
  static formatError(error2) {
    if (error2.what === "unspecified" && error2.details[0].file && error2.details[0].file === "http_plugin.cpp" && error2.details[0].message.slice(0, 11) === "unknown key") {
      return "Account not found";
    } else if (error2.what === "unspecified" && error2.details && error2.details.length > 0) {
      return error2.details[0].message;
    } else if (error2.what && error2.what.length > 0) {
      return error2.what;
    } else {
      return "Unknown API error";
    }
  }
  constructor(path, response) {
    let message;
    if (response.json && response.json.error) {
      message = `${APIError.formatError(response.json.error)} at ${path}`;
    } else {
      message = `HTTP ${response.status} at ${path}`;
    }
    super(message);
    this.path = path;
    this.response = response;
  }
  /** The nodeos error object. */
  get error() {
    const { json } = this.response;
    return json ? json.error : void 0;
  }
  /** The nodeos error name, e.g. `tx_net_usage_exceeded` */
  get name() {
    const { error: error2 } = this;
    return error2 ? error2.name : "unspecified";
  }
  /** The nodeos error code, e.g. `3080002`. */
  get code() {
    const { error: error2 } = this;
    return error2 ? error2.code : 0;
  }
  /** List of exceptions, if any. */
  get details() {
    const { error: error2 } = this;
    return error2 ? error2.details : [];
  }
}
APIError.__className = "APIError";
class APIClient {
  constructor(options) {
    this.v1 = {
      chain: new ChainAPI(this),
      history: new HistoryAPI(this)
    };
    if (options.provider) {
      this.provider = options.provider;
    } else if (options.url) {
      this.provider = new FetchProvider(options.url, options);
    } else {
      throw new Error("Missing url or provider");
    }
  }
  async call(args) {
    const response = await this.provider.call(args);
    const { json } = response;
    if (Math.floor(response.status / 100) !== 2 || json && typeof json.error === "object") {
      throw new APIError(args.path, response);
    }
    if (args.responseType) {
      return abiDecode({ type: args.responseType, object: response.json });
    }
    return response.json || response.text;
  }
}
APIClient.__className = "APIClient";
var types$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  v1: types$2
});
var BlockHeader_1;
let HandshakeMessage = class HandshakeMessage2 extends Struct {
};
__decorate$1([
  Struct.field("uint16")
], HandshakeMessage.prototype, "networkVersion", void 0);
__decorate$1([
  Struct.field("checksum256")
], HandshakeMessage.prototype, "chainId", void 0);
__decorate$1([
  Struct.field("checksum256")
], HandshakeMessage.prototype, "nodeId", void 0);
__decorate$1([
  Struct.field("public_key")
], HandshakeMessage.prototype, "key", void 0);
__decorate$1([
  Struct.field("int64")
], HandshakeMessage.prototype, "time", void 0);
__decorate$1([
  Struct.field("checksum256")
], HandshakeMessage.prototype, "token", void 0);
__decorate$1([
  Struct.field("signature")
], HandshakeMessage.prototype, "sig", void 0);
__decorate$1([
  Struct.field("string")
], HandshakeMessage.prototype, "p2pAddress", void 0);
__decorate$1([
  Struct.field("uint32")
], HandshakeMessage.prototype, "lastIrreversibleBlockNumber", void 0);
__decorate$1([
  Struct.field(BlockId)
], HandshakeMessage.prototype, "lastIrreversibleBlockId", void 0);
__decorate$1([
  Struct.field("uint32")
], HandshakeMessage.prototype, "headNum", void 0);
__decorate$1([
  Struct.field(BlockId)
], HandshakeMessage.prototype, "headId", void 0);
__decorate$1([
  Struct.field("string")
], HandshakeMessage.prototype, "os", void 0);
__decorate$1([
  Struct.field("string")
], HandshakeMessage.prototype, "agent", void 0);
__decorate$1([
  Struct.field("int16")
], HandshakeMessage.prototype, "generation", void 0);
HandshakeMessage = __decorate$1([
  Struct.type("handshake_message")
], HandshakeMessage);
let ChainSizeMessage = class ChainSizeMessage2 extends Struct {
};
__decorate$1([
  Struct.field("uint32")
], ChainSizeMessage.prototype, "lastIrreversibleBlockNumber", void 0);
__decorate$1([
  Struct.field(BlockId)
], ChainSizeMessage.prototype, "lastIrreversibleBlockId", void 0);
__decorate$1([
  Struct.field("uint32")
], ChainSizeMessage.prototype, "headNum", void 0);
__decorate$1([
  Struct.field(BlockId)
], ChainSizeMessage.prototype, "headId", void 0);
ChainSizeMessage = __decorate$1([
  Struct.type("chain_size_message")
], ChainSizeMessage);
let GoAwayMessage = class GoAwayMessage2 extends Struct {
};
__decorate$1([
  Struct.field("uint8")
], GoAwayMessage.prototype, "reason", void 0);
__decorate$1([
  Struct.field("checksum256")
], GoAwayMessage.prototype, "nodeId", void 0);
GoAwayMessage = __decorate$1([
  Struct.type("go_away_message")
], GoAwayMessage);
let TimeMessage = class TimeMessage2 extends Struct {
};
__decorate$1([
  Struct.field("int64")
], TimeMessage.prototype, "org", void 0);
__decorate$1([
  Struct.field("int64")
], TimeMessage.prototype, "rec", void 0);
__decorate$1([
  Struct.field("int64")
], TimeMessage.prototype, "xmt", void 0);
__decorate$1([
  Struct.field("int64")
], TimeMessage.prototype, "dst", void 0);
TimeMessage = __decorate$1([
  Struct.type("time_message")
], TimeMessage);
let NoticeMessage = class NoticeMessage2 extends Struct {
};
__decorate$1([
  Struct.field("checksum256", { array: true })
], NoticeMessage.prototype, "knownTrx", void 0);
__decorate$1([
  Struct.field(BlockId, { array: true })
], NoticeMessage.prototype, "knownBlocks", void 0);
NoticeMessage = __decorate$1([
  Struct.type("notice_message")
], NoticeMessage);
let RequestMessage = class RequestMessage2 extends Struct {
};
__decorate$1([
  Struct.field("checksum256", { array: true })
], RequestMessage.prototype, "reqTrx", void 0);
__decorate$1([
  Struct.field(BlockId, { array: true })
], RequestMessage.prototype, "reqBlocks", void 0);
RequestMessage = __decorate$1([
  Struct.type("request_message")
], RequestMessage);
let SyncRequestMessage = class SyncRequestMessage2 extends Struct {
};
__decorate$1([
  Struct.field("uint32")
], SyncRequestMessage.prototype, "startBlock", void 0);
__decorate$1([
  Struct.field("uint32")
], SyncRequestMessage.prototype, "endBlock", void 0);
SyncRequestMessage = __decorate$1([
  Struct.type("sync_request_message")
], SyncRequestMessage);
let NewProducersEntry2 = class NewProducersEntry3 extends Struct {
};
__decorate$1([
  Struct.field("name")
], NewProducersEntry2.prototype, "producer_name", void 0);
__decorate$1([
  Struct.field("public_key")
], NewProducersEntry2.prototype, "block_signing_key", void 0);
NewProducersEntry2 = __decorate$1([
  Struct.type("new_producers_entry")
], NewProducersEntry2);
let NewProducers2 = class NewProducers3 extends Struct {
};
__decorate$1([
  Struct.field("uint32")
], NewProducers2.prototype, "version", void 0);
__decorate$1([
  Struct.field(NewProducersEntry2, { array: true })
], NewProducers2.prototype, "producers", void 0);
NewProducers2 = __decorate$1([
  Struct.type("new_producers")
], NewProducers2);
let BlockExtension2 = class BlockExtension3 extends Struct {
};
__decorate$1([
  Struct.field("uint16")
], BlockExtension2.prototype, "type", void 0);
__decorate$1([
  Struct.field("bytes")
], BlockExtension2.prototype, "data", void 0);
BlockExtension2 = __decorate$1([
  Struct.type("block_extension")
], BlockExtension2);
let HeaderExtension2 = class HeaderExtension3 extends Struct {
};
__decorate$1([
  Struct.field("uint16")
], HeaderExtension2.prototype, "type", void 0);
__decorate$1([
  Struct.field("bytes")
], HeaderExtension2.prototype, "data", void 0);
HeaderExtension2 = __decorate$1([
  Struct.type("header_extension")
], HeaderExtension2);
let TrxVariant2 = class TrxVariant3 extends Variant {
};
TrxVariant2 = __decorate$1([
  Variant.type("trx_variant", [Checksum256, PackedTransaction])
], TrxVariant2);
let FullTransactionReceipt = class FullTransactionReceipt2 extends Struct {
};
__decorate$1([
  Struct.field(UInt8)
], FullTransactionReceipt.prototype, "status", void 0);
__decorate$1([
  Struct.field(UInt32)
], FullTransactionReceipt.prototype, "cpu_usage_us", void 0);
__decorate$1([
  Struct.field(VarUInt)
], FullTransactionReceipt.prototype, "net_usage_words", void 0);
__decorate$1([
  Struct.field(TrxVariant2)
], FullTransactionReceipt.prototype, "trx", void 0);
FullTransactionReceipt = __decorate$1([
  Struct.type("full_transaction_receipt")
], FullTransactionReceipt);
let BlockHeader = BlockHeader_1 = class BlockHeader2 extends Struct {
  get blockNum() {
    return this.previous.blockNum.adding(1);
  }
  get id() {
    const id = Checksum256.hash(Serializer.encode({ object: this, type: BlockHeader_1 }));
    return BlockId.fromBlockChecksum(id, this.blockNum);
  }
};
__decorate$1([
  Struct.field("uint32")
], BlockHeader.prototype, "timeSlot", void 0);
__decorate$1([
  Struct.field("name")
], BlockHeader.prototype, "producer", void 0);
__decorate$1([
  Struct.field("uint16")
], BlockHeader.prototype, "confirmed", void 0);
__decorate$1([
  Struct.field(BlockId)
], BlockHeader.prototype, "previous", void 0);
__decorate$1([
  Struct.field(BlockId)
], BlockHeader.prototype, "transaction_mroot", void 0);
__decorate$1([
  Struct.field(BlockId)
], BlockHeader.prototype, "action_mroot", void 0);
__decorate$1([
  Struct.field("uint32")
], BlockHeader.prototype, "schedule_version", void 0);
__decorate$1([
  Struct.field(NewProducers2, { optional: true })
], BlockHeader.prototype, "new_producers", void 0);
__decorate$1([
  Struct.field("any", { array: true })
], BlockHeader.prototype, "header_extensions", void 0);
BlockHeader = BlockHeader_1 = __decorate$1([
  Struct.type("block_header")
], BlockHeader);
let SignedBlock = class SignedBlock2 extends BlockHeader {
};
__decorate$1([
  Struct.field("signature")
], SignedBlock.prototype, "producer_signature", void 0);
__decorate$1([
  Struct.field(FullTransactionReceipt, { array: true })
], SignedBlock.prototype, "transactions", void 0);
__decorate$1([
  Struct.field(BlockExtension2, { array: true })
], SignedBlock.prototype, "block_extensions", void 0);
SignedBlock = __decorate$1([
  Struct.type("signed_block")
], SignedBlock);
let NetMessage = class NetMessage2 extends Variant {
};
NetMessage = __decorate$1([
  Variant.type("net_message", [
    HandshakeMessage,
    ChainSizeMessage,
    GoAwayMessage,
    TimeMessage,
    NoticeMessage,
    RequestMessage,
    SyncRequestMessage,
    SignedBlock,
    PackedTransaction
  ])
], NetMessage);
class Canceled extends Error {
  constructor(reason, silent = false) {
    super(reason);
    this.silent = false;
    this.silent = silent;
    Object.setPrototypeOf(this, Canceled.prototype);
  }
}
function cancelable(promise2, onCancel) {
  let cancel2 = null;
  const cancelable2 = new Promise((resolve, reject) => {
    cancel2 = (reason = "", silent = false) => {
      try {
        if (onCancel) {
          onCancel(new Canceled(reason, silent));
        }
      } catch (e) {
        reject(e);
      }
      return cancelable2;
    };
    promise2.then(resolve, reject);
  });
  if (cancel2) {
    cancelable2.cancel = cancel2;
  }
  return cancelable2;
}
function __decorate(decorators, target, key2, desc) {
  var c2 = arguments.length, r = c2 < 3 ? target : desc, d2;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key2, desc);
  else for (var i2 = decorators.length - 1; i2 >= 0; i2--) if (d2 = decorators[i2]) r = (c2 < 3 ? d2(r) : c2 > 3 ? d2(target, key2, r) : d2(target, key2)) || r;
  return c2 > 3 && r && Object.defineProperty(target, key2, r), r;
}
typeof SuppressedError === "function" ? SuppressedError : function(error2, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error2, e.suppressed = suppressed, e;
};
let ExplorerDefinition = class ExplorerDefinition2 extends Struct {
  url(id) {
    return `${this.prefix}${id}${this.suffix}`;
  }
};
__decorate([
  Struct.field("string")
], ExplorerDefinition.prototype, "prefix", void 0);
__decorate([
  Struct.field("string")
], ExplorerDefinition.prototype, "suffix", void 0);
ExplorerDefinition = __decorate([
  Struct.type("explorer_definition")
], ExplorerDefinition);
var Logo_1;
let Logo = Logo_1 = class Logo2 extends Struct {
  static from(data) {
    if (typeof data === "string") {
      return new Logo_1({ light: data, dark: data });
    }
    return super.from(data);
  }
  getVariant(variant) {
    return this[variant];
  }
  toString() {
    return this.light;
  }
};
__decorate([
  Struct.field("string")
], Logo.prototype, "dark", void 0);
__decorate([
  Struct.field("string")
], Logo.prototype, "light", void 0);
Logo = Logo_1 = __decorate([
  Struct.type("logo")
], Logo);
let TokenIdentifier = class TokenIdentifier2 extends Struct {
};
__decorate([
  Struct.field(Checksum256)
], TokenIdentifier.prototype, "chain", void 0);
__decorate([
  Struct.field(Name)
], TokenIdentifier.prototype, "contract", void 0);
__decorate([
  Struct.field(Asset$1.Symbol)
], TokenIdentifier.prototype, "symbol", void 0);
TokenIdentifier = __decorate([
  Struct.type("token_identifier")
], TokenIdentifier);
let TokenMeta = class TokenMeta2 extends Struct {
};
__decorate([
  Struct.field(TokenIdentifier)
], TokenMeta.prototype, "id", void 0);
__decorate([
  Struct.field("string", { optional: true })
], TokenMeta.prototype, "logo", void 0);
TokenMeta = __decorate([
  Struct.type("token_meta")
], TokenMeta);
let TokenBalance = class TokenBalance2 extends Struct {
};
__decorate([
  Struct.field(Asset$1)
], TokenBalance.prototype, "asset", void 0);
__decorate([
  Struct.field(Name)
], TokenBalance.prototype, "contract", void 0);
__decorate([
  Struct.field(TokenMeta)
], TokenBalance.prototype, "metadata", void 0);
TokenBalance = __decorate([
  Struct.type("token_balance")
], TokenBalance);
class ChainDefinition {
  constructor(data) {
    this.id = Checksum256.from(data.id);
    this.url = data.url;
    this.logo = data.logo;
    this.explorer = data.explorer;
    this.accountDataType = data.accountDataType;
    this.coinType = data.coinType;
    if (data.systemTokenContract && data.systemTokenSymbol) {
      this.systemToken = TokenIdentifier.from({
        chain: this.id,
        contract: data.systemTokenContract,
        symbol: data.systemTokenSymbol
      });
    }
    if (data.systemToken) {
      this.systemToken = data.systemToken;
    }
  }
  static from(data) {
    return new ChainDefinition({
      ...data,
      explorer: data.explorer ? ExplorerDefinition.from(data.explorer) : void 0,
      logo: data.logo ? Logo.from(data.logo) : void 0
    });
  }
  get name() {
    const indice = chainIdsToIndices.get(String(this.id));
    if (!indice) {
      return "Unknown blockchain";
    }
    return ChainNames[indice];
  }
  getLogo() {
    const id = String(this.id);
    if (this.logo) {
      return Logo.from(this.logo);
    }
    if (chainLogos.has(id)) {
      const logo = chainLogos.get(id);
      if (logo) {
        return Logo.from(logo);
      }
    }
    return void 0;
  }
  equals(def) {
    const other = ChainDefinition.from(def);
    return this.id.equals(other.id) && this.url === other.url;
  }
}
const ChainNames = {
  EOS: "EOS",
  FIO: "FIO",
  FIOTestnet: "FIO (Testnet)",
  Jungle4: "Jungle 4 (Testnet)",
  KylinTestnet: "Kylin (Testnet)",
  Libre: "Libre",
  LibreTestnet: "Libre (Testnet)",
  Proton: "XPR Network",
  ProtonTestnet: "XPR Network (Testnet)",
  Telos: "Telos",
  TelosTestnet: "Telos (Testnet)",
  UX: "UX Network",
  Vaulta: "Vaulta",
  WAX: "WAX",
  WAXTestnet: "WAX (Testnet)",
  XPR: "XPR Network",
  XPRTestnet: "XPR Network (Testnet)"
};
let TelosAccountVoterInfo = class TelosAccountVoterInfo2 extends types$1.v1.AccountVoterInfo {
};
__decorate([
  Struct.field(Int64)
], TelosAccountVoterInfo.prototype, "last_stake", void 0);
TelosAccountVoterInfo = __decorate([
  Struct.type("telos_account_voter_info")
], TelosAccountVoterInfo);
let TelosAccountObject = class TelosAccountObject2 extends types$1.v1.AccountObject {
};
__decorate([
  Struct.field(TelosAccountVoterInfo, { optional: true })
], TelosAccountObject.prototype, "voter_info", void 0);
TelosAccountObject = __decorate([
  Struct.type("telos_account_object")
], TelosAccountObject);
let WAXAccountVoterInfo = class WAXAccountVoterInfo2 extends types$1.v1.AccountVoterInfo {
};
__decorate([
  Struct.field(Float64)
], WAXAccountVoterInfo.prototype, "unpaid_voteshare", void 0);
__decorate([
  Struct.field(TimePoint)
], WAXAccountVoterInfo.prototype, "unpaid_voteshare_last_updated", void 0);
__decorate([
  Struct.field(Float64)
], WAXAccountVoterInfo.prototype, "unpaid_voteshare_change_rate", void 0);
__decorate([
  Struct.field(TimePoint)
], WAXAccountVoterInfo.prototype, "last_claim_time", void 0);
WAXAccountVoterInfo = __decorate([
  Struct.type("wax_account_voter_info")
], WAXAccountVoterInfo);
let WAXAccountObject = class WAXAccountObject2 extends types$1.v1.AccountObject {
};
__decorate([
  Struct.field(WAXAccountVoterInfo, { optional: true })
], WAXAccountObject.prototype, "voter_info", void 0);
WAXAccountObject = __decorate([
  Struct.type("wax_account_object")
], WAXAccountObject);
var Chains;
(function(Chains2) {
  Chains2.EOS = ChainDefinition.from({
    id: "aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",
    url: "https://eos.greymass.com",
    coinType: 194,
    systemTokenSymbol: "4,EOS",
    systemTokenContract: "eosio.token"
  });
  Chains2.FIO = ChainDefinition.from({
    id: "21dcae42c0182200e93f954a074011f9048a7624c6fe81d3c9541a614a88bd1c",
    url: "https://fio.greymass.com",
    coinType: 235,
    systemTokenSymbol: "9,FIO",
    systemTokenContract: "eosio.token"
  });
  Chains2.FIOTestnet = ChainDefinition.from({
    id: "b20901380af44ef59c5918439a1f9a41d83669020319a80574b804a5f95cbd7e",
    url: "https://fiotestnet.greymass.com",
    systemTokenSymbol: "9,FIO",
    systemTokenContract: "fio.token"
  });
  Chains2.Jungle4 = ChainDefinition.from({
    id: "73e4385a2708e6d7048834fbc1079f2fabb17b3c125b146af438971e90716c4d",
    url: "https://jungle4.greymass.com",
    coinType: 194,
    systemTokenSymbol: "4,EOS",
    systemTokenContract: "eosio.token"
  });
  Chains2.KylinTestnet = ChainDefinition.from({
    id: "5fff1dae8dc8e2fc4d5b23b2c7665c97f9e9d8edf2b6485a86ba311c25639191",
    url: "https://kylintestnet.greymass.com",
    coinType: 194,
    systemTokenSymbol: "4,EOS",
    systemTokenContract: "eosio.token"
  });
  Chains2.Libre = ChainDefinition.from({
    id: "38b1d7815474d0c60683ecbea321d723e83f5da6ae5f1c1f9fecc69d9ba96465",
    url: "https://libre.greymass.com",
    systemTokenSymbol: "4,LIBRE",
    systemTokenContract: "eosio.token"
  });
  Chains2.LibreTestnet = ChainDefinition.from({
    id: "b64646740308df2ee06c6b72f34c0f7fa066d940e831f752db2006fcc2b78dee",
    url: "https://libretestnet.greymass.com",
    systemTokenSymbol: "4,LIBRE",
    systemTokenContract: "eosio.token"
  });
  Chains2.Proton = ChainDefinition.from({
    id: "384da888112027f0321850a169f737c33e53b388aad48b5adace4bab97f437e0",
    url: "https://proton.greymass.com",
    systemTokenSymbol: "4,XPR",
    systemTokenContract: "eosio.token"
  });
  Chains2.ProtonTestnet = ChainDefinition.from({
    id: "71ee83bcf52142d61019d95f9cc5427ba6a0d7ff8accd9e2088ae2abeaf3d3dd",
    url: "https://proton-testnet.greymass.com",
    systemTokenSymbol: "4,XPR",
    systemTokenContract: "eosio.token"
  });
  Chains2.Telos = ChainDefinition.from({
    id: "4667b205c6838ef70ff7988f6e8257e8be0e1284a2f59699054a018f743b1d11",
    url: "https://telos.greymass.com",
    accountDataType: TelosAccountObject,
    coinType: 977,
    systemTokenSymbol: "4,TLOS",
    systemTokenContract: "eosio.token"
  });
  Chains2.TelosTestnet = ChainDefinition.from({
    id: "1eaa0824707c8c16bd25145493bf062aecddfeb56c736f6ba6397f3195f33c9f",
    url: "https://telostestnet.greymass.com",
    accountDataType: TelosAccountObject,
    coinType: 977,
    systemTokenSymbol: "4,TLOS",
    systemTokenContract: "eosio.token"
  });
  Chains2.UX = ChainDefinition.from({
    id: "8fc6dce7942189f842170de953932b1f66693ad3788f766e777b6f9d22335c02",
    url: "https://api.uxnetwork.io",
    systemTokenSymbol: "4,UTX",
    systemTokenContract: "eosio.token"
  });
  Chains2.Vaulta = ChainDefinition.from({
    id: "aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",
    url: "https://eos.greymass.com",
    coinType: 194,
    systemTokenSymbol: "4,A",
    systemTokenContract: "core.vaulta"
  });
  Chains2.WAX = ChainDefinition.from({
    id: "1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4",
    url: "https://wax.greymass.com",
    accountDataType: WAXAccountObject,
    coinType: 14001,
    systemTokenSymbol: "8,WAX",
    systemTokenContract: "eosio.token"
  });
  Chains2.WAXTestnet = ChainDefinition.from({
    id: "f16b1833c747c43682f4386fca9cbb327929334a762755ebec17f6f23c9b8a12",
    url: "https://waxtestnet.greymass.com",
    accountDataType: WAXAccountObject,
    coinType: 14001,
    systemTokenSymbol: "8,WAX",
    systemTokenContract: "eosio.token"
  });
  Chains2.XPR = ChainDefinition.from({
    id: "384da888112027f0321850a169f737c33e53b388aad48b5adace4bab97f437e0",
    url: "https://proton.greymass.com",
    systemTokenSymbol: "4,XPR",
    systemTokenContract: "eosio.token"
  });
  Chains2.XPRTestnet = ChainDefinition.from({
    id: "71ee83bcf52142d61019d95f9cc5427ba6a0d7ff8accd9e2088ae2abeaf3d3dd",
    url: "https://proton-testnet.greymass.com",
    systemTokenSymbol: "4,XPR",
    systemTokenContract: "eosio.token"
  });
})(Chains || (Chains = {}));
const chainIdsToIndices = /* @__PURE__ */ new Map([
  ["21dcae42c0182200e93f954a074011f9048a7624c6fe81d3c9541a614a88bd1c", "FIO"],
  ["b20901380af44ef59c5918439a1f9a41d83669020319a80574b804a5f95cbd7e", "FIOTestnet"],
  ["73e4385a2708e6d7048834fbc1079f2fabb17b3c125b146af438971e90716c4d", "Jungle4"],
  ["5fff1dae8dc8e2fc4d5b23b2c7665c97f9e9d8edf2b6485a86ba311c25639191", "KylinTestnet"],
  ["38b1d7815474d0c60683ecbea321d723e83f5da6ae5f1c1f9fecc69d9ba96465", "Libre"],
  ["b64646740308df2ee06c6b72f34c0f7fa066d940e831f752db2006fcc2b78dee", "LibreTestnet"],
  ["384da888112027f0321850a169f737c33e53b388aad48b5adace4bab97f437e0", "XPR"],
  ["71ee83bcf52142d61019d95f9cc5427ba6a0d7ff8accd9e2088ae2abeaf3d3dd", "XPRTestnet"],
  ["4667b205c6838ef70ff7988f6e8257e8be0e1284a2f59699054a018f743b1d11", "Telos"],
  ["1eaa0824707c8c16bd25145493bf062aecddfeb56c736f6ba6397f3195f33c9f", "TelosTestnet"],
  ["8fc6dce7942189f842170de953932b1f66693ad3788f766e777b6f9d22335c02", "UX"],
  ["aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906", "Vaulta"],
  ["1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4", "WAX"],
  ["f16b1833c747c43682f4386fca9cbb327929334a762755ebec17f6f23c9b8a12", "WAXTestnet"]
]);
const chainLogos = /* @__PURE__ */ new Map([
  [
    "21dcae42c0182200e93f954a074011f9048a7624c6fe81d3c9541a614a88bd1c",
    "https://assets.wharfkit.com/chain/fio.png"
  ],
  [
    "b20901380af44ef59c5918439a1f9a41d83669020319a80574b804a5f95cbd7e",
    "https://assets.wharfkit.com/chain/fio.png"
  ],
  [
    "2a02a0053e5a8cf73a56ba0fda11e4d92e0238a4a2aa74fccf46d5a910746840",
    "https://assets.wharfkit.com/chain/jungle.png"
  ],
  [
    "73e4385a2708e6d7048834fbc1079f2fabb17b3c125b146af438971e90716c4d",
    "https://assets.wharfkit.com/chain/jungle.png"
  ],
  [
    "38b1d7815474d0c60683ecbea321d723e83f5da6ae5f1c1f9fecc69d9ba96465",
    "https://assets.wharfkit.com/chain/libre.png"
  ],
  [
    "b64646740308df2ee06c6b72f34c0f7fa066d940e831f752db2006fcc2b78dee",
    "https://assets.wharfkit.com/chain/libre.png"
  ],
  [
    "384da888112027f0321850a169f737c33e53b388aad48b5adace4bab97f437e0",
    "https://assets.wharfkit.com/chain/xprnetwork.png"
  ],
  [
    "71ee83bcf52142d61019d95f9cc5427ba6a0d7ff8accd9e2088ae2abeaf3d3dd",
    "https://assets.wharfkit.com/chain/xprnetwork.png"
  ],
  [
    "4667b205c6838ef70ff7988f6e8257e8be0e1284a2f59699054a018f743b1d11",
    "https://assets.wharfkit.com/chain/telos.png"
  ],
  [
    "1eaa0824707c8c16bd25145493bf062aecddfeb56c736f6ba6397f3195f33c9f",
    "https://assets.wharfkit.com/chain/telos.png"
  ],
  [
    "aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",
    "https://assets.wharfkit.com/chain/vaulta.png"
  ],
  [
    "8fc6dce7942189f842170de953932b1f66693ad3788f766e777b6f9d22335c02",
    "https://assets.wharfkit.com/chain/ux.png"
  ],
  [
    "1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4",
    "https://assets.wharfkit.com/chain/wax.png"
  ],
  [
    "f16b1833c747c43682f4386fca9cbb327929334a762755ebec17f6f23c9b8a12",
    "https://assets.wharfkit.com/chain/wax.png"
  ]
]);
/**
 * EOSIO Signing Request v3.2.0
 * https://github.com/greymass/eosio-signing-request
 *
 * @license
 * Copyright © 2021 Greymass Inc.
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the “Software”), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 * 
 * YOU ACKNOWLEDGE THAT THIS SOFTWARE IS NOT DESIGNED, LICENSED OR
 * INTENDED FOR USE IN THE DESIGN, CONSTRUCTION, OPERATION OR
 * MAINTENANCE OF ANY MILITARY FACILITY.
 */
const baseCharset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
const lookup = new Uint8Array(256);
for (let i2 = 0; i2 < 62; i2++) {
  lookup[baseCharset.charCodeAt(i2)] = i2;
}
lookup[43] = lookup[45] = 62;
lookup[47] = lookup[95] = 63;
function encode(data, urlSafe = true) {
  const byteLength = data.byteLength;
  const byteRemainder = byteLength % 3;
  const mainLength = byteLength - byteRemainder;
  const charset = baseCharset + (urlSafe ? "-_" : "+/");
  const parts = [];
  let a;
  let b;
  let c2;
  let d2;
  let chunk;
  for (let i2 = 0; i2 < mainLength; i2 += 3) {
    chunk = data[i2] << 16 | data[i2 + 1] << 8 | data[i2 + 2];
    a = (chunk & 16515072) >> 18;
    b = (chunk & 258048) >> 12;
    c2 = (chunk & 4032) >> 6;
    d2 = chunk & 63;
    parts.push(charset[a] + charset[b] + charset[c2] + charset[d2]);
  }
  if (byteRemainder === 1) {
    chunk = data[mainLength];
    a = (chunk & 252) >> 2;
    b = (chunk & 3) << 4;
    parts.push(charset[a] + charset[b]);
  } else if (byteRemainder === 2) {
    chunk = data[mainLength] << 8 | data[mainLength + 1];
    a = (chunk & 64512) >> 10;
    b = (chunk & 1008) >> 4;
    c2 = (chunk & 15) << 2;
    parts.push(charset[a] + charset[b] + charset[c2]);
  }
  return parts.join("");
}
function decode(input) {
  const byteLength = input.length * 0.75;
  const data = new Uint8Array(byteLength);
  let a;
  let b;
  let c2;
  let d2;
  let p2 = 0;
  for (let i2 = 0; i2 < input.length; i2 += 4) {
    a = lookup[input.charCodeAt(i2)];
    b = lookup[input.charCodeAt(i2 + 1)];
    c2 = lookup[input.charCodeAt(i2 + 2)];
    d2 = lookup[input.charCodeAt(i2 + 3)];
    data[p2++] = a << 2 | b >> 4;
    data[p2++] = (b & 15) << 4 | c2 >> 2;
    data[p2++] = (c2 & 3) << 6 | d2 & 63;
  }
  return data;
}
var ChainName;
(function(ChainName2) {
  ChainName2[ChainName2["UNKNOWN"] = 0] = "UNKNOWN";
  ChainName2[ChainName2["EOS"] = 1] = "EOS";
  ChainName2[ChainName2["TELOS"] = 2] = "TELOS";
  ChainName2[ChainName2["JUNGLE"] = 3] = "JUNGLE";
  ChainName2[ChainName2["KYLIN"] = 4] = "KYLIN";
  ChainName2[ChainName2["WORBLI"] = 5] = "WORBLI";
  ChainName2[ChainName2["BOS"] = 6] = "BOS";
  ChainName2[ChainName2["MEETONE"] = 7] = "MEETONE";
  ChainName2[ChainName2["INSIGHTS"] = 8] = "INSIGHTS";
  ChainName2[ChainName2["BEOS"] = 9] = "BEOS";
  ChainName2[ChainName2["WAX"] = 10] = "WAX";
  ChainName2[ChainName2["PROTON"] = 11] = "PROTON";
  ChainName2[ChainName2["FIO"] = 12] = "FIO";
})(ChainName || (ChainName = {}));
let ChainId = class ChainId2 extends Checksum256 {
  static from(value) {
    if (isInstanceOf(value, this)) {
      return value;
    }
    if (typeof value === "number") {
      value = ChainIdLookup.get(value);
      if (!value) {
        throw new Error("Unknown chain id alias");
      }
    }
    return super.from(value);
  }
  get chainVariant() {
    const name = this.chainName;
    if (name !== ChainName.UNKNOWN) {
      return ChainIdVariant.from(["chain_alias", name]);
    }
    return ChainIdVariant.from(this);
  }
  get chainName() {
    const cid = this.hexString;
    for (const [n2, id] of ChainIdLookup) {
      if (id === cid) {
        return n2;
      }
    }
    return ChainName.UNKNOWN;
  }
};
ChainId = __decorate$1([
  TypeAlias("chain_id")
], ChainId);
let ChainAlias = class ChainAlias2 extends UInt8 {
};
ChainAlias = __decorate$1([
  TypeAlias("chain_alias")
], ChainAlias);
let ChainIdVariant = class ChainIdVariant2 extends Variant {
  get chainId() {
    if (isInstanceOf(this.value, ChainId)) {
      return this.value;
    }
    return ChainId.from(Number(this.value.value));
  }
};
ChainIdVariant = __decorate$1([
  Variant.type("variant_id", [ChainAlias, ChainId])
], ChainIdVariant);
const ChainIdLookup = /* @__PURE__ */ new Map([
  [ChainName.EOS, "aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906"],
  [ChainName.TELOS, "4667b205c6838ef70ff7988f6e8257e8be0e1284a2f59699054a018f743b1d11"],
  [ChainName.JUNGLE, "e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473"],
  [ChainName.KYLIN, "5fff1dae8dc8e2fc4d5b23b2c7665c97f9e9d8edf2b6485a86ba311c25639191"],
  [ChainName.WORBLI, "73647cde120091e0a4b85bced2f3cfdb3041e266cbbe95cee59b73235a1b3b6f"],
  [ChainName.BOS, "d5a3d18fbb3c084e3b1f3fa98c21014b5f3db536cc15d08f9f6479517c6a3d86"],
  [ChainName.MEETONE, "cfe6486a83bad4962f232d48003b1824ab5665c36778141034d75e57b956e422"],
  [ChainName.INSIGHTS, "b042025541e25a472bffde2d62edd457b7e70cee943412b1ea0f044f88591664"],
  [ChainName.BEOS, "b912d19a6abd2b1b05611ae5be473355d64d95aeff0c09bedc8c166cd6468fe4"],
  [ChainName.WAX, "1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4"],
  [ChainName.PROTON, "384da888112027f0321850a169f737c33e53b388aad48b5adace4bab97f437e0"],
  [ChainName.FIO, "21dcae42c0182200e93f954a074011f9048a7624c6fe81d3c9541a614a88bd1c"]
]);
var RequestFlags_1;
let AccountName = class AccountName2 extends Name {
};
AccountName = __decorate$1([
  TypeAlias("account_name")
], AccountName);
let PermissionName = class PermissionName2 extends Name {
};
PermissionName = __decorate$1([
  TypeAlias("permission_name")
], PermissionName);
let IdentityV2 = class IdentityV22 extends Struct {
};
__decorate$1([
  Struct.field(PermissionLevel, { optional: true })
], IdentityV2.prototype, "permission", void 0);
IdentityV2 = __decorate$1([
  Struct.type("identity")
], IdentityV2);
let IdentityV3 = class IdentityV32 extends Struct {
};
__decorate$1([
  Struct.field("name")
], IdentityV3.prototype, "scope", void 0);
__decorate$1([
  Struct.field(PermissionLevel, { optional: true })
], IdentityV3.prototype, "permission", void 0);
IdentityV3 = __decorate$1([
  Struct.type("identity")
], IdentityV3);
let RequestVariantV2 = class RequestVariantV22 extends Variant {
};
RequestVariantV2 = __decorate$1([
  Variant.type("variant_req", [Action, { type: Action, array: true }, Transaction, IdentityV2])
], RequestVariantV2);
let RequestVariantV3 = class RequestVariantV32 extends Variant {
};
RequestVariantV3 = __decorate$1([
  Variant.type("variant_req", [Action, { type: Action, array: true }, Transaction, IdentityV3])
], RequestVariantV3);
let RequestFlags = RequestFlags_1 = class RequestFlags2 extends UInt8 {
  get broadcast() {
    return (Number(this) & RequestFlags_1.broadcast) !== 0;
  }
  set broadcast(enabled) {
    this.setFlag(RequestFlags_1.broadcast, enabled);
  }
  get background() {
    return (Number(this) & RequestFlags_1.background) !== 0;
  }
  set background(enabled) {
    this.setFlag(RequestFlags_1.background, enabled);
  }
  setFlag(flag, enabled) {
    if (enabled) {
      this.value = UInt8.from(Number(this) | flag).value;
    } else {
      this.value = UInt8.from(Number(this) & ~flag).value;
    }
  }
};
RequestFlags.broadcast = 1 << 0;
RequestFlags.background = 1 << 1;
RequestFlags = RequestFlags_1 = __decorate$1([
  TypeAlias("request_flags")
], RequestFlags);
let InfoPair = class InfoPair2 extends Struct {
};
__decorate$1([
  Struct.field("string")
], InfoPair.prototype, "key", void 0);
__decorate$1([
  Struct.field("bytes")
], InfoPair.prototype, "value", void 0);
InfoPair = __decorate$1([
  Struct.type("info_pair")
], InfoPair);
let RequestDataV2 = class RequestDataV22 extends Struct {
};
__decorate$1([
  Struct.field(ChainIdVariant)
], RequestDataV2.prototype, "chain_id", void 0);
__decorate$1([
  Struct.field(RequestVariantV2)
], RequestDataV2.prototype, "req", void 0);
__decorate$1([
  Struct.field(RequestFlags)
], RequestDataV2.prototype, "flags", void 0);
__decorate$1([
  Struct.field("string")
], RequestDataV2.prototype, "callback", void 0);
__decorate$1([
  Struct.field(InfoPair, { array: true })
], RequestDataV2.prototype, "info", void 0);
RequestDataV2 = __decorate$1([
  Struct.type("signing_request")
], RequestDataV2);
let RequestDataV3 = class RequestDataV32 extends Struct {
};
__decorate$1([
  Struct.field(ChainIdVariant)
], RequestDataV3.prototype, "chain_id", void 0);
__decorate$1([
  Struct.field(RequestVariantV3)
], RequestDataV3.prototype, "req", void 0);
__decorate$1([
  Struct.field(RequestFlags)
], RequestDataV3.prototype, "flags", void 0);
__decorate$1([
  Struct.field("string")
], RequestDataV3.prototype, "callback", void 0);
__decorate$1([
  Struct.field(InfoPair, { array: true })
], RequestDataV3.prototype, "info", void 0);
RequestDataV3 = __decorate$1([
  Struct.type("signing_request")
], RequestDataV3);
let RequestSignature = class RequestSignature2 extends Struct {
};
__decorate$1([
  Struct.field("name")
], RequestSignature.prototype, "signer", void 0);
__decorate$1([
  Struct.field("signature")
], RequestSignature.prototype, "signature", void 0);
RequestSignature = __decorate$1([
  Struct.type("request_signature")
], RequestSignature);
var IdentityProof_1;
let IdentityProof = IdentityProof_1 = class IdentityProof2 extends Struct {
  static from(value) {
    if (isInstanceOf(value, IdentityProof_1)) {
      return value;
    } else if (typeof value === "string") {
      return IdentityProof_1.fromString(value);
    } else {
      return super.from(value);
    }
  }
  /**
   * Create a new instance from an EOSIO authorization header string.
   * "EOSIO <base64payload>"
   */
  static fromString(string) {
    const parts = string.split(" ");
    if (parts.length !== 2 || parts[0] !== "EOSIO") {
      throw new Error("Invalid IdentityProof string");
    }
    const data = decode(parts[1]);
    return Serializer.decode({ data, type: IdentityProof_1 });
  }
  /** Create a new instance from a callback payload. */
  static fromPayload(payload, options = {}) {
    const request = SigningRequest.from(payload.req, options);
    if (!(request.version >= 3 && request.isIdentity())) {
      throw new Error("Not an identity request");
    }
    return this.from({
      chainId: payload.cid || request.getChainId(),
      scope: request.getIdentityScope(),
      expiration: payload.ex,
      signer: { actor: payload.sa, permission: payload.sp },
      signature: payload.sig
    });
  }
  /**
   * Transaction this proof resolves to.
   * @internal
   */
  get transaction() {
    const action = Action.from({
      account: "",
      name: "identity",
      authorization: [this.signer],
      data: IdentityV3.from({ scope: this.scope, permission: this.signer })
    });
    return Transaction.from({
      ref_block_num: 0,
      ref_block_prefix: 0,
      expiration: this.expiration,
      actions: [action]
    });
  }
  /**
   * Recover the public key that signed this proof.
   */
  recover() {
    return this.signature.recoverDigest(this.transaction.signingDigest(this.chainId));
  }
  /**
   * Verify that given authority signed this proof.
   * @param auth The accounts signing authority.
   * @param currentTime Time to verify expiry against, if unset will use system time.
   */
  verify(auth, currentTime) {
    const now2 = TimePointSec.from(currentTime || /* @__PURE__ */ new Date()).toMilliseconds();
    return now2 < this.expiration.toMilliseconds() && Authority.from(auth).hasPermission(this.recover());
  }
  /**
   * Encode the proof to an `EOSIO` auth header string.
   */
  toString() {
    const data = Serializer.encode({ object: this });
    return `EOSIO ${encode(data.array, false)}`;
  }
};
__decorate$1([
  Struct.field(ChainId)
], IdentityProof.prototype, "chainId", void 0);
__decorate$1([
  Struct.field(Name)
], IdentityProof.prototype, "scope", void 0);
__decorate$1([
  Struct.field(TimePointSec)
], IdentityProof.prototype, "expiration", void 0);
__decorate$1([
  Struct.field(PermissionLevel)
], IdentityProof.prototype, "signer", void 0);
__decorate$1([
  Struct.field(Signature)
], IdentityProof.prototype, "signature", void 0);
IdentityProof = IdentityProof_1 = __decorate$1([
  Struct.type("identity_proof")
], IdentityProof);
const PlaceholderName = Name.from("............1");
const PlaceholderPermission = Name.from("............2");
const PlaceholderAuth = PermissionLevel.from({
  actor: PlaceholderName,
  permission: PlaceholderPermission
});
class SigningRequest {
  /**
   * Create a new signing request.
   * Normally not used directly, see the `create` and `from` class methods.
   */
  constructor(version2, data, zlib, abiProvider, signature2) {
    if (data.flags.broadcast && data.req.variantName === "identity") {
      throw new Error("Invalid request (identity request cannot be broadcast)");
    }
    this.version = version2;
    this.data = data;
    this.zlib = zlib;
    this.abiProvider = abiProvider;
    this.signature = signature2;
  }
  /** Return the identity ABI for given version. */
  static identityAbi(version2) {
    const abi = Serializer.synthesize(this.identityType(version2));
    abi.actions = [{ name: "identity", type: "identity", ricardian_contract: "" }];
    return abi;
  }
  /** Return the ABISerializableType identity type for given version. */
  static identityType(version2) {
    return version2 === 2 ? IdentityV2 : IdentityV3;
  }
  /** Return the ABISerializableType storage type for given version. */
  static storageType(version2) {
    return version2 === 2 ? RequestDataV2 : RequestDataV3;
  }
  /** Create a new signing request. */
  static async create(args, options = {}) {
    let actions;
    if (args.action) {
      actions = [args.action];
    } else if (args.actions) {
      actions = args.actions;
    } else if (args.transaction) {
      actions = args.transaction.actions || [];
    } else {
      actions = [];
    }
    const requiredAbis = actions.filter((action) => !Bytes.isBytes(action.data) && action.data.constructor.abiName === void 0).map((action) => Name.from(action.account));
    const abis = {};
    if (requiredAbis.length > 0) {
      const provider = options.abiProvider;
      if (!provider) {
        throw new Error("Missing abi provider");
      }
      const accountAbis = await Promise.all(requiredAbis.map((account) => provider.getAbi(account)));
      for (const [idx, abi] of accountAbis.entries()) {
        abis[requiredAbis[idx].toString()] = abi;
      }
    }
    return this.createSync(args, options, abis);
  }
  /**
   * Synchronously create a new signing request.
   * @throws If an un-encoded action with no abi def is encountered.
   */
  static createSync(args, options = {}, abis = {}) {
    let version2 = 2;
    const data = {};
    const encode2 = (action) => encodeAction(action, abis);
    if (args.chainId === null) {
      version2 = 3;
    }
    if (args.identity !== void 0) {
      if (args.identity.scope) {
        version2 = 3;
      }
      data.req = ["identity", this.identityType(version2).from(args.identity)];
    } else if (args.action && !args.actions && !args.transaction) {
      data.req = ["action", encode2(args.action)];
    } else if (args.actions && !args.action && !args.transaction) {
      if (args.actions.length === 1) {
        data.req = ["action", encode2(args.actions[0])];
      } else {
        data.req = ["action[]", args.actions.map(encode2)];
      }
    } else if (args.transaction && !args.action && !args.actions) {
      const tx = args.transaction;
      if (tx.expiration === void 0) {
        tx.expiration = "1970-01-01T00:00:00.000";
      }
      if (tx.ref_block_num === void 0) {
        tx.ref_block_num = 0;
      }
      if (tx.ref_block_prefix === void 0) {
        tx.ref_block_prefix = 0;
      }
      if (tx.context_free_actions === void 0) {
        tx.context_free_actions = [];
      }
      if (tx.transaction_extensions === void 0) {
        tx.transaction_extensions = [];
      }
      if (tx.delay_sec === void 0) {
        tx.delay_sec = 0;
      }
      if (tx.max_cpu_usage_ms === void 0) {
        tx.max_cpu_usage_ms = 0;
      }
      if (tx.max_net_usage_words === void 0) {
        tx.max_net_usage_words = 0;
      }
      if (tx.actions === void 0) {
        tx.actions = [];
      }
      if (tx.context_free_actions === void 0) {
        tx.context_free_actions = [];
      }
      tx.actions = tx.actions.map(encode2);
      data.req = ["transaction", tx];
    } else {
      throw new TypeError("Invalid arguments: Must have exactly one of action, actions or transaction");
    }
    if (args.chainId === null) {
      data.chain_id = ChainIdVariant.from(["chain_alias", 0]);
    } else {
      data.chain_id = ChainId.from(args.chainId || ChainName.EOS).chainVariant;
    }
    const flags = RequestFlags.from(0);
    let callback = "";
    flags.broadcast = args.broadcast !== void 0 ? args.broadcast : data.req[0] !== "identity";
    if (typeof args.callback === "string") {
      callback = args.callback;
    } else if (typeof args.callback === "object") {
      callback = args.callback.url;
      flags.background = args.callback.background || false;
    }
    data.flags = flags;
    data.callback = callback;
    data.info = [];
    if (typeof args.info === "object") {
      for (const key2 in args.info) {
        const isOwn = Object.prototype.hasOwnProperty.call(args.info, key2);
        if (isOwn) {
          let value = args.info[key2];
          if (typeof value === "string") {
            value = Bytes.from(value, "utf8");
          } else if (!(value instanceof Bytes)) {
            value = Serializer.encode({ object: value });
          }
          data.info.push({ key: key2, value });
        }
      }
    }
    if (args.chainIds && args.chainId === null) {
      const ids = args.chainIds.map((id) => ChainId.from(id).chainVariant);
      data.info.push({
        key: "chain_ids",
        value: Serializer.encode({ object: ids, type: { type: ChainIdVariant, array: true } })
      });
    }
    const req = new SigningRequest(version2, this.storageType(version2).from(data), options.zlib, options.abiProvider);
    if (options.signatureProvider) {
      req.sign(options.signatureProvider);
    }
    return req;
  }
  /** Creates an identity request. */
  static identity(args, options = {}) {
    let permission = {
      actor: args.account || PlaceholderName,
      permission: args.permission || PlaceholderPermission
    };
    if (permission.actor === PlaceholderName && permission.permission === PlaceholderPermission) {
      permission = void 0;
    }
    return this.createSync({
      ...args,
      identity: {
        permission,
        scope: args.scope
      },
      broadcast: false
    }, options);
  }
  /**
   * Create a request from a chain id and serialized transaction.
   * @param chainId The chain id where the transaction is valid.
   * @param serializedTransaction The serialized transaction.
   * @param options Creation options.
   */
  static fromTransaction(chainId, serializedTransaction, options = {}) {
    const id = ChainId.from(chainId);
    serializedTransaction = Bytes.from(serializedTransaction);
    const encoder = new ABIEncoder();
    encoder.writeByte(2);
    encoder.writeArray(Serializer.encode({ object: id.chainVariant }).array);
    encoder.writeByte(2);
    encoder.writeArray(Bytes.from(serializedTransaction).array);
    encoder.writeByte(RequestFlags.broadcast);
    encoder.writeByte(0);
    encoder.writeByte(0);
    return SigningRequest.fromData(encoder.getData(), options);
  }
  /** Creates a signing request from encoded `esr:` uri string. */
  static from(uri, options = {}) {
    if (typeof uri !== "string") {
      throw new Error("Invalid request uri");
    }
    const [, path] = uri.split(":");
    const data = decode(path.startsWith("//") ? path.slice(2) : path);
    return SigningRequest.fromData(data, options);
  }
  static fromData(data, options = {}) {
    data = Bytes.from(data);
    const header = data.array[0];
    const version2 = header & -129;
    if (version2 !== 2 && version2 !== 3) {
      throw new Error("Unsupported protocol version");
    }
    let payload = data.droppingFirst(1);
    if ((header & 1 << 7) !== 0) {
      if (!options.zlib) {
        throw new Error("Compressed URI needs zlib");
      }
      payload = Bytes.from(options.zlib.inflateRaw(payload.array));
    }
    const decoder = new ABIDecoder(payload.array);
    const req = Serializer.decode({ data: decoder, type: this.storageType(version2) });
    let sig;
    if (decoder.canRead()) {
      sig = Serializer.decode({ data: decoder, type: RequestSignature });
    }
    return new SigningRequest(version2, req, options.zlib, options.abiProvider, sig);
  }
  /**
   * Sign the request, mutating.
   * @param signatureProvider The signature provider that provides a signature for the signer.
   */
  sign(signatureProvider) {
    const message = this.getSignatureDigest();
    this.signature = RequestSignature.from(signatureProvider.sign(message));
  }
  /**
   * Get the signature digest for this request.
   */
  getSignatureDigest() {
    const prefix = [this.version, 114, 101, 113, 117, 101, 115, 116];
    return Checksum256.hash(Bytes.from(prefix).appending(this.getData()));
  }
  /**
   * Set the signature data for this request, mutating.
   * @param signer Account name of signer.
   * @param signature The signature string.
   */
  setSignature(signer, signature2) {
    this.signature = RequestSignature.from({ signer, signature: signature2 });
  }
  /**
   * Set the request callback, mutating.
   * @param url Where the callback should be sent.
   * @param background Whether the callback should be sent in the background.
   */
  setCallback(url, background) {
    this.data.callback = url;
    this.data.flags.background = background;
  }
  /**
   * Set broadcast flag.
   * @param broadcast Whether the transaction should be broadcast by receiver.
   */
  setBroadcast(broadcast) {
    this.data.flags.broadcast = broadcast;
  }
  /**
   * Encode this request into an `esr:` uri.
   * @argument compress Whether to compress the request data using zlib,
   *                    defaults to true if omitted and zlib is present;
   *                    otherwise false.
   * @argument slashes Whether add slashes after the protocol scheme, i.e. `esr://`.
   *                   Defaults to true.
   * @returns An esr uri string.
   */
  encode(compress, slashes, scheme = "esr:") {
    const shouldCompress = compress !== void 0 ? compress : this.zlib !== void 0;
    if (shouldCompress && this.zlib === void 0) {
      throw new Error("Need zlib to compress");
    }
    let header = this.version;
    const data = this.getData();
    const sigData = this.getSignatureData();
    let array = new Uint8Array(data.byteLength + sigData.byteLength);
    array.set(data, 0);
    array.set(sigData, data.byteLength);
    if (shouldCompress) {
      const deflated = this.zlib.deflateRaw(array);
      if (array.byteLength > deflated.byteLength) {
        header |= 1 << 7;
        array = deflated;
      }
    }
    const out = new Uint8Array(1 + array.byteLength);
    out[0] = header;
    out.set(array, 1);
    if (slashes !== false) {
      scheme += "//";
    }
    return scheme + encode(out);
  }
  /** Get the request data without header or signature. */
  getData() {
    return Serializer.encode({ object: this.data }).array;
  }
  /** Get signature data, returns an empty array if request is not signed. */
  getSignatureData() {
    if (!this.signature) {
      return new Uint8Array(0);
    }
    return Serializer.encode({ object: this.signature }).array;
  }
  /** ABI definitions required to resolve request. */
  getRequiredAbis() {
    return this.getRawActions().filter((action) => !isIdentity(action)).map((action) => action.account).filter((value, index, self2) => self2.indexOf(value) === index);
  }
  /** Whether TaPoS values are required to resolve request. */
  requiresTapos() {
    const tx = this.getRawTransaction();
    return !this.isIdentity() && !hasTapos(tx);
  }
  /** Resolve required ABI definitions. */
  async fetchAbis(abiProvider) {
    const required = this.getRequiredAbis();
    if (required.length > 0) {
      const provider = abiProvider || this.abiProvider;
      if (!provider) {
        throw new Error("Missing ABI provider");
      }
      const abis = /* @__PURE__ */ new Map();
      await Promise.all(required.map(async (account) => {
        abis.set(account.toString(), ABI.from(await provider.getAbi(account)));
      }));
      return abis;
    } else {
      return /* @__PURE__ */ new Map();
    }
  }
  /**
   * Decode raw actions actions to object representations.
   * @param abis ABI defenitions required to decode all actions.
   * @param signer Placeholders in actions will be resolved to signer if set.
   */
  resolveActions(abis, signer) {
    return this.getRawActions().map((rawAction) => {
      let abi;
      if (isIdentity(rawAction)) {
        abi = this.constructor.identityAbi(this.version);
      } else {
        const rawAbi = abis.get(rawAction.account.toString());
        if (!rawAbi) {
          throw new Error(`Missing ABI definition for ${rawAction.account}`);
        }
        abi = ABI.from(rawAbi);
      }
      const type = abi.getActionType(rawAction.name);
      if (!type) {
        throw new Error(`Missing type for action ${rawAction.account}:${rawAction.name} in ABI`);
      }
      let data = rawAction.decodeData(abi);
      let authorization = rawAction.authorization;
      if (signer) {
        const signerPerm = PermissionLevel.from(signer);
        const resolve = (value) => {
          if (value instanceof Name) {
            if (value.equals(PlaceholderName)) {
              return signerPerm.actor;
            } else if (value.equals(PlaceholderPermission)) {
              return signerPerm.permission;
            } else {
              return value;
            }
          } else if (Array.isArray(value)) {
            return value.map(resolve);
          } else if (typeof value === "object" && value !== null) {
            for (const key2 of Object.keys(value)) {
              value[key2] = resolve(value[key2]);
            }
            return value;
          } else {
            return value;
          }
        };
        data = resolve(data);
        authorization = authorization.map((auth) => {
          let { actor, permission } = auth;
          if (actor.equals(PlaceholderName)) {
            actor = signerPerm.actor;
          }
          if (permission.equals(PlaceholderPermission)) {
            permission = signerPerm.permission;
          }
          if (permission.equals(PlaceholderName)) {
            permission = signerPerm.permission;
          }
          return PermissionLevel.from({ actor, permission });
        });
      }
      return {
        ...rawAction,
        authorization,
        data
      };
    });
  }
  resolveTransaction(abis, signer, ctx = {}) {
    const tx = this.getRawTransaction();
    if (!this.isIdentity() && !hasTapos(tx)) {
      if (ctx.expiration !== void 0 && ctx.ref_block_num !== void 0 && ctx.ref_block_prefix !== void 0) {
        tx.expiration = TimePointSec.from(ctx.expiration);
        tx.ref_block_num = UInt16.from(ctx.ref_block_num, "truncate");
        tx.ref_block_prefix = UInt32.from(ctx.ref_block_prefix);
      } else if (ctx.block_num !== void 0 && ctx.ref_block_prefix !== void 0 && ctx.timestamp !== void 0) {
        tx.expiration = expirationTime(ctx.timestamp, ctx.expire_seconds);
        tx.ref_block_num = UInt16.from(ctx.block_num, "truncate");
        tx.ref_block_prefix = UInt32.from(ctx.ref_block_prefix);
      } else {
        throw new Error("Invalid transaction context, need either a reference block or explicit TaPoS values");
      }
    } else if (this.isIdentity() && this.version > 2) {
      tx.expiration = ctx.expiration ? TimePointSec.from(ctx.expiration) : expirationTime(ctx.timestamp, ctx.expire_seconds);
    }
    const actions = this.resolveActions(abis, signer);
    const context_free_actions = tx.context_free_actions;
    return { ...tx, context_free_actions, actions };
  }
  resolve(abis, signer, ctx = {}) {
    const tx = this.resolveTransaction(abis, signer, ctx);
    const actions = tx.actions.map((action) => {
      let abi;
      if (isIdentity(action)) {
        abi = this.constructor.identityAbi(this.version);
      } else {
        abi = abis.get(action.account.toString());
      }
      if (!abi) {
        throw new Error(`Missing ABI definition for ${action.account}`);
      }
      const type = abi.getActionType(action.name);
      const data = Serializer.encode({ object: action.data, type, abi });
      return Action.from({ ...action, data });
    });
    const transaction = Transaction.from({ ...tx, actions });
    let chainId;
    if (this.isMultiChain()) {
      if (!ctx.chainId) {
        throw new Error("Missing chosen chain ID for multi-chain request");
      }
      chainId = ChainId.from(ctx.chainId);
      const ids = this.getChainIds();
      if (ids && !ids.some((id) => chainId.equals(id))) {
        throw new Error("Trying to resolve for chain ID not defined in request");
      }
    } else {
      chainId = this.getChainId();
    }
    return new ResolvedSigningRequest(this, PermissionLevel.from(signer), transaction, tx, chainId);
  }
  /**
   * Get the id of the chain where this request is valid.
   * @returns The 32-byte chain id as hex encoded string.
   */
  getChainId() {
    return this.data.chain_id.chainId;
  }
  /**
   * Chain IDs this request is valid for, only valid for multi chain requests. Value of `null` when `isMultiChain` is true denotes any chain.
   */
  getChainIds() {
    if (!this.isMultiChain()) {
      return null;
    }
    const ids = this.getInfoKey("chain_ids", { type: ChainIdVariant, array: true });
    if (ids) {
      return ids.map((id) => id.chainId);
    }
    return null;
  }
  /**
   * Set chain IDs this request is valid for, only considered for multi chain requests.
   */
  setChainIds(ids) {
    const value = ids.map((id) => ChainId.from(id).chainVariant);
    this.setInfoKey("chain_ids", value, { type: ChainIdVariant, array: true });
  }
  /**
   * True if chainId is set to chain alias `0` which indicates that the request is valid for any chain.
   */
  isMultiChain() {
    return this.data.chain_id.variantIdx === 0 && this.data.chain_id.value.equals(ChainName.UNKNOWN);
  }
  /** Return the actions in this request with action data encoded. */
  getRawActions() {
    const req = this.data.req;
    switch (req.variantName) {
      case "action":
        return [req.value];
      case "action[]":
        return req.value;
      case "identity": {
        if (this.version === 2) {
          const id = req.value;
          let data = "0101000000000000000200000000000000";
          let authorization = [PlaceholderAuth];
          if (id.permission) {
            data = Serializer.encode({ object: id });
            authorization = [id.permission];
          }
          const action = Action.from({
            account: "",
            name: "identity",
            authorization,
            data
          });
          delete action.abi;
          return [action];
        } else {
          let { scope, permission } = req.value;
          if (!permission) {
            permission = PlaceholderAuth;
          }
          const data = Serializer.encode({ object: { scope, permission }, type: IdentityV3 });
          const action = Action.from({
            account: "",
            name: "identity",
            authorization: [permission],
            data
          });
          delete action.abi;
          return [action];
        }
      }
      case "transaction":
        return req.value.actions;
      default:
        throw new Error("Invalid signing request data");
    }
  }
  /** Unresolved transaction. */
  getRawTransaction() {
    const req = this.data.req;
    switch (req.variantName) {
      case "transaction":
        return Transaction.from({ ...req.value });
      case "action":
      case "action[]":
      case "identity":
        return Transaction.from({
          actions: this.getRawActions(),
          context_free_actions: [],
          transaction_extensions: [],
          expiration: "1970-01-01T00:00:00.000",
          ref_block_num: 0,
          ref_block_prefix: 0,
          max_cpu_usage_ms: 0,
          max_net_usage_words: 0,
          delay_sec: 0
        });
      default:
        throw new Error("Invalid signing request data");
    }
  }
  /** Whether the request is an identity request. */
  isIdentity() {
    return this.data.req.variantName === "identity";
  }
  /** Whether the request should be broadcast by signer. */
  shouldBroadcast() {
    if (this.isIdentity()) {
      return false;
    }
    return this.data.flags.broadcast;
  }
  /**
   * Present if the request is an identity request and requests a specific account.
   * @note This returns `nil` unless a specific identity has been requested,
   *       use `isIdentity` to check id requests.
   */
  getIdentity() {
    if (!this.isIdentity()) {
      return null;
    }
    const id = this.data.req.value;
    if (id.permission && !id.permission.actor.equals(PlaceholderName)) {
      return id.permission.actor;
    }
    return null;
  }
  /**
   * Present if the request is an identity request and requests a specific permission.
   * @note This returns `nil` unless a specific permission has been requested,
   *       use `isIdentity` to check id requests.
   */
  getIdentityPermission() {
    if (!this.isIdentity()) {
      return null;
    }
    const id = this.data.req.value;
    if (id.permission && !id.permission.permission.equals(PlaceholderPermission)) {
      return id.permission.permission;
    }
    return null;
  }
  /**
   * Present if the request is an identity request and requests a specific permission.
   * @note This returns `nil` unless a specific permission has been requested,
   *       use `isIdentity` to check id requests.
   */
  getIdentityScope() {
    if (!this.isIdentity() || this.version <= 2) {
      return null;
    }
    const id = this.data.req.value;
    return id.scope;
  }
  /** Get raw info dict */
  getRawInfo() {
    const rv = {};
    for (const { key: key2, value } of this.data.info) {
      rv[key2] = value;
    }
    return rv;
  }
  getRawInfoKey(key2) {
    const pair = this.data.info.find((pair2) => pair2.key === key2);
    if (pair) {
      return pair.value;
    }
  }
  setRawInfoKey(key2, value) {
    let pair = this.data.info.find((pair2) => pair2.key === key2);
    if (!pair) {
      pair = InfoPair.from({ key: key2, value });
      this.data.info.push(pair);
    } else {
      pair.value = Bytes.from(value);
    }
  }
  /** Set a metadata key. */
  setInfoKey(key2, object, type) {
    let data;
    if (typeof object === "string" && !type) {
      data = Bytes.from(object, "utf8");
    } else {
      data = Serializer.encode({ object, type });
    }
    this.setRawInfoKey(key2, data);
  }
  getInfoKey(key2, type) {
    const data = this.getRawInfoKey(key2);
    if (data) {
      if (type) {
        return Serializer.decode({ data, type });
      } else {
        return data.utf8String;
      }
    }
  }
  /** Return a deep copy of this request. */
  clone() {
    let signature2;
    if (this.signature) {
      signature2 = RequestSignature.from(JSON.parse(JSON.stringify(this.signature)));
    }
    const RequestData = this.constructor.storageType(this.version);
    const data = RequestData.from(JSON.parse(JSON.stringify(this.data)));
    return new SigningRequest(this.version, data, this.zlib, this.abiProvider, signature2);
  }
  // Convenience methods.
  toString() {
    return this.encode();
  }
  toJSON() {
    return this.encode();
  }
}
class ResolvedSigningRequest {
  constructor(request, signer, transaction, resolvedTransaction, chainId) {
    this.request = request;
    this.signer = signer;
    this.transaction = transaction;
    this.resolvedTransaction = resolvedTransaction;
    this.chainId = chainId;
  }
  /** Recreate a resolved request from a callback payload. */
  static async fromPayload(payload, options = {}) {
    const request = SigningRequest.from(payload.req, options);
    const abis = await request.fetchAbis();
    return request.resolve(abis, { actor: payload.sa, permission: payload.sp }, {
      ref_block_num: payload.rbn,
      ref_block_prefix: payload.rid,
      expiration: payload.ex,
      chainId: payload.cid || request.getChainId()
    });
  }
  get serializedTransaction() {
    return Serializer.encode({ object: this.transaction }).array;
  }
  get signingDigest() {
    return this.transaction.signingDigest(this.chainId);
  }
  get signingData() {
    return this.transaction.signingData(this.chainId);
  }
  getCallback(signatures, blockNum) {
    const { callback, flags } = this.request.data;
    if (!callback || callback.length === 0) {
      return null;
    }
    if (!signatures || signatures.length === 0) {
      throw new Error("Must have at least one signature to resolve callback");
    }
    const sigs = signatures.map((sig) => Signature.from(sig));
    const payload = {
      sig: String(sigs[0]),
      tx: String(this.transaction.id),
      rbn: String(this.transaction.ref_block_num),
      rid: String(this.transaction.ref_block_prefix),
      ex: String(this.transaction.expiration),
      req: this.request.encode(),
      sa: String(this.signer.actor),
      sp: String(this.signer.permission),
      cid: String(this.chainId)
    };
    for (const [n2, sig] of sigs.slice(1).entries()) {
      payload[`sig${n2}`] = String(sig);
    }
    if (blockNum) {
      payload.bn = String(UInt32.from(blockNum));
    }
    const url = callback.replace(/({{([a-z0-9]+)}})/g, (_12, _2, m2) => {
      return payload[m2] || "";
    });
    return {
      background: flags.background,
      payload,
      url
    };
  }
  getIdentityProof(signature2) {
    if (!this.request.isIdentity()) {
      throw new Error("Not a identity request");
    }
    return IdentityProof.from({
      chainId: this.chainId,
      scope: this.request.getIdentityScope(),
      expiration: this.transaction.expiration,
      signer: this.signer,
      signature: signature2
    });
  }
}
function encodeAction(action, abis) {
  if (Bytes.isBytes(action.data) || action.data.constructor.abiName !== void 0) {
    return Action.from(action);
  }
  const abi = abis[String(Name.from(action.account))];
  if (!abi) {
    throw new Error(`Missing ABI for ${action.account}`);
  }
  const data = Action.from(action, abi);
  delete data.abi;
  return data;
}
function isIdentity(action) {
  const account = Name.from(action.account);
  const name = Name.from(action.name);
  return account.rawValue.equals(0) && name.equals("identity");
}
function hasTapos(tx) {
  return !(tx.expiration.equals(0) && tx.ref_block_num.equals(0) && tx.ref_block_prefix.equals(0));
}
function expirationTime(timestamp, expireSeconds = 60) {
  const ts = TimePointSec.from(timestamp || /* @__PURE__ */ new Date());
  const exp = UInt32.from(expireSeconds);
  return TimePointSec.fromInteger(ts.value.adding(exp));
}
class ABICache {
  constructor(client) {
    this.client = client;
    this.cache = /* @__PURE__ */ new Map();
    this.pending = /* @__PURE__ */ new Map();
  }
  async getAbi(account) {
    const key2 = String(account);
    let record = this.cache.get(key2);
    if (!record) {
      let getAbi = this.pending.get(key2);
      if (!getAbi) {
        getAbi = this.client.v1.chain.get_raw_abi(account);
        this.pending.set(key2, getAbi);
      }
      const response = await getAbi;
      this.pending.delete(key2);
      if (response.abi) {
        record = ABI.from(response.abi);
        this.cache.set(key2, record);
      } else {
        throw new Error(`ABI for ${key2} could not be loaded.`);
      }
    }
    return record;
  }
  setAbi(account, abiDef, merge = false) {
    const key2 = String(account);
    const abi = ABI.from(abiDef);
    const existing = this.cache.get(key2);
    if (merge && existing) {
      this.cache.set(key2, ABI.from({
        action_results: mergeAndDeduplicate(existing.action_results, abi.action_results),
        types: mergeAndDeduplicate(existing.types, abi.types, "new_type_name"),
        structs: mergeAndDeduplicate(existing.structs, abi.structs),
        actions: mergeAndDeduplicate(existing.actions, abi.actions),
        tables: mergeAndDeduplicate(existing.tables, abi.tables),
        ricardian_clauses: mergeAndDeduplicate(existing.ricardian_clauses, abi.ricardian_clauses, "id"),
        variants: mergeAndDeduplicate(existing.variants, abi.variants),
        version: abi.version
      }));
    } else {
      this.cache.set(key2, abi);
    }
  }
}
function mergeAndDeduplicate(array1, array2, byField = "name") {
  return array2.reduce((acc, current) => {
    if (!acc.some((obj) => String(obj[byField]) === String(current[byField]))) {
      acc.push(current);
    }
    return acc;
  }, array1.slice());
}
var LoginHookTypes;
(function(LoginHookTypes2) {
  LoginHookTypes2["beforeLogin"] = "beforeLogin";
  LoginHookTypes2["afterLogin"] = "afterLogin";
})(LoginHookTypes || (LoginHookTypes = {}));
class LoginContext {
  constructor(options) {
    this.arbitrary = {};
    this.chains = [];
    this.hooks = {
      afterLogin: [],
      beforeLogin: []
    };
    this.uiRequirements = {
      requiresChainSelect: true,
      requiresPermissionSelect: true,
      requiresPermissionEntry: false,
      requiresWalletSelect: true
    };
    this.walletPlugins = [];
    this.appName = String(options.appName);
    if (options.arbitrary) {
      this.arbitrary = options.arbitrary;
    }
    if (options.chains) {
      this.chains = options.chains;
    }
    if (options.chain) {
      this.chain = options.chain;
    }
    this.fetch = options.fetch;
    this.permissionLevel = options.permissionLevel;
    this.walletPlugins = options.walletPlugins || [];
    this.ui = options.ui;
    options.loginPlugins?.forEach((plugin) => {
      plugin.register(this);
    });
  }
  addHook(t2, hook) {
    this.hooks[t2].push(hook);
  }
  getClient(chain) {
    return new APIClient({ provider: new FetchProvider(chain.url, { fetch: this.fetch }) });
  }
  get esrOptions() {
    return {
      zlib: pako
    };
  }
}
class AbstractLoginPlugin {
}
class BaseLoginPlugin extends AbstractLoginPlugin {
  register() {
  }
}
var TransactHookTypes;
(function(TransactHookTypes2) {
  TransactHookTypes2["beforeSign"] = "beforeSign";
  TransactHookTypes2["afterSign"] = "afterSign";
  TransactHookTypes2["afterBroadcast"] = "afterBroadcast";
})(TransactHookTypes || (TransactHookTypes = {}));
class TransactContext {
  constructor(options) {
    this.hooks = {
      afterBroadcast: [],
      afterSign: [],
      beforeSign: []
    };
    this.abiCache = options.abiCache;
    this.appName = String(options.appName);
    this.chain = options.chain;
    this.client = options.client;
    this.createRequest = options.createRequest;
    this.fetch = options.fetch;
    this.permissionLevel = options.permissionLevel;
    if (options.storage) {
      this.storage = options.storage;
    }
    this.transactPluginsOptions = options.transactPluginsOptions || {};
    this.ui = options.ui;
    options.transactPlugins?.forEach((plugin) => {
      plugin.register(this);
    });
  }
  get accountName() {
    return this.permissionLevel.actor;
  }
  get permissionName() {
    return this.permissionLevel.permission;
  }
  get esrOptions() {
    return {
      abiProvider: this.abiCache,
      zlib: pako
    };
  }
  addHook(t2, hook) {
    switch (t2) {
      case TransactHookTypes.beforeSign: {
        this.hooks[t2].push(hook);
        break;
      }
      case TransactHookTypes.afterSign:
      case TransactHookTypes.afterBroadcast: {
        this.hooks[t2].push(hook);
        break;
      }
    }
  }
  async getInfo() {
    let info = this.info;
    if (this.info) {
      info = this.info;
    } else {
      this.info = info = await this.client.v1.chain.get_info();
    }
    return info;
  }
  async resolve(request, expireSeconds = 120) {
    let resolveArgs = {
      chainId: this.chain.id
    };
    if (request.requiresTapos()) {
      const info = await this.getInfo();
      const header = info.getTransactionHeader(expireSeconds);
      resolveArgs = {
        ...resolveArgs,
        ...header
      };
    }
    const abis = await request.fetchAbis(this.abiCache);
    return request.resolve(abis, this.permissionLevel, resolveArgs);
  }
}
class TransactRevisions {
  constructor(request) {
    this.revisions = [];
    this.addRevision({ request, signatures: [] }, "original", true);
  }
  addRevision(response, code, allowModify) {
    let modified = false;
    const previous = this.revisions[this.revisions.length - 1];
    if (previous) {
      modified = previous.response.request !== String(response.request);
    }
    this.revisions.push({
      allowModify,
      code: String(code),
      modified,
      response: {
        request: String(response.request),
        signatures: response.signatures ? Serializer.objectify(response.signatures) : []
      }
    });
  }
}
class AbstractTransactPlugin {
}
class BaseTransactPlugin extends AbstractTransactPlugin {
  get id() {
    return "base-transact-plugin";
  }
  register() {
  }
}
function getFetch(options) {
  if (options && options.fetch) {
    return options.fetch;
  }
  if (typeof window !== "undefined" && window.fetch) {
    return window.fetch.bind(window);
  }
  if (typeof globalThis !== "undefined" && globalThis.fetch) {
    return globalThis.fetch.bind(globalThis);
  }
  throw new Error("Missing fetch");
}
function prependAction(request, action) {
  const newAction = Action.from(action);
  const cloned = request.clone();
  switch (cloned.data.req.variantName) {
    case "action": {
      cloned.data.req.value = [newAction, cloned.data.req.value];
      cloned.data.req.variantIdx = 1;
      break;
    }
    case "action[]": {
      const array = cloned.data.req.value;
      array.unshift(newAction);
      cloned.data.req.value = array;
      break;
    }
    case "transaction": {
      const tx = cloned.data.req.value;
      tx.actions.unshift(newAction);
      cloned.data.req.value = tx;
      break;
    }
    default: {
      throw new Error("unknown data req type");
    }
  }
  return cloned;
}
function getPluginTranslations(transactPlugin) {
  if (!transactPlugin.translations) {
    return {};
  }
  const prefixed = {};
  const languages = Object.keys(transactPlugin.translations);
  languages.forEach((lang2) => {
    if (transactPlugin.translations) {
      prefixed[lang2] = { [transactPlugin.id]: transactPlugin.translations[lang2] };
    }
  });
  return prefixed;
}
class Session {
  get data() {
    return this._data;
  }
  set data(data) {
    this._data = data;
  }
  constructor(args, options = {}) {
    this.abis = [];
    this.allowModify = true;
    this.broadcast = true;
    this.expireSeconds = 120;
    this.transactPluginsOptions = {};
    this._data = {};
    this.serialize = () => {
      const serializableData = {
        chain: this.chain.id,
        actor: this.permissionLevel.actor,
        permission: this.permissionLevel.permission,
        walletPlugin: {
          id: this.walletPlugin.id,
          data: this.walletPlugin.data
        }
      };
      if (Object.keys(this._data).length > 0) {
        serializableData.data = this.data;
      }
      return Serializer.objectify(serializableData);
    };
    this.chain = ChainDefinition.from(args.chain);
    if (args.permissionLevel) {
      this.permissionLevel = PermissionLevel.from(args.permissionLevel);
    } else if (args.actor && args.permission) {
      this.permissionLevel = PermissionLevel.from(`${args.actor}@${args.permission}`);
    } else {
      throw new Error("Either a permissionLevel or actor/permission must be provided when creating a new Session.");
    }
    this.walletPlugin = args.walletPlugin;
    if (options.appName) {
      this.appName = String(options.appName);
    }
    if (options.abis) {
      this.abis = [...options.abis];
    }
    if (options.contracts) {
      this.abis.push(...options.contracts.map((c2) => ({ account: c2.account, abi: c2.abi })));
    }
    if (options.allowModify !== void 0) {
      this.allowModify = options.allowModify;
    }
    if (options.broadcast !== void 0) {
      this.broadcast = options.broadcast;
    }
    if (options.expireSeconds) {
      this.expireSeconds = options.expireSeconds;
    }
    if (options.fetch) {
      this.fetch = options.fetch;
    } else {
      this.fetch = getFetch(options);
    }
    if (options.storage) {
      this.storage = options.storage;
    }
    if (options.transactPlugins) {
      this.transactPlugins = options.transactPlugins;
    } else {
      this.transactPlugins = [new BaseTransactPlugin()];
    }
    if (options.transactPluginsOptions) {
      this.transactPluginsOptions = options.transactPluginsOptions;
    }
    if (options.abiCache) {
      this.abiCache = options.abiCache;
    } else {
      this.abiCache = new ABICache(this.client);
    }
    if (options.ui) {
      this.ui = options.ui;
    }
  }
  get actor() {
    return this.permissionLevel.actor;
  }
  get permission() {
    return this.permissionLevel.permission;
  }
  get client() {
    return new APIClient({ provider: new FetchProvider(this.chain.url, { fetch: this.fetch }) });
  }
  setEndpoint(url) {
    this.chain.url = url;
  }
  upgradeTransaction(args) {
    const anyArgs = args;
    if (args.actions && (anyArgs.expiration || anyArgs.ref_block_num || anyArgs.ref_block_prefix || anyArgs.max_net_usage_words || anyArgs.max_cpu_usage_ms || anyArgs.delay_sec)) {
      return args = {
        transaction: {
          expiration: "1970-01-01T00:00:00",
          ref_block_num: 0,
          ref_block_prefix: 0,
          max_net_usage_words: 0,
          max_cpu_usage_ms: 0,
          delay_sec: 0,
          ...anyArgs
        }
      };
    }
    if (args.context_free_actions || args.context_free_data) {
      const actions = args.actions || [args.action];
      delete args.action;
      return {
        transaction: {
          expiration: "1970-01-01T00:00:00",
          ref_block_num: 0,
          ref_block_prefix: 0,
          max_net_usage_words: 0,
          max_cpu_usage_ms: 0,
          delay_sec: 0,
          context_free_actions: [],
          context_free_data: [],
          actions,
          ...anyArgs
        }
      };
    }
    return args;
  }
  storageType(version2) {
    return version2 === 2 ? RequestDataV2 : RequestDataV3;
  }
  cloneRequest(request, abiCache) {
    let signature2;
    if (request.signature) {
      signature2 = RequestSignature.from(JSON.parse(JSON.stringify(request.signature)));
    }
    const RequestData = this.storageType(request.version);
    const data = RequestData.from(JSON.parse(JSON.stringify(request.data)));
    return new SigningRequest(request.version, data, pako, abiCache, signature2);
  }
  async createRequest(args, abiCache) {
    let request;
    const options = {
      abiProvider: abiCache,
      zlib: pako
    };
    if (args.request && args.request instanceof SigningRequest) {
      request = this.cloneRequest(args.request, abiCache);
    } else if (args.request) {
      request = SigningRequest.from(args.request, options);
    } else {
      args = this.upgradeTransaction(args);
      request = await SigningRequest.create({
        ...args,
        chainId: this.chain.id
      }, options);
    }
    request.setBroadcast(false);
    return request;
  }
  async updateRequest(previous, modified, abiCache) {
    const updatedRequest = this.cloneRequest(modified, abiCache);
    const info = updatedRequest.getRawInfo();
    previous.data.info.forEach((metadata) => {
      if (info[metadata.key]) {
        console.warn(`During an updateRequest call, the previous request had already set the metadata key of "${metadata.key}" which will not be overwritten.`);
      }
      updatedRequest.setRawInfoKey(metadata.key, metadata.value);
    });
    return updatedRequest;
  }
  async transact(args, options) {
    try {
      const expireSeconds = options && options.expireSeconds ? options.expireSeconds : this.expireSeconds;
      const willBroadcast = options && typeof options.broadcast !== "undefined" ? options.broadcast : this.broadcast;
      const abiCache = this.getMergedAbiCache(args, options);
      const transactPlugins = options?.transactPlugins || this.transactPlugins;
      const transactPluginsOptions = options?.transactPluginsOptions || this.transactPluginsOptions;
      let allowModify = options && typeof options.allowModify !== "undefined" ? options.allowModify : this.allowModify;
      const context = new TransactContext({
        abiCache,
        appName: this.appName,
        chain: this.chain,
        client: this.client,
        createRequest: (a) => this.createRequest(a, abiCache),
        fetch: this.fetch,
        permissionLevel: this.permissionLevel,
        storage: this.storage,
        transactPlugins,
        transactPluginsOptions,
        ui: this.ui
      });
      if (context.ui) {
        await context.ui.onTransact();
        for (const translation of transactPlugins.map((transactPlugin) => getPluginTranslations(transactPlugin))) {
          context.ui.addTranslations(translation);
        }
      }
      let request = await this.createRequest(args, abiCache);
      const result = {
        chain: this.chain,
        request,
        resolved: void 0,
        returns: [],
        revisions: new TransactRevisions(request),
        signatures: [],
        signer: this.permissionLevel,
        transaction: void 0
      };
      for (const hook of context.hooks.beforeSign) {
        const response = await hook(request.clone(), context);
        if (response) {
          result.revisions.addRevision(response, String(hook), allowModify);
          if (allowModify) {
            request = await this.updateRequest(request, response.request, abiCache);
          }
          if (response.signatures) {
            result.signatures = [...result.signatures, ...response.signatures];
            allowModify = false;
          }
        }
      }
      result.request = request;
      result.resolved = await context.resolve(request, expireSeconds);
      result.transaction = result.resolved.resolvedTransaction;
      if (context.ui) {
        await context.ui.onSign();
        context.ui.addTranslations(getPluginTranslations(this.walletPlugin));
      }
      const walletResponse = await this.walletPlugin.sign(result.resolved, context);
      result.signatures.push(...walletResponse.signatures);
      if (walletResponse.resolved) {
        const { resolved } = walletResponse;
        const requestWasModified = !result.resolved.transaction.equals(resolved.transaction);
        if (requestWasModified) {
          if (allowModify) {
            result.request = resolved.request;
            result.resolved = resolved;
            result.transaction = resolved.resolvedTransaction;
          } else {
            throw new Error(`The ${this.walletPlugin.metadata.name} plugin modified the transaction when it was not allowed to.`);
          }
        }
      }
      for (const hook of context.hooks.afterSign)
        await hook(result, context);
      if (context.ui) {
        await context.ui.onSignComplete();
      }
      if (willBroadcast) {
        if (context.ui) {
          await context.ui.onBroadcast();
        }
        const signed = SignedTransaction.from({
          ...result.resolved.transaction,
          signatures: result.signatures
        });
        result.response = await context.client.v1.chain.send_transaction(signed);
        if (result.response.processed && result.response.processed.action_traces) {
          result.returns = await processReturnValues(result.response, abiCache);
        }
        for (const hook of context.hooks.afterBroadcast)
          await hook(result, context);
        if (context.ui) {
          await context.ui.onBroadcastComplete();
        }
      }
      if (context.ui) {
        await context.ui.onTransactComplete();
      }
      return result;
    } catch (error2) {
      if (error2.response && error2.response.json) {
        const { json } = error2.response;
        if (json.error && json.error.details) {
          const e = new Error(json.error.details[0].message);
          if (this.ui) {
            await this.ui.onError(e);
          }
          throw e;
        }
      } else {
        if (this.ui) {
          await this.ui.onError(error2);
        }
      }
      throw new Error(error2);
    }
  }
  async signTransaction(transaction) {
    const context = new TransactContext({
      abiCache: this.abiCache,
      chain: this.chain,
      client: this.client,
      createRequest: (args) => this.createRequest(args, this.abiCache),
      fetch: this.fetch,
      permissionLevel: this.permissionLevel
    });
    const request = await SigningRequest.create({
      transaction,
      chainId: this.chain.id
    }, context.esrOptions);
    request.setBroadcast(false);
    const resolvedRequest = new ResolvedSigningRequest(request, this.permissionLevel, Transaction.from(transaction), Serializer.objectify(Transaction.from(transaction)), ChainId.from(this.chain.id));
    const walletResponse = await this.walletPlugin.sign(resolvedRequest, context);
    return walletResponse.signatures;
  }
  getMergedAbiCache(args, options) {
    const abiCache = options?.abiCache || this.abiCache;
    if (!abiCache["setAbi"]) {
      throw new Error("Custom `abiCache` does not support `setAbi` method.");
    }
    this.abis.forEach((def) => abiCache.setAbi(def.account, def.abi));
    if (options?.abis) {
      options.abis.forEach((def) => abiCache.setAbi(def.account, def.abi));
    }
    if (options?.contracts) {
      options.contracts.forEach((c2) => abiCache.setAbi(c2.account, c2.abi));
    }
    if (args.action && args.action["abi"]) {
      abiCache.setAbi(args.action.account, args.action["abi"], true);
    }
    if (args.actions) {
      args.actions.forEach((action) => {
        if (action["abi"]) {
          abiCache.setAbi(action.account, action["abi"], true);
        }
      });
    }
    if (args.transaction && args.transaction.actions) {
      args.transaction.actions.forEach((action) => {
        if (action["abi"]) {
          abiCache.setAbi(action.account, action["abi"], true);
        }
      });
    }
    return abiCache;
  }
}
async function processReturnValues(response, abiCache) {
  const decoded = [];
  for (const actionTrace of response.processed.action_traces) {
    if (actionTrace.return_value_hex_data) {
      const contract = Name.from(actionTrace.act.account);
      const action = Name.from(actionTrace.act.name);
      const abi = await abiCache.getAbi(contract);
      const returnType = abi.action_results.find((a) => Name.from(a.name).equals(action));
      if (returnType) {
        try {
          const data = Serializer.decode({
            data: actionTrace.return_value_hex_data,
            type: returnType.result_type,
            abi
          });
          decoded.push({
            contract,
            action,
            hex: actionTrace.return_value_hex_data,
            data,
            returnType
          });
        } catch (error2) {
          console.warn(`Error decoding return value for ${contract}::${action}:`, error2);
          decoded.push({
            contract,
            action,
            hex: actionTrace.return_value_hex_data,
            data: "",
            returnType
          });
        }
      } else {
        console.warn(`No return type found for ${contract}::${action}`);
        decoded.push({
          contract,
          action,
          hex: actionTrace.return_value_hex_data,
          data: "",
          returnType: {
            name: action,
            result_type: ""
          }
        });
      }
    }
  }
  return decoded;
}
class BrowserLocalStorage {
  constructor(keyPrefix = "") {
    this.keyPrefix = keyPrefix;
  }
  async write(key2, data) {
    localStorage.setItem(this.storageKey(key2), data);
  }
  async read(key2) {
    return localStorage.getItem(this.storageKey(key2));
  }
  async remove(key2) {
    localStorage.removeItem(this.storageKey(key2));
  }
  storageKey(key2) {
    return `wharf-${this.keyPrefix}-${key2}`;
  }
}
var WalletPluginMetadata_1;
let WalletPluginMetadata = WalletPluginMetadata_1 = class WalletPluginMetadata2 extends Struct {
  static from(data) {
    return new WalletPluginMetadata_1({
      ...data,
      logo: data.logo ? Logo.from(data.logo) : void 0
    });
  }
};
__decorate$1([
  Struct.field("string", { optional: true })
], WalletPluginMetadata.prototype, "name", void 0);
__decorate$1([
  Struct.field("string", { optional: true })
], WalletPluginMetadata.prototype, "description", void 0);
__decorate$1([
  Struct.field(Logo, { optional: true })
], WalletPluginMetadata.prototype, "logo", void 0);
__decorate$1([
  Struct.field("string", { optional: true })
], WalletPluginMetadata.prototype, "homepage", void 0);
__decorate$1([
  Struct.field("string", { optional: true })
], WalletPluginMetadata.prototype, "download", void 0);
__decorate$1([
  Struct.field("string", { optional: true })
], WalletPluginMetadata.prototype, "publicKey", void 0);
WalletPluginMetadata = WalletPluginMetadata_1 = __decorate$1([
  Struct.type("wallet_plugin_metadata")
], WalletPluginMetadata);
class AbstractWalletPlugin {
  constructor() {
    this._data = {};
    this.config = {
      requiresChainSelect: true,
      requiresPermissionSelect: false,
      requiresPermissionEntry: false
    };
    this.metadata = new WalletPluginMetadata({});
  }
  get data() {
    return this._data;
  }
  set data(data) {
    this._data = data;
  }
  serialize() {
    return {
      id: this.id,
      data: this.data
    };
  }
}
var AccountCreationPluginMetadata_1;
let AccountCreationPluginMetadata = AccountCreationPluginMetadata_1 = class AccountCreationPluginMetadata2 extends Struct {
  static from(data) {
    return new AccountCreationPluginMetadata_1({
      ...data,
      logo: data.logo ? Logo.from(data.logo) : void 0
    });
  }
};
__decorate$1([
  Struct.field("string")
], AccountCreationPluginMetadata.prototype, "name", void 0);
__decorate$1([
  Struct.field("string", { optional: true })
], AccountCreationPluginMetadata.prototype, "description", void 0);
__decorate$1([
  Struct.field(Logo, { optional: true })
], AccountCreationPluginMetadata.prototype, "logo", void 0);
__decorate$1([
  Struct.field("string", { optional: true })
], AccountCreationPluginMetadata.prototype, "homepage", void 0);
AccountCreationPluginMetadata = AccountCreationPluginMetadata_1 = __decorate$1([
  Struct.type("account_creation_plugin_metadata")
], AccountCreationPluginMetadata);
class CreateAccountContext {
  constructor(options) {
    this.accountCreationPlugins = [];
    this.uiRequirements = {
      requiresChainSelect: true,
      requiresPluginSelect: true
    };
    this.appName = String(options.appName);
    if (options.chains) {
      this.chains = options.chains;
    }
    if (options.chain) {
      this.chain = options.chain;
    }
    this.fetch = options.fetch;
    this.ui = options.ui;
    if (options.accountCreationPlugins) {
      this.accountCreationPlugins = options.accountCreationPlugins;
    }
    if (options.uiRequirements) {
      this.uiRequirements = options.uiRequirements;
    }
  }
  getClient(chain) {
    return new APIClient({ provider: new FetchProvider(chain.url, { fetch: this.fetch }) });
  }
}
class SessionKit {
  constructor(args, options = {}) {
    this.abis = [];
    this.allowModify = true;
    this.expireSeconds = 120;
    this.transactPluginsOptions = {};
    this.accountCreationPlugins = [];
    this.appName = String(args.appName);
    this.chains = args.chains.map((chain) => ChainDefinition.from(chain));
    this.ui = args.ui;
    this.walletPlugins = args.walletPlugins;
    if (options.fetch) {
      this.fetch = options.fetch;
    } else {
      this.fetch = getFetch(options);
    }
    if (options.abis) {
      this.abis = [...options.abis];
    }
    if (options.contracts) {
      this.abis.push(...options.contracts.map((c2) => ({ account: c2.account, abi: c2.abi })));
    }
    if (options.loginPlugins) {
      this.loginPlugins = options.loginPlugins;
    } else {
      this.loginPlugins = [new BaseLoginPlugin()];
    }
    if (options.storage) {
      this.storage = options.storage;
    } else {
      this.storage = new BrowserLocalStorage();
    }
    if (options.transactPlugins) {
      this.transactPlugins = options.transactPlugins;
    } else {
      this.transactPlugins = [new BaseTransactPlugin()];
    }
    if (typeof options.allowModify !== "undefined") {
      this.allowModify = options.allowModify;
    }
    if (options.expireSeconds) {
      this.expireSeconds = options.expireSeconds;
    }
    if (options.transactPluginsOptions) {
      this.transactPluginsOptions = options.transactPluginsOptions;
    }
    if (options.accountCreationPlugins) {
      this.accountCreationPlugins = options.accountCreationPlugins;
    }
  }
  setEndpoint(id, url) {
    const modifiedChains = [...this.chains];
    const chainId = Checksum256.from(id);
    const chainIndex = this.chains.findIndex((c2) => c2.id.equals(chainId));
    if (chainIndex < 0) {
      throw new Error("Chain with specified ID not found.");
    }
    modifiedChains[chainIndex].url = url;
    this.chains = modifiedChains;
  }
  getChainDefinition(id, override) {
    const chains = override ? override : this.chains;
    const chainId = Checksum256.from(id);
    const chain = chains.find((c2) => c2.id.equals(chainId));
    if (!chain) {
      throw new Error(`No chain defined with an ID of: ${chainId}`);
    }
    return chain;
  }
  async createAccount(options) {
    try {
      if (this.accountCreationPlugins.length === 0) {
        throw new Error("No account creation plugins available.");
      }
      let chain = options?.chain;
      let requiresChainSelect = !chain;
      let requiresPluginSelect = !options?.pluginId;
      let accountCreationPlugin;
      if (options?.pluginId) {
        requiresPluginSelect = false;
        accountCreationPlugin = this.accountCreationPlugins.find((p2) => p2.id === options.pluginId);
        if (!accountCreationPlugin) {
          throw new Error("Invalid account creation plugin selected.");
        }
        if (accountCreationPlugin?.config.requiresChainSelect !== void 0) {
          requiresChainSelect = accountCreationPlugin?.config.requiresChainSelect;
        }
        if (!accountCreationPlugin.config.requiresChainSelect && accountCreationPlugin.config.supportedChains && accountCreationPlugin.config.supportedChains.length === 1) {
          chain = accountCreationPlugin.config.supportedChains[0];
        }
      }
      let chains = this.chains;
      if (accountCreationPlugin && accountCreationPlugin?.config.supportedChains?.length) {
        chains = chains.filter((availableChain) => {
          return accountCreationPlugin?.config.supportedChains?.find((c2) => {
            return c2.id.equals(availableChain.id);
          });
        });
      }
      const context = new CreateAccountContext({
        accountCreationPlugins: this.accountCreationPlugins,
        appName: this.appName,
        chain,
        chains,
        fetch: this.fetch,
        ui: this.ui,
        uiRequirements: {
          requiresChainSelect,
          requiresPluginSelect
        }
      });
      if (requiresPluginSelect || requiresChainSelect) {
        const response = await context.ui.onAccountCreate(context);
        const pluginId = options?.pluginId || response.pluginId;
        if (!pluginId) {
          throw new Error("No account creation plugin selected.");
        }
        accountCreationPlugin = context.accountCreationPlugins.find((p2) => p2.id === pluginId);
        if (!accountCreationPlugin) {
          throw new Error("No account creation plugin selected.");
        }
        if (!accountCreationPlugin.config.requiresChainSelect && accountCreationPlugin.config.supportedChains && accountCreationPlugin.config.supportedChains.length === 1) {
          context.chain = accountCreationPlugin.config.supportedChains[0];
        }
        if (response.chain) {
          context.chain = this.getChainDefinition(response.chain, context.chains);
        }
        if (accountCreationPlugin.config.requiresChainSelect && !context.chain) {
          throw new Error(`Account creation plugin (${pluginId}) requires chain selection, and no chain was selected.`);
        }
      }
      if (!accountCreationPlugin) {
        throw new Error("No account creation plugin selected");
      }
      const accountCreationData = await accountCreationPlugin.create(context);
      await context.ui.onAccountCreateComplete();
      return accountCreationData;
    } catch (error2) {
      await this.ui.onError(error2);
      throw new Error(error2);
    }
  }
  async login(options) {
    try {
      const context = new LoginContext({
        appName: this.appName,
        arbitrary: options?.arbitrary || {},
        chain: void 0,
        chains: options && options?.chains ? options.chains.map((c2) => this.getChainDefinition(c2)) : this.chains,
        fetch: this.fetch,
        loginPlugins: this.loginPlugins,
        ui: this.ui,
        walletPlugins: this.walletPlugins.map((plugin) => {
          return {
            config: plugin.config,
            metadata: WalletPluginMetadata.from(plugin.metadata),
            retrievePublicKey: plugin.retrievePublicKey?.bind(plugin)
          };
        })
      });
      await context.ui.onLogin();
      let walletPlugin = void 0;
      if (this.walletPlugins.length === 1) {
        walletPlugin = this.walletPlugins[0];
        context.walletPluginIndex = 0;
        context.uiRequirements.requiresWalletSelect = false;
      } else if (options?.walletPlugin) {
        const index = this.walletPlugins.findIndex((p2) => p2.id === options.walletPlugin);
        if (index >= 0) {
          walletPlugin = this.walletPlugins[index];
          context.walletPluginIndex = index;
          context.uiRequirements.requiresWalletSelect = false;
        }
      }
      if (walletPlugin) {
        context.uiRequirements = {
          ...context.uiRequirements,
          ...walletPlugin.config
        };
        context.ui.addTranslations(getPluginTranslations(walletPlugin));
      }
      if (options && options.chain) {
        if (options.chain instanceof ChainDefinition) {
          context.chain = options.chain;
        } else {
          context.chain = this.getChainDefinition(options.chain, context.chains);
        }
        context.uiRequirements.requiresChainSelect = false;
      } else if (context.chains.length === 1) {
        context.chain = context.chains[0];
        context.uiRequirements.requiresChainSelect = false;
      } else {
        context.uiRequirements.requiresChainSelect = true;
      }
      if (options?.permissionLevel) {
        context.permissionLevel = PermissionLevel.from(options.permissionLevel);
        context.uiRequirements.requiresPermissionSelect = false;
      }
      if (context.uiRequirements.requiresChainSelect || context.uiRequirements.requiresPermissionSelect || context.uiRequirements.requiresPermissionEntry || context.uiRequirements.requiresWalletSelect) {
        const uiLoginResponse = await context.ui.login(context);
        if (uiLoginResponse.walletPluginIndex !== void 0) {
          walletPlugin = this.walletPlugins[uiLoginResponse.walletPluginIndex];
        }
        if (!walletPlugin) {
          throw new Error("UserInterface did not return a valid WalletPlugin index.");
        }
        if (uiLoginResponse.chainId) {
          if (!context.chains.some((c2) => c2.id.equals(uiLoginResponse.chainId))) {
            throw new Error("UserInterface did not return a chain ID matching the subset of chains.");
          }
          context.chain = this.getChainDefinition(uiLoginResponse.chainId, context.chains);
        }
        if (uiLoginResponse.permissionLevel) {
          context.permissionLevel = PermissionLevel.from(uiLoginResponse.permissionLevel);
        }
      }
      if (!walletPlugin) {
        throw new Error("No WalletPlugin available to perform the login.");
      }
      const { supportedChains } = walletPlugin.config;
      if (context.chain && supportedChains && supportedChains.length && !supportedChains.includes(String(context.chain.id))) {
        throw new Error(`The wallet plugin '${walletPlugin.metadata.name}' does not support the chain '${context.chain.id}'`);
      }
      for (const hook of context.hooks.beforeLogin)
        await hook(context);
      const response = await walletPlugin.login(context);
      const session = new Session({
        chain: this.getChainDefinition(response.chain),
        permissionLevel: response.permissionLevel,
        walletPlugin
      }, this.getSessionOptions(options));
      for (const hook of context.hooks.afterLogin)
        await hook(context);
      this.persistSession(session, options?.setAsDefault);
      await context.ui.onLoginComplete();
      return {
        context,
        response,
        session
      };
    } catch (error2) {
      await this.ui.onError(error2);
      throw new Error(error2);
    }
  }
  logoutParams(session, walletPlugin) {
    if (session instanceof Session) {
      return {
        session,
        appName: this.appName
      };
    } else {
      return {
        session: new Session({
          chain: this.getChainDefinition(session.chain),
          permissionLevel: PermissionLevel.from({
            actor: session.actor,
            permission: session.permission
          }),
          walletPlugin
        }),
        appName: this.appName
      };
    }
  }
  async logout(session) {
    if (!this.storage) {
      throw new Error("An instance of Storage must be provided to utilize the logout method.");
    }
    await this.storage.remove("session");
    if (session) {
      const walletPlugin = this.walletPlugins.find((wPlugin) => session?.walletPlugin.id === wPlugin.id);
      if (walletPlugin?.logout) {
        await walletPlugin.logout(this.logoutParams(session, walletPlugin));
      }
      const sessions = await this.getSessions();
      if (sessions) {
        let serialized = session;
        if (session instanceof Session) {
          serialized = session.serialize();
        }
        const other = sessions.filter((s2) => {
          return !Checksum256.from(s2.chain).equals(Checksum256.from(String(serialized.chain))) || !Name.from(s2.actor).equals(Name.from(serialized.actor)) || !Name.from(s2.permission).equals(Name.from(serialized.permission));
        });
        await this.storage.write("sessions", JSON.stringify(other));
      }
    } else {
      const sessions = await this.getSessions();
      await this.storage.remove("sessions");
      if (sessions) {
        Promise.all(sessions.map((s2) => {
          const walletPlugin = this.walletPlugins.find((wPlugin) => s2.walletPlugin.id === wPlugin.id);
          if (walletPlugin?.logout) {
            return walletPlugin.logout(this.logoutParams(s2, walletPlugin));
          } else {
            return Promise.resolve();
          }
        }));
      }
    }
  }
  async restore(args, options) {
    if (!args) {
      const data2 = await this.storage.read("session");
      if (data2) {
        args = JSON.parse(data2);
      } else {
        return;
      }
    }
    if (!args) {
      throw new Error("Either a RestoreArgs object or a Storage instance must be provided.");
    }
    const chainId = Checksum256.from(args.chain instanceof ChainDefinition ? args.chain.id : args.chain);
    let serializedSession;
    const data = await this.storage.read("sessions");
    if (data) {
      const sessions = JSON.parse(data);
      if (args.actor && args.permission) {
        serializedSession = sessions.find((s2) => {
          return args && chainId.equals(s2.chain) && s2.actor === args.actor && s2.permission === args.permission;
        });
      } else {
        serializedSession = sessions.find((s2) => {
          return args && chainId.equals(s2.chain) && s2.default;
        });
      }
    } else {
      if (args.actor && args.permission && args.walletPlugin) {
        serializedSession = {
          chain: String(chainId),
          actor: args.actor,
          permission: args.permission,
          walletPlugin: {
            id: args.walletPlugin.id,
            data: args.walletPlugin.data
          },
          data: args.data
        };
      } else {
        throw new Error("No sessions found in storage. A wallet plugin must be provided.");
      }
    }
    if (!serializedSession) {
      return;
    }
    const walletPlugin = this.walletPlugins.find((p2) => {
      if (!args) {
        return false;
      }
      return p2.id === serializedSession.walletPlugin.id;
    });
    if (!walletPlugin) {
      throw new Error(`No WalletPlugin found with the ID of: '${serializedSession.walletPlugin.id}'`);
    }
    if (serializedSession.walletPlugin.data) {
      walletPlugin.data = serializedSession.walletPlugin.data;
    }
    if (args.walletPlugin && args.walletPlugin.data) {
      walletPlugin.data = args.walletPlugin.data;
    }
    const session = new Session({
      chain: this.getChainDefinition(serializedSession.chain),
      permissionLevel: PermissionLevel.from({
        actor: serializedSession.actor,
        permission: serializedSession.permission
      }),
      walletPlugin
    }, this.getSessionOptions(options));
    if (serializedSession.data) {
      session.data = serializedSession.data;
    }
    this.persistSession(session, options?.setAsDefault);
    return session;
  }
  async restoreAll() {
    const sessions = [];
    const serializedSessions = await this.getSessions();
    if (serializedSessions) {
      for (const s2 of serializedSessions) {
        const session = await this.restore(s2);
        if (session) {
          sessions.push(session);
        }
      }
    }
    return sessions;
  }
  async persistSession(session, setAsDefault = true) {
    if (!this.storage) {
      return;
    }
    const serialized = session.serialize();
    serialized.default = setAsDefault;
    if (setAsDefault) {
      this.storage.write("session", JSON.stringify(serialized));
    }
    const existing = await this.storage.read("sessions");
    if (existing) {
      const stored = JSON.parse(existing);
      const sessions = stored.filter((s2) => {
        return !Checksum256.from(s2.chain).equals(Checksum256.from(serialized.chain)) || !Name.from(s2.actor).equals(Name.from(serialized.actor)) || !Name.from(s2.permission).equals(Name.from(serialized.permission));
      }).map((s2) => {
        if (session.chain.id.equals(s2.chain)) {
          s2.default = false;
        }
        return s2;
      });
      const orderedSessions = [...sessions, serialized];
      orderedSessions.sort((a, b) => {
        const chain = String(a.chain).localeCompare(String(b.chain));
        const actor = String(a.actor).localeCompare(String(b.actor));
        const permission = String(a.permission).localeCompare(String(b.permission));
        return chain || actor || permission;
      });
      this.storage.write("sessions", JSON.stringify(orderedSessions));
    } else {
      this.storage.write("sessions", JSON.stringify([serialized]));
    }
  }
  async getSessions() {
    if (!this.storage) {
      throw new Error("No storage instance is available to retrieve sessions from.");
    }
    const data = await this.storage.read("sessions");
    if (!data)
      return [];
    try {
      const parsed = JSON.parse(data);
      const filtered = parsed.filter((s2) => this.walletPlugins.some((p2) => {
        return p2.id === s2.walletPlugin.id;
      }));
      return filtered;
    } catch (e) {
      throw new Error(`Failed to parse sessions from storage (${e})`);
    }
  }
  getSessionOptions(options) {
    return {
      abis: this.abis,
      allowModify: this.allowModify,
      appName: this.appName,
      expireSeconds: this.expireSeconds,
      fetch: this.fetch,
      storage: this.storage,
      transactPlugins: options?.transactPlugins || this.transactPlugins,
      transactPluginsOptions: options?.transactPluginsOptions || this.transactPluginsOptions,
      ui: this.ui
    };
  }
}
class AbstractUserInterface {
  translate(key2, options, namespace) {
    throw new Error("The `translate` method must be implemented in this UserInterface. Called with: " + JSON.stringify({
      key: key2,
      options,
      namespace
    }));
  }
  getTranslate(namespace) {
    return (key2, options) => this.translate(key2, options, namespace);
  }
  addTranslations(translations2) {
    throw new Error("The `addTranslations` method must be implemented in this UserInterface. Called with: " + JSON.stringify(translations2));
  }
}
function noop() {
}
const identity = (x2) => x2;
function assign(tar, src) {
  for (const k in src) tar[k] = src[k];
  return (
    /** @type {T & S} */
    tar
  );
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || a && typeof a === "object" || typeof a === "function";
}
let src_url_equal_anchor;
function src_url_equal(element_src, url) {
  if (element_src === url) return true;
  if (!src_url_equal_anchor) {
    src_url_equal_anchor = document.createElement("a");
  }
  src_url_equal_anchor.href = url;
  return element_src === src_url_equal_anchor.href;
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    for (const callback of callbacks) {
      callback(void 0);
    }
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
  let value;
  subscribe(store, (_) => value = _)();
  return value;
}
function component_subscribe(component, store, callback) {
  component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn) {
  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
  if (definition[2] && fn) {
    const lets = definition[2](fn(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === "object") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i2 = 0; i2 < len; i2 += 1) {
        merged[i2] = $$scope.dirty[i2] | lets[i2];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function get_all_dirty_from_scope($$scope) {
  if ($$scope.ctx.length > 32) {
    const dirty = [];
    const length = $$scope.ctx.length / 32;
    for (let i2 = 0; i2 < length; i2++) {
      dirty[i2] = -1;
    }
    return dirty;
  }
  return -1;
}
function null_to_empty(value) {
  return value == null ? "" : value;
}
function set_store_value(store, ret, value) {
  store.set(value);
  return ret;
}
function split_css_unit(value) {
  const split = typeof value === "string" && value.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/);
  return split ? [parseFloat(split[1]), split[2] || "px"] : [
    /** @type {number} */
    value,
    "px"
  ];
}
const is_client = typeof window !== "undefined";
let now = is_client ? () => window.performance.now() : () => Date.now();
let raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;
const tasks = /* @__PURE__ */ new Set();
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0) raf(run_tasks);
}
function loop(callback) {
  let task;
  if (tasks.size === 0) raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = { c: callback, f: fulfill });
    }),
    abort() {
      tasks.delete(task);
    }
  };
}
function append(target, node) {
  target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
  const append_styles_to = get_root_for_style(target);
  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style = element("style");
    style.id = style_sheet_id;
    style.textContent = styles;
    append_stylesheet(append_styles_to, style);
  }
}
function get_root_for_style(node) {
  if (!node) return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root && /** @type {ShadowRoot} */
  root.host) {
    return (
      /** @type {ShadowRoot} */
      root
    );
  }
  return node.ownerDocument;
}
function append_empty_stylesheet(node) {
  const style_element = element("style");
  style_element.textContent = "/* empty */";
  append_stylesheet(get_root_for_style(node), style_element);
  return style_element.sheet;
}
function append_stylesheet(node, style) {
  append(
    /** @type {Document} */
    node.head || node,
    style
  );
  return style.sheet;
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function destroy_each(iterations, detaching) {
  for (let i2 = 0; i2 < iterations.length; i2 += 1) {
    if (iterations[i2]) iterations[i2].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function svg_element(name) {
  return document.createElementNS("http://www.w3.org/2000/svg", name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
  return function(event) {
    event.preventDefault();
    return fn.call(this, event);
  };
}
function stop_propagation(fn) {
  return function(event) {
    event.stopPropagation();
    return fn.call(this, event);
  };
}
function self$1(fn) {
  return function(event) {
    if (event.target === this) fn.call(this, event);
  };
}
function attr(node, attribute, value) {
  if (value == null) node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.data === data) return;
  text2.data = /** @type {string} */
  data;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function set_style(node, key2, value, important) {
  if (value == null) {
    node.style.removeProperty(key2);
  } else {
    node.style.setProperty(key2, value, "");
  }
}
function toggle_class(element2, name, toggle) {
  element2.classList.toggle(name, !!toggle);
}
function custom_event(type, detail, { bubbles = false, cancelable: cancelable2 = false } = {}) {
  return new CustomEvent(type, { detail, bubbles, cancelable: cancelable2 });
}
function construct_svelte_component(component, props2) {
  return new component(props2);
}
const managed_styles = /* @__PURE__ */ new Map();
let active$1 = 0;
function hash(str) {
  let hash2 = 5381;
  let i2 = str.length;
  while (i2--) hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i2);
  return hash2 >>> 0;
}
function create_style_information(doc, node) {
  const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
  managed_styles.set(doc, info);
  return info;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = "{\n";
  for (let p2 = 0; p2 <= 1; p2 += step) {
    const t2 = a + (b - a) * ease(p2);
    keyframes += p2 * 100 + `%{${fn(t2, 1 - t2)}}
`;
  }
  const rule = keyframes + `100% {${fn(b, 1 - b)}}
}`;
  const name = `__svelte_${hash(rule)}_${uid}`;
  const doc = get_root_for_style(node);
  const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
  if (!rules[name]) {
    rules[name] = true;
    stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
  }
  const animation = node.style.animation || "";
  node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay}ms 1 both`;
  active$1 += 1;
  return name;
}
function delete_rule(node, name) {
  const previous = (node.style.animation || "").split(", ");
  const next = previous.filter(
    name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf("__svelte") === -1
    // remove all Svelte animations
  );
  const deleted = previous.length - next.length;
  if (deleted) {
    node.style.animation = next.join(", ");
    active$1 -= deleted;
    if (!active$1) clear_rules();
  }
}
function clear_rules() {
  raf(() => {
    if (active$1) return;
    managed_styles.forEach((info) => {
      const { ownerNode } = info.stylesheet;
      if (ownerNode) detach(ownerNode);
    });
    managed_styles.clear();
  });
}
let current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component) throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
function onDestroy(fn) {
  get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail, { cancelable: cancelable2 = false } = {}) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(
        /** @type {string} */
        type,
        detail,
        { cancelable: cancelable2 }
      );
      callbacks.slice().forEach((fn) => {
        fn.call(component, event);
      });
      return !event.defaultPrevented;
    }
    return true;
  };
}
function setContext(key2, context) {
  get_current_component().$$.context.set(key2, context);
  return context;
}
function getContext(key2) {
  return get_current_component().$$.context.get(key2);
}
const dirty_components = [];
const binding_callbacks = [];
let render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = /* @__PURE__ */ Promise.resolve();
let update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
function add_flush_callback(fn) {
  flush_callbacks.push(fn);
}
const seen_callbacks = /* @__PURE__ */ new Set();
let flushidx = 0;
function flush() {
  if (flushidx !== 0) {
    return;
  }
  const saved_component = current_component;
  do {
    try {
      while (flushidx < dirty_components.length) {
        const component = dirty_components[flushidx];
        flushidx++;
        set_current_component(component);
        update(component.$$);
      }
    } catch (e) {
      dirty_components.length = 0;
      flushidx = 0;
      throw e;
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length) binding_callbacks.pop()();
    for (let i2 = 0; i2 < render_callbacks.length; i2 += 1) {
      const callback = render_callbacks[i2];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
function flush_render_callbacks(fns) {
  const filtered = [];
  const targets = [];
  render_callbacks.forEach((c2) => fns.indexOf(c2) === -1 ? filtered.push(c2) : targets.push(c2));
  targets.forEach((c2) => c2());
  render_callbacks = filtered;
}
let promise;
function wait() {
  if (!promise) {
    promise = Promise.resolve();
    promise.then(() => {
      promise = null;
    });
  }
  return promise;
}
function dispatch(node, direction, kind) {
  node.dispatchEvent(custom_event(`${direction ? "intro" : "outro"}${kind}`));
}
const outroing = /* @__PURE__ */ new Set();
let outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
    // parent group
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block)) return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2) block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}
const null_transition = { duration: 0 };
function create_in_transition(node, fn, params) {
  const options = { direction: "in" };
  let config2 = fn(node, params, options);
  let running = false;
  let animation_name;
  let task;
  let uid = 0;
  function cleanup() {
    if (animation_name) delete_rule(node, animation_name);
  }
  function go() {
    const {
      delay = 0,
      duration = 300,
      easing = identity,
      tick = noop,
      css
    } = config2 || null_transition;
    if (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
    tick(0, 1);
    const start_time = now() + delay;
    const end_time = start_time + duration;
    if (task) task.abort();
    running = true;
    add_render_callback(() => dispatch(node, true, "start"));
    task = loop((now2) => {
      if (running) {
        if (now2 >= end_time) {
          tick(1, 0);
          dispatch(node, true, "end");
          cleanup();
          return running = false;
        }
        if (now2 >= start_time) {
          const t2 = easing((now2 - start_time) / duration);
          tick(t2, 1 - t2);
        }
      }
      return running;
    });
  }
  let started = false;
  return {
    start() {
      if (started) return;
      started = true;
      delete_rule(node);
      if (is_function(config2)) {
        config2 = config2(options);
        wait().then(go);
      } else {
        go();
      }
    },
    invalidate() {
      started = false;
    },
    end() {
      if (running) {
        cleanup();
        running = false;
      }
    }
  };
}
function create_bidirectional_transition(node, fn, params, intro) {
  const options = { direction: "both" };
  let config2 = fn(node, params, options);
  let t2 = intro ? 0 : 1;
  let running_program = null;
  let pending_program = null;
  let animation_name = null;
  let original_inert_value;
  function clear_animation() {
    if (animation_name) delete_rule(node, animation_name);
  }
  function init2(program, duration) {
    const d2 = (
      /** @type {Program['d']} */
      program.b - t2
    );
    duration *= Math.abs(d2);
    return {
      a: t2,
      b: program.b,
      d: d2,
      duration,
      start: program.start,
      end: program.start + duration,
      group: program.group
    };
  }
  function go(b) {
    const {
      delay = 0,
      duration = 300,
      easing = identity,
      tick = noop,
      css
    } = config2 || null_transition;
    const program = {
      start: now() + delay,
      b
    };
    if (!b) {
      program.group = outros;
      outros.r += 1;
    }
    if ("inert" in node) {
      if (b) {
        if (original_inert_value !== void 0) {
          node.inert = original_inert_value;
        }
      } else {
        original_inert_value = /** @type {HTMLElement} */
        node.inert;
        node.inert = true;
      }
    }
    if (running_program || pending_program) {
      pending_program = program;
    } else {
      if (css) {
        clear_animation();
        animation_name = create_rule(node, t2, b, duration, delay, easing, css);
      }
      if (b) tick(0, 1);
      running_program = init2(program, duration);
      add_render_callback(() => dispatch(node, b, "start"));
      loop((now2) => {
        if (pending_program && now2 > pending_program.start) {
          running_program = init2(pending_program, duration);
          pending_program = null;
          dispatch(node, running_program.b, "start");
          if (css) {
            clear_animation();
            animation_name = create_rule(
              node,
              t2,
              running_program.b,
              running_program.duration,
              0,
              easing,
              config2.css
            );
          }
        }
        if (running_program) {
          if (now2 >= running_program.end) {
            tick(t2 = running_program.b, 1 - t2);
            dispatch(node, running_program.b, "end");
            if (!pending_program) {
              if (running_program.b) {
                clear_animation();
              } else {
                if (!--running_program.group.r) run_all(running_program.group.c);
              }
            }
            running_program = null;
          } else if (now2 >= running_program.start) {
            const p2 = now2 - running_program.start;
            t2 = running_program.a + running_program.d * easing(p2 / running_program.duration);
            tick(t2, 1 - t2);
          }
        }
        return !!(running_program || pending_program);
      });
    }
  }
  return {
    run(b) {
      if (is_function(config2)) {
        wait().then(() => {
          const opts = { direction: b ? "in" : "out" };
          config2 = config2(opts);
          go(b);
        });
      } else {
        go(b);
      }
    },
    end() {
      clear_animation();
      running_program = pending_program = null;
    }
  };
}
function ensure_array_like(array_like_or_iterator) {
  return array_like_or_iterator?.length !== void 0 ? array_like_or_iterator : Array.from(array_like_or_iterator);
}
function get_spread_update(levels, updates) {
  const update2 = {};
  const to_null_out = {};
  const accounted_for = { $$scope: 1 };
  let i2 = levels.length;
  while (i2--) {
    const o = levels[i2];
    const n2 = updates[i2];
    if (n2) {
      for (const key2 in o) {
        if (!(key2 in n2)) to_null_out[key2] = 1;
      }
      for (const key2 in n2) {
        if (!accounted_for[key2]) {
          update2[key2] = n2[key2];
          accounted_for[key2] = 1;
        }
      }
      levels[i2] = n2;
    } else {
      for (const key2 in o) {
        accounted_for[key2] = 1;
      }
    }
  }
  for (const key2 in to_null_out) {
    if (!(key2 in update2)) update2[key2] = void 0;
  }
  return update2;
}
function get_spread_object(spread_props) {
  return typeof spread_props === "object" && spread_props !== null ? spread_props : {};
}
function bind(component, name, callback) {
  const index = component.$$.props[name];
  if (index !== void 0) {
    component.$$.bound[index] = callback;
    callback(component.$$.ctx[index]);
  }
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor) {
  const { fragment, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  add_render_callback(() => {
    const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
    if (component.$$.on_destroy) {
      component.$$.on_destroy.push(...new_on_destroy);
    } else {
      run_all(new_on_destroy);
    }
    component.$$.on_mount = [];
  });
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    flush_render_callbacks($$.after_update);
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i2) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i2 / 31 | 0] |= 1 << i2 % 31;
}
function init(component, options, instance2, create_fragment2, not_equal, props2, append_styles2, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    // state
    props: props2,
    update: noop,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    // everything else
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles2 && append_styles2($$.root);
  let ready = false;
  $$.ctx = instance2 ? instance2(component, options.props || {}, (i2, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i2], $$.ctx[i2] = value)) {
      if (!$$.skip_bound && $$.bound[i2]) $$.bound[i2](value);
      if (ready) make_dirty(component, i2);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro) transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor);
    flush();
  }
  set_current_component(parent_component);
}
class SvelteComponent {
  constructor() {
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    __publicField(this, "$$");
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    __publicField(this, "$$set");
  }
  /** @returns {void} */
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  /**
   * @template {Extract<keyof Events, string>} K
   * @param {K} type
   * @param {((e: Events[K]) => void) | null | undefined} callback
   * @returns {() => void}
   */
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1) callbacks.splice(index, 1);
    };
  }
  /**
   * @param {Partial<Props>} props
   * @returns {void}
   */
  $set(props2) {
    if (this.$$set && !is_empty(props2)) {
      this.$$.skip_bound = true;
      this.$$set(props2);
      this.$$.skip_bound = false;
    }
  }
}
const PUBLIC_VERSION = "4";
if (typeof window !== "undefined")
  (window.__svelte || (window.__svelte = { v: /* @__PURE__ */ new Set() })).v.add(PUBLIC_VERSION);
function add_css$p(target) {
  append_styles(target, "svelte-efme7g", "h2.svelte-efme7g{color:var(--body-text-color);font-size:var(--fs-2);font-weight:600;text-align:center;margin:0;margin-block-start:var(--space-xs)}");
}
function create_fragment$A(ctx) {
  let h2;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[1].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[0],
    null
  );
  return {
    c() {
      h2 = element("h2");
      if (default_slot) default_slot.c();
      attr(h2, "class", "svelte-efme7g");
    },
    m(target, anchor) {
      insert(target, h2, anchor);
      if (default_slot) {
        default_slot.m(h2, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        1)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[0],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[0]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[0],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(h2);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function instance$A($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
  };
  return [$$scope, slots];
}
class BodyTitle extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$A, create_fragment$A, safe_not_equal, {}, add_css$p);
  }
}
function add_css$o(target) {
  append_styles(target, "svelte-fszb3i", "p.svelte-fszb3i{color:var(--body-text-color-variant);font-size:var(--fs-1);font-weight:400;text-align:center;margin:0;overflow-wrap:anywhere}");
}
function create_fragment$z(ctx) {
  let p2;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[1].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[0],
    null
  );
  return {
    c() {
      p2 = element("p");
      if (default_slot) default_slot.c();
      attr(p2, "class", "svelte-fszb3i");
    },
    m(target, anchor) {
      insert(target, p2, anchor);
      if (default_slot) {
        default_slot.m(p2, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        1)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[0],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[0]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[0],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(p2);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function instance$z($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
  };
  return [$$scope, slots];
}
class BodyText extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$z, create_fragment$z, safe_not_equal, {}, add_css$o);
  }
}
const Alert = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
class="lucide lucide-alert-circle"
><circle cx="12" cy="12" r="10" /><line x1="12" x2="12" y1="8" y2="12" /><line
    x1="12"
    x2="12.01"
    y1="16"
    y2="16"
/></svg
>
`;
const Check = `<svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"><polyline points="20 6 9 17 4 12" /></svg
>
`;
const ChevronLeft = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"><polyline points="15 18 9 12 15 6" /></svg
>
`;
const ChevronRight = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"><polyline points="9 18 15 12 9 6" /></svg
>
`;
const Close$1 = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
><line x1="18" y1="6" x2="6" y2="18" /><line x1="6" y1="6" x2="18" y2="18" /></svg
>
`;
const Copy = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
><rect x="9" y="9" width="13" height="13" rx="2" ry="2" /><path
    d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"
/></svg
>
`;
const Error$2 = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
class="lucide lucide-x-octagon"
><polygon
    points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"
/><line x1="15" x2="9" y1="9" y2="15" /><line x1="9" x2="15" y1="9" y2="15" /></svg
>
`;
const ExternalLink = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
class="lucide lucide-external-link"
><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline
    points="15 3 21 3 21 9"
/><line x1="10" x2="21" y1="14" y2="3" /></svg
>
`;
const Expand = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
><polyline points="15 3 21 3 21 9" /><polyline points="9 21 3 21 3 15" /><line
    x1="21"
    y1="3"
    x2="14"
    y2="10"
/><line x1="3" y1="21" x2="10" y2="14" /></svg
>
`;
const FileCode = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
><path d="M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4" /><polyline
    points="14 2 14 8 20 8"
/><path d="m9 18 3-3-3-3" /><path d="m5 12-3 3 3 3" /></svg
>
`;
const Github = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
class="lucide lucide-github"
><path
    d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"
/><path d="M9 18c-4.51 2-5-2-7-2" /></svg
>
`;
const Globe = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
class="lucide lucide-globe"
><circle cx="12" cy="12" r="10" /><line x1="2" x2="22" y1="12" y2="12" /><path
    d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"
/></svg
>
`;
const Info = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
class="lucide lucide-info"
><circle cx="12" cy="12" r="10" /><line x1="12" x2="12" y1="16" y2="12" /><line
    x1="12"
    x2="12.01"
    y1="8"
    y2="8"
/></svg
>
`;
const Login$1 = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
><path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4" /><polyline
    points="10 17 15 12 10 7"
/><line x1="15" y1="12" x2="3" y2="12" /></svg
>
`;
const Settings$1 = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
class="lucide lucide-settings-2"
><path d="M20 7h-9" /><path d="M14 17H5" /><circle cx="17" cy="17" r="3" /><circle
    cx="7"
    cy="7"
    r="3"
/></svg
>
`;
const Signal = `<svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
    class="lucide lucide-radio"
    ><path d="M4.9 19.1C1 15.2 1 8.8 4.9 4.9" /><path d="M7.8 16.2c-2.3-2.3-2.3-6.1 0-8.5" /><circle
        cx="12"
        cy="12"
        r="2"
    /><path d="M16.2 7.8c2.3 2.3 2.3 6.1 0 8.5" /><path d="M19.1 4.9C23 8.8 23 15.1 19.1 19" /></svg
>
`;
const Theme = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
class="lucide lucide-sun-moon"
><path d="M12 16a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" /><path d="M12 8a2.828 2.828 0 1 0 4 4" /><path
    d="M12 2v2"
/><path d="M12 20v2" /><path d="m4.93 4.93 1.41 1.41" /><path d="m17.66 17.66 1.41 1.41" /><path
    d="M2 12h2"
/><path d="M20 12h2" /><path d="m6.34 17.66-1.41 1.41" /><path d="m19.07 4.93-1.41 1.41" /></svg
>
`;
const Wallet$1 = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
><path d="M20 12V8H6a2 2 0 0 1-2-2c0-1.1.9-2 2-2h12v4" /><path
    d="M4 6v12c0 1.1.9 2 2 2h14v-4"
/><path d="M18 12a2 2 0 0 0-2 2c0 1.1.9 2 2 2h4v-4h-4z" /></svg
>
`;
const Waves = `<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
class="lucide lucide-waves"
><path
    d="M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
/><path
    d="M2 12c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
/><path
    d="M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
/></svg
>
`;
const Wharf = `<svg width="36" height="31" fill="none" xmlns="http://www.w3.org/2000/svg"
><path
    d="M35.54 18.77c-.019.989-.673 1.676-1.319 2.048l-1.388.802c-.663.383-1.438.531-2.132.531-.695 0-1.47-.148-2.132-.531l-1.362-.802v2.722c0 1.008-.664 1.711-1.318 2.089l-1.389.801c-.663.383-1.437.531-2.132.531-.694 0-1.469-.148-2.131-.53l-2.035-1.175-2.034 1.174c-.663.383-1.438.531-2.132.531-.694 0-1.469-.148-2.131-.53l-9.722-5.613c-.645-.372-1.3-1.06-1.317-2.049v-.061 3.626c.018.989.672 1.676 1.317 2.049l9.722 5.612c.662.382 1.437.53 2.131.53.694 0 1.47-.148 2.132-.53l2.034-1.175 2.035 1.175c.662.382 1.437.53 2.131.53.695 0 1.47-.148 2.132-.53l1.389-.802c.654-.378 1.318-1.08 1.318-2.088v-2.722l1.362.801c.663.383 1.437.531 2.132.531.694 0 1.469-.148 2.132-.53l1.388-.802c.646-.373 1.3-1.06 1.318-2.05V18.77Z"
    fill="#7BE7CE"
/><path
    d="M.874 15.362a1.5 1.5 0 0 0-.009.161v3.246c.019.99.673 1.677 1.318 2.05l9.722 5.612c.662.382 1.437.53 2.131.53.694 0 1.47-.148 2.132-.53l2.034-1.175 2.035 1.175c.662.382 1.437.53 2.131.53.695 0 1.47-.148 2.132-.53l1.389-.802c.654-.378 1.318-1.08 1.318-2.089V20.82l1.362.801c.663.383 1.437.531 2.132.531.694 0 1.469-.148 2.132-.53l1.388-.802c.646-.373 1.3-1.06 1.318-2.05v-3.564c-.018.99-.672 1.677-1.318 2.049l-1.388.802c-.663.382-1.438.53-2.132.53-.695 0-1.47-.148-2.132-.53l-1.388-.802a2.943 2.943 0 0 1-.067-.04 2.168 2.168 0 0 1 .085.834c.005.05.008.101.008.152v1.776c0 1.008-.664 1.71-1.318 2.088l-1.389.802c-.663.383-1.437.531-2.132.531-.694 0-1.469-.148-2.131-.53l-2.035-1.175-2.034 1.174c-.663.383-1.438.531-2.132.531-.694 0-1.469-.148-2.131-.53l-9.722-5.613c-.61-.352-1.229-.987-1.31-1.892ZM17.54 5.749l.004.043c.07.6.368 1.074.74 1.424a4.94 4.94 0 0 0-.75.045V5.875c0-.043.002-.085.006-.126Z"
    fill="#B2F2E1"
/><path
    d="m3.573 10.152-1.389.801c-.618.358-1.246 1.006-1.312 1.928a1.364 1.364 0 0 0-.007.136V15.204c.019.99.673 1.677 1.318 2.05l9.722 5.611c.662.383 1.437.532 2.131.532.694 0 1.47-.149 2.132-.532l2.034-1.174 2.035 1.174c.662.383 1.437.532 2.131.532.695 0 1.47-.149 2.132-.532l1.389-.801c.654-.378 1.318-1.08 1.318-2.089v-1.775c0-.052-.003-.102-.008-.153a2.25 2.25 0 0 0-.085-.833l.067.04 1.388.801c.663.383 1.437.531 2.132.531.694 0 1.469-.148 2.132-.53l1.388-.802c.646-.373 1.3-1.06 1.318-2.05v-2.092a2.359 2.359 0 0 0 0-.142V8.29l.001-.058c0-1.009-.664-1.711-1.318-2.089L24.501.531C23.838.15 23.064 0 22.369 0c-.694 0-1.469.149-2.131.531l-1.389.802c-.654.377-1.318 1.08-1.318 2.088 0 .048.001.095.004.14v1.847a2.069 2.069 0 0 0 .01.385c.069.6.367 1.073.739 1.423h-.08c-.695 0-1.47.148-2.133.53l-1.388.802c-.654.378-1.318 1.08-1.318 2.089 0 .065.002.13.008.193a1.485 1.485 0 0 0-.002.073v1.682l-.003.041-.002.045a2.298 2.298 0 0 0 .021.405c.017.112.041.22.072.322l-5.623-3.246C7.174 9.769 6.4 9.62 5.705 9.62c-.695 0-1.47.148-2.132.53Z"
    fill="#F4FAF4"
/><path
    d="M23.758 1.818c-.767-.442-2.01-.442-2.778 0l-1.389.802c-.766.443-.766 1.16 0 1.604l9.553 5.514c.369.213.575.501.575.802v.195c0 .3-.207.589-.575.801l-1.22.705c-.767.443-.767 1.16 0 1.603l1.389.802c.767.443 2.01.443 2.777 0l1.389-.802c.767-.443.767-1.16 0-1.603l-1.22-.705c-.369-.212-.576-.5-.576-.801v-.195c0-.3.207-.59.576-.802l1.22-.704c.767-.443.767-1.16 0-1.604l-9.721-5.612ZM7.093 11.439c-.767-.443-2.01-.443-2.777 0l-1.39.802c-.766.443-.766 1.16 0 1.603l9.722 5.612c.767.443 2.01.443 2.777 0l2.778-1.603-11.11-6.414Z"
    fill="#494E62"
/><path
    d="M23.351 15.545c0 .3.207.589.575.801l1.22.705c.767.443.767 1.16 0 1.603l-1.388.802c-.767.443-2.01.443-2.778 0l-2.777-1.603 2.609-1.507c.368-.212.575-.5.575-.801v-.195c0-.3-.207-.589-.575-.801l-5.387-3.11c-.767-.443-.767-1.16 0-1.603l1.39-.802c.766-.443 2.01-.443 2.776 0l5.555 3.207c.767.443.767 1.16 0 1.603l-1.22.705c-.368.212-.575.5-.575.801v.195Z"
    fill="#494E62"
/></svg
>
`;
const icons = {
  copy: Copy,
  check: Check,
  close: Close$1,
  "file-code": FileCode,
  wharf: Wharf,
  login: Login$1,
  "chevron-right": ChevronRight,
  "chevron-left": ChevronLeft,
  wallet: Wallet$1,
  expand: Expand,
  signal: Signal,
  settings: Settings$1,
  globe: Globe,
  github: Github,
  info: Info,
  theme: Theme,
  waves: Waves,
  "external-link": ExternalLink,
  error: Error$2,
  alert: Alert
};
function add_css$n(target) {
  append_styles(target, "svelte-19w48ux", "div.svelte-19w48ux svg{width:100%;height:100%}");
}
function create_fragment$y(ctx) {
  let div;
  let raw_value = icons[
    /*name*/
    ctx[0]
  ] + "";
  return {
    c() {
      div = element("div");
      set_style(
        div,
        "width",
        /*size*/
        ctx[1]
      );
      set_style(div, "display", "grid");
      set_style(div, "place-content", "center");
      set_style(
        div,
        "color",
        /*color*/
        ctx[2]
      );
      attr(div, "class", "svelte-19w48ux");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      div.innerHTML = raw_value;
    },
    p(ctx2, [dirty]) {
      if (dirty & /*name*/
      1 && raw_value !== (raw_value = icons[
        /*name*/
        ctx2[0]
      ] + "")) div.innerHTML = raw_value;
      if (dirty & /*size*/
      2) {
        set_style(
          div,
          "width",
          /*size*/
          ctx2[1]
        );
      }
      if (dirty & /*color*/
      4) {
        set_style(
          div,
          "color",
          /*color*/
          ctx2[2]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function instance$y($$self, $$props, $$invalidate) {
  let { name } = $$props;
  let { size: size2 = "var(--space-l)" } = $$props;
  let { color = "currentColor" } = $$props;
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2) $$invalidate(0, name = $$props2.name);
    if ("size" in $$props2) $$invalidate(1, size2 = $$props2.size);
    if ("color" in $$props2) $$invalidate(2, color = $$props2.color);
  };
  return [name, size2, color];
}
class Icon extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$y, create_fragment$y, safe_not_equal, { name: 0, size: 1, color: 2 }, add_css$n);
  }
}
function add_css$m(target) {
  append_styles(target, "svelte-1u0n4gl", "div.svelte-1u0n4gl{display:grid;justify-items:center;gap:var(--space-s);text-align:center;color:var(--body-text-color);margin-block:var(--space-s)}");
}
function create_if_block_2$9(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      name: (
        /*icon*/
        ctx[2]
      ),
      size: "var(--space-3xl)",
      color: (
        /*iconColor*/
        ctx[3]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*icon*/
      4) icon_1_changes.name = /*icon*/
      ctx2[2];
      if (dirty & /*iconColor*/
      8) icon_1_changes.color = /*iconColor*/
      ctx2[3];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current) return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_if_block_1$9(ctx) {
  let bodytitle;
  let current;
  bodytitle = new BodyTitle({
    props: {
      $$slots: { default: [create_default_slot_1$a] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(bodytitle.$$.fragment);
    },
    m(target, anchor) {
      mount_component(bodytitle, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const bodytitle_changes = {};
      if (dirty & /*$$scope, title*/
      17) {
        bodytitle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      bodytitle.$set(bodytitle_changes);
    },
    i(local) {
      if (current) return;
      transition_in(bodytitle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(bodytitle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(bodytitle, detaching);
    }
  };
}
function create_default_slot_1$a(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*title*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*title*/
      1) set_data(
        t2,
        /*title*/
        ctx2[0]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block$j(ctx) {
  let bodytext;
  let current;
  bodytext = new BodyText({
    props: {
      $$slots: { default: [create_default_slot$c] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(bodytext.$$.fragment);
    },
    m(target, anchor) {
      mount_component(bodytext, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const bodytext_changes = {};
      if (dirty & /*$$scope, details*/
      18) {
        bodytext_changes.$$scope = { dirty, ctx: ctx2 };
      }
      bodytext.$set(bodytext_changes);
    },
    i(local) {
      if (current) return;
      transition_in(bodytext.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(bodytext.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(bodytext, detaching);
    }
  };
}
function create_default_slot$c(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*details*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*details*/
      2) set_data(
        t2,
        /*details*/
        ctx2[1]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_fragment$x(ctx) {
  let div;
  let t0;
  let t1;
  let current;
  let if_block0 = (
    /*icon*/
    ctx[2] && create_if_block_2$9(ctx)
  );
  let if_block1 = (
    /*title*/
    ctx[0] && create_if_block_1$9(ctx)
  );
  let if_block2 = (
    /*details*/
    ctx[1] && create_if_block$j(ctx)
  );
  return {
    c() {
      div = element("div");
      if (if_block0) if_block0.c();
      t0 = space();
      if (if_block1) if_block1.c();
      t1 = space();
      if (if_block2) if_block2.c();
      attr(div, "class", "svelte-1u0n4gl");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block0) if_block0.m(div, null);
      append(div, t0);
      if (if_block1) if_block1.m(div, null);
      append(div, t1);
      if (if_block2) if_block2.m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*icon*/
        ctx2[2]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*icon*/
          4) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_2$9(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*title*/
        ctx2[0]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*title*/
          1) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_1$9(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div, t1);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (
        /*details*/
        ctx2[1]
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty & /*details*/
          2) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block$j(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block0) if_block0.d();
      if (if_block1) if_block1.d();
      if (if_block2) if_block2.d();
    }
  };
}
function instance$x($$self, $$props, $$invalidate) {
  let { title = void 0 } = $$props;
  let { details = void 0 } = $$props;
  let { icon = void 0 } = $$props;
  let { iconColor = "currentColor" } = $$props;
  $$self.$$set = ($$props2) => {
    if ("title" in $$props2) $$invalidate(0, title = $$props2.title);
    if ("details" in $$props2) $$invalidate(1, details = $$props2.details);
    if ("icon" in $$props2) $$invalidate(2, icon = $$props2.icon);
    if ("iconColor" in $$props2) $$invalidate(3, iconColor = $$props2.iconColor);
  };
  return [title, details, icon, iconColor];
}
class Message extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$x,
      create_fragment$x,
      safe_not_equal,
      {
        title: 0,
        details: 1,
        icon: 2,
        iconColor: 3
      },
      add_css$m
    );
  }
}
function create_fragment$w(ctx) {
  let message;
  let current;
  message = new Message({
    props: {
      title: (
        /*title*/
        ctx[0]
      ),
      details: (
        /*details*/
        ctx[1]
      ),
      icon: "error",
      iconColor: "var(--color-error-2)"
    }
  });
  return {
    c() {
      create_component(message.$$.fragment);
    },
    m(target, anchor) {
      mount_component(message, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const message_changes = {};
      if (dirty & /*title*/
      1) message_changes.title = /*title*/
      ctx2[0];
      if (dirty & /*details*/
      2) message_changes.details = /*details*/
      ctx2[1];
      message.$set(message_changes);
    },
    i(local) {
      if (current) return;
      transition_in(message.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(message.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(message, detaching);
    }
  };
}
function instance$w($$self, $$props, $$invalidate) {
  let { title } = $$props;
  let { details } = $$props;
  $$self.$$set = ($$props2) => {
    if ("title" in $$props2) $$invalidate(0, title = $$props2.title);
    if ("details" in $$props2) $$invalidate(1, details = $$props2.details);
  };
  return [title, details];
}
class ErrorMessage extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$w, create_fragment$w, safe_not_equal, { title: 0, details: 1 });
  }
}
const subscriber_queue = [];
function readable(value, start) {
  return {
    subscribe: writable(value, start).subscribe
  };
}
function writable(value, start = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i2 = 0; i2 < subscriber_queue.length; i2 += 2) {
            subscriber_queue[i2][0](subscriber_queue[i2 + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set, update2) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0 && stop) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update: update2, subscribe: subscribe2 };
}
function derived(stores, fn, initial_value) {
  const single = !Array.isArray(stores);
  const stores_array = single ? [stores] : stores;
  if (!stores_array.every(Boolean)) {
    throw new Error("derived() expects stores as input, got a falsy value");
  }
  const auto = fn.length < 2;
  return readable(initial_value, (set, update2) => {
    let started = false;
    const values = [];
    let pending = 0;
    let cleanup = noop;
    const sync = () => {
      if (pending) {
        return;
      }
      cleanup();
      const result = fn(single ? values[0] : values, set, update2);
      if (auto) {
        set(result);
      } else {
        cleanup = is_function(result) ? result : noop;
      }
    };
    const unsubscribers = stores_array.map(
      (store, i2) => subscribe(
        store,
        (value) => {
          values[i2] = value;
          pending &= ~(1 << i2);
          if (started) {
            sync();
          }
        },
        () => {
          pending |= 1 << i2;
        }
      )
    );
    started = true;
    sync();
    return function stop() {
      run_all(unsubscribers);
      cleanup();
      started = false;
    };
  });
}
function resetState() {
  active.set(false);
  router.set({ ...defaultUserInterfaceRouter });
  props.set({ ...defaultUserInterfaceProps });
  prompt.reset();
  cancelablePromises.set([]);
  transactContext.set(void 0);
  loginContext.set(void 0);
  loginPromise.set(void 0);
  loginResponse.set({ ...defaultLoginResponse });
  accountCreationContext.set(void 0);
  accountCreationPromise.set(void 0);
  accountCreationResponse.set({ ...defaultAccountCreationResponse });
  errorDetails.set(void 0);
  backAction.set(void 0);
  transitionDirection.set(void 0);
}
const active = writable(false);
const allowSettings = writable(false);
const defaultUserInterfaceSettings = {
  language: "",
  theme: void 0,
  animations: true
};
function makeSettingsStore(data = defaultUserInterfaceSettings) {
  const store = writable(data);
  const { subscribe: subscribe2, set } = store;
  let storage;
  if (typeof localStorage !== "undefined") {
    storage = new BrowserLocalStorage("web.renderer");
    storage.read("settings").then((existing) => {
      if (existing) {
        set(JSON.parse(existing));
      }
    });
  }
  return {
    subscribe: subscribe2,
    set: (n2) => {
      if (storage) {
        storage.write("settings", JSON.stringify(n2));
      }
      set(n2);
    },
    update: (cb) => {
      const updatedStore = cb(get_store_value(store));
      if (storage) {
        storage.write("settings", JSON.stringify(updatedStore));
      }
      set(updatedStore);
    }
  };
}
const settings$5 = makeSettingsStore();
const defaultUserInterfaceProps = {
  title: "Wharf",
  subtitle: "Status Message"
};
const props = writable(defaultUserInterfaceProps);
const defaultUserInterfaceRouter = {
  path: "",
  history: []
};
const initRouter = () => {
  const { set, subscribe: subscribe2, update: update2 } = writable(defaultUserInterfaceRouter);
  return {
    // Method to go one back in history
    back: () => update2((current) => ({
      ...current,
      path: current.history[current.history.length - 1],
      history: current.history.slice(0, -1)
    })),
    // Push a new path on to history
    push: (path) => update2((current) => ({
      ...current,
      path,
      history: [...current.history, current.path]
    })),
    set,
    subscribe: subscribe2,
    update: update2
  };
};
const router = initRouter();
const cancelablePromises = writable([]);
const transactContext = writable(void 0);
const initPrompt = () => {
  const { set, subscribe: subscribe2, update: update2 } = writable(void 0);
  return {
    reset: () => set(void 0),
    set,
    subscribe: subscribe2,
    update: update2
  };
};
const prompt = initPrompt();
const defaultLoginResponse = {
  chainId: void 0,
  permissionLevel: void 0,
  walletPluginIndex: void 0
};
const loginContext = writable(void 0);
const loginPromise = writable(void 0);
const loginResponse = writable({ ...defaultLoginResponse });
const defaultAccountCreationResponse = {
  chain: void 0,
  pluginId: void 0
};
const accountCreationContext = writable(void 0);
const accountCreationResponse = writable({
  ...defaultAccountCreationResponse
});
const accountCreationPromise = writable(void 0);
const errorDetails = writable(void 0);
const backAction = writable(void 0);
const transitionDirection = writable(void 0);
function create_if_block$i(ctx) {
  let errormessage;
  let current;
  errormessage = new ErrorMessage({
    props: {
      title: (
        /*$t*/
        ctx[1]("error.title", { default: "Error" })
      ),
      details: (
        /*$errorDetails*/
        ctx[0]
      )
    }
  });
  return {
    c() {
      create_component(errormessage.$$.fragment);
    },
    m(target, anchor) {
      mount_component(errormessage, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const errormessage_changes = {};
      if (dirty & /*$t*/
      2) errormessage_changes.title = /*$t*/
      ctx2[1]("error.title", { default: "Error" });
      if (dirty & /*$errorDetails*/
      1) errormessage_changes.details = /*$errorDetails*/
      ctx2[0];
      errormessage.$set(errormessage_changes);
    },
    i(local) {
      if (current) return;
      transition_in(errormessage.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(errormessage.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(errormessage, detaching);
    }
  };
}
function create_fragment$v(ctx) {
  let div;
  let current;
  let if_block = (
    /*$errorDetails*/
    ctx[0] && create_if_block$i(ctx)
  );
  return {
    c() {
      div = element("div");
      if (if_block) if_block.c();
      attr(div, "class", "error");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block) if_block.m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*$errorDetails*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$errorDetails*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$i(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block) if_block.d();
    }
  };
}
function instance$v($$self, $$props, $$invalidate) {
  let $errorDetails;
  let $t;
  component_subscribe($$self, errorDetails, ($$value) => $$invalidate(0, $errorDetails = $$value));
  const { t: t2 } = getContext("i18n");
  component_subscribe($$self, t2, (value) => $$invalidate(1, $t = value));
  return [$errorDetails, $t, t2];
}
class Error$1 extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$v, create_fragment$v, safe_not_equal, {});
  }
}
function add_css$l(target) {
  append_styles(target, "svelte-1q25md2", "ul.svelte-1q25md2{list-style:none;padding:0;margin:0}");
}
function create_fragment$u(ctx) {
  let ul;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[1].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[0],
    null
  );
  return {
    c() {
      ul = element("ul");
      if (default_slot) default_slot.c();
      attr(ul, "class", "svelte-1q25md2");
    },
    m(target, anchor) {
      insert(target, ul, anchor);
      if (default_slot) {
        default_slot.m(ul, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        1)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[0],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[0]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[0],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(ul);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function instance$u($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
  };
  return [$$scope, slots];
}
class List extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$u, create_fragment$u, safe_not_equal, {}, add_css$l);
  }
}
function add_css$k(target) {
  append_styles(target, "svelte-1w5zc52", "li.svelte-1w5zc52.svelte-1w5zc52{display:flex;height:calc(var(--space-l) * 2);align-items:center;color:var(--body-text-color);font-size:var(--fs-1);font-weight:500}li.svelte-1w5zc52.svelte-1w5zc52:not(:last-child){border-bottom:1px solid var(--list-divider-color)}button.svelte-1w5zc52.svelte-1w5zc52,a.svelte-1w5zc52.svelte-1w5zc52{flex:1;height:100%;display:flex;align-items:center;cursor:pointer;border:none;background:none;color:inherit;font-size:inherit;font-family:inherit;font-weight:inherit;margin:0;padding:0;padding-inline-start:var(--space-3xs);text-decoration:none}.leading.svelte-1w5zc52.svelte-1w5zc52{inline-size:var(--space-xl);block-size:var(--space-xl);display:grid;place-content:center}.leading.svelte-1w5zc52>.svelte-1w5zc52{max-inline-size:30px;max-block-size:30px}.leading.svelte-1w5zc52 img.svelte-1w5zc52{width:100%;height:100%;object-fit:contain}.trailing.svelte-1w5zc52.svelte-1w5zc52{opacity:0.2;padding-inline-end:var(--space-s)}li.svelte-1w5zc52.svelte-1w5zc52:hover{background:var(--list-item-background-color-hover)}li.svelte-1w5zc52:hover .trailing.svelte-1w5zc52{opacity:1}.label.svelte-1w5zc52.svelte-1w5zc52{flex:1;text-align:start;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;padding-inline-start:var(--space-xs)}.value.svelte-1w5zc52.svelte-1w5zc52{font-weight:400;padding-inline-end:var(--space-xs)}");
}
function create_else_block$5(ctx) {
  let a;
  let div;
  let current_block_type_index;
  let if_block0;
  let t0;
  let span;
  let t1;
  let t2;
  let t3;
  let current;
  const if_block_creators = [create_if_block_7, create_if_block_8];
  const if_blocks = [];
  function select_block_type_2(ctx2, dirty) {
    if (
      /*logo*/
      ctx2[4]
    ) return 0;
    if (
      /*leadingIcon*/
      ctx2[2]
    ) return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type_2(ctx))) {
    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  let if_block1 = (
    /*value*/
    ctx[5] && create_if_block_6$1(ctx)
  );
  let if_block2 = (
    /*trailingIcon*/
    ctx[3] && create_if_block_5$1(ctx)
  );
  return {
    c() {
      a = element("a");
      div = element("div");
      if (if_block0) if_block0.c();
      t0 = space();
      span = element("span");
      t1 = text(
        /*label*/
        ctx[0]
      );
      t2 = space();
      if (if_block1) if_block1.c();
      t3 = space();
      if (if_block2) if_block2.c();
      attr(div, "class", "leading svelte-1w5zc52");
      attr(span, "class", "label svelte-1w5zc52");
      attr(
        a,
        "href",
        /*link*/
        ctx[6]
      );
      attr(a, "target", "_blank");
      attr(a, "rel", "noreferrer");
      attr(a, "class", "svelte-1w5zc52");
    },
    m(target, anchor) {
      insert(target, a, anchor);
      append(a, div);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(div, null);
      }
      append(a, t0);
      append(a, span);
      append(span, t1);
      append(a, t2);
      if (if_block1) if_block1.m(a, null);
      append(a, t3);
      if (if_block2) if_block2.m(a, null);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_2(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block0) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block0 = if_blocks[current_block_type_index];
          if (!if_block0) {
            if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block0.c();
          } else {
            if_block0.p(ctx2, dirty);
          }
          transition_in(if_block0, 1);
          if_block0.m(div, null);
        } else {
          if_block0 = null;
        }
      }
      if (!current || dirty & /*label*/
      1) set_data(
        t1,
        /*label*/
        ctx2[0]
      );
      if (
        /*value*/
        ctx2[5]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_6$1(ctx2);
          if_block1.c();
          if_block1.m(a, t3);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (
        /*trailingIcon*/
        ctx2[3]
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty & /*trailingIcon*/
          8) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_5$1(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(a, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*link*/
      64) {
        attr(
          a,
          "href",
          /*link*/
          ctx2[6]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block0);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(a);
      }
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
      if (if_block1) if_block1.d();
      if (if_block2) if_block2.d();
    }
  };
}
function create_if_block$h(ctx) {
  let button;
  let div;
  let current_block_type_index;
  let if_block0;
  let t0;
  let span;
  let t1;
  let t2;
  let t3;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_3$6, create_if_block_4$5];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*logo*/
      ctx2[4]
    ) return 0;
    if (
      /*leadingIcon*/
      ctx2[2]
    ) return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type_1(ctx))) {
    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  let if_block1 = (
    /*value*/
    ctx[5] && create_if_block_2$8(ctx)
  );
  let if_block2 = (
    /*trailingIcon*/
    ctx[3] && create_if_block_1$8(ctx)
  );
  return {
    c() {
      button = element("button");
      div = element("div");
      if (if_block0) if_block0.c();
      t0 = space();
      span = element("span");
      t1 = text(
        /*label*/
        ctx[0]
      );
      t2 = space();
      if (if_block1) if_block1.c();
      t3 = space();
      if (if_block2) if_block2.c();
      attr(div, "class", "leading svelte-1w5zc52");
      attr(span, "class", "label svelte-1w5zc52");
      attr(button, "class", "svelte-1w5zc52");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, div);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(div, null);
      }
      append(button, t0);
      append(button, span);
      append(span, t1);
      append(button, t2);
      if (if_block1) if_block1.m(button, null);
      append(button, t3);
      if (if_block2) if_block2.m(button, null);
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", function() {
          if (is_function(
            /*onClick*/
            ctx[1]
          )) ctx[1].apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx, dirty);
        }
      } else {
        if (if_block0) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block0 = if_blocks[current_block_type_index];
          if (!if_block0) {
            if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
            if_block0.c();
          } else {
            if_block0.p(ctx, dirty);
          }
          transition_in(if_block0, 1);
          if_block0.m(div, null);
        } else {
          if_block0 = null;
        }
      }
      if (!current || dirty & /*label*/
      1) set_data(
        t1,
        /*label*/
        ctx[0]
      );
      if (
        /*value*/
        ctx[5]
      ) {
        if (if_block1) {
          if_block1.p(ctx, dirty);
        } else {
          if_block1 = create_if_block_2$8(ctx);
          if_block1.c();
          if_block1.m(button, t3);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (
        /*trailingIcon*/
        ctx[3]
      ) {
        if (if_block2) {
          if_block2.p(ctx, dirty);
          if (dirty & /*trailingIcon*/
          8) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_1$8(ctx);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(button, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block0);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
      if (if_block1) if_block1.d();
      if (if_block2) if_block2.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_8(ctx) {
  let div;
  let icon;
  let current;
  icon = new Icon({ props: { name: (
    /*leadingIcon*/
    ctx[2]
  ) } });
  return {
    c() {
      div = element("div");
      create_component(icon.$$.fragment);
      attr(div, "class", "icon svelte-1w5zc52");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(icon, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*leadingIcon*/
      4) icon_changes.name = /*leadingIcon*/
      ctx2[2];
      icon.$set(icon_changes);
    },
    i(local) {
      if (current) return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
    }
  };
}
function create_if_block_7(ctx) {
  let div;
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      div = element("div");
      img = element("img");
      if (!src_url_equal(img.src, img_src_value = /*logo*/
      ctx[4])) attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = `${/*label*/
      ctx[0]} logo`);
      attr(img, "class", "svelte-1w5zc52");
      attr(div, "class", "logo svelte-1w5zc52");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, img);
    },
    p(ctx2, dirty) {
      if (dirty & /*logo*/
      16 && !src_url_equal(img.src, img_src_value = /*logo*/
      ctx2[4])) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*label*/
      1 && img_alt_value !== (img_alt_value = `${/*label*/
      ctx2[0]} logo`)) {
        attr(img, "alt", img_alt_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_6$1(ctx) {
  let span;
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(
        /*value*/
        ctx[5]
      );
      attr(span, "class", "value svelte-1w5zc52");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      32) set_data(
        t2,
        /*value*/
        ctx2[5]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_5$1(ctx) {
  let div;
  let icon;
  let current;
  icon = new Icon({ props: { name: (
    /*trailingIcon*/
    ctx[3]
  ) } });
  return {
    c() {
      div = element("div");
      create_component(icon.$$.fragment);
      attr(div, "class", "trailing svelte-1w5zc52");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(icon, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*trailingIcon*/
      8) icon_changes.name = /*trailingIcon*/
      ctx2[3];
      icon.$set(icon_changes);
    },
    i(local) {
      if (current) return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
    }
  };
}
function create_if_block_4$5(ctx) {
  let div;
  let icon;
  let current;
  icon = new Icon({ props: { name: (
    /*leadingIcon*/
    ctx[2]
  ) } });
  return {
    c() {
      div = element("div");
      create_component(icon.$$.fragment);
      attr(div, "class", "icon svelte-1w5zc52");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(icon, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*leadingIcon*/
      4) icon_changes.name = /*leadingIcon*/
      ctx2[2];
      icon.$set(icon_changes);
    },
    i(local) {
      if (current) return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
    }
  };
}
function create_if_block_3$6(ctx) {
  let div;
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      div = element("div");
      img = element("img");
      if (!src_url_equal(img.src, img_src_value = /*logo*/
      ctx[4])) attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = `${/*label*/
      ctx[0]} logo`);
      attr(img, "class", "svelte-1w5zc52");
      attr(div, "class", "logo svelte-1w5zc52");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, img);
    },
    p(ctx2, dirty) {
      if (dirty & /*logo*/
      16 && !src_url_equal(img.src, img_src_value = /*logo*/
      ctx2[4])) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*label*/
      1 && img_alt_value !== (img_alt_value = `${/*label*/
      ctx2[0]} logo`)) {
        attr(img, "alt", img_alt_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_2$8(ctx) {
  let span;
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(
        /*value*/
        ctx[5]
      );
      attr(span, "class", "value svelte-1w5zc52");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      32) set_data(
        t2,
        /*value*/
        ctx2[5]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_1$8(ctx) {
  let div;
  let icon;
  let current;
  icon = new Icon({ props: { name: (
    /*trailingIcon*/
    ctx[3]
  ) } });
  return {
    c() {
      div = element("div");
      create_component(icon.$$.fragment);
      attr(div, "class", "trailing svelte-1w5zc52");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(icon, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*trailingIcon*/
      8) icon_changes.name = /*trailingIcon*/
      ctx2[3];
      icon.$set(icon_changes);
    },
    i(local) {
      if (current) return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
    }
  };
}
function fallback_block$2(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$h, create_else_block$5];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!/*link*/
    ctx2[6]) return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_fragment$t(ctx) {
  let li;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[8].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    null
  );
  const default_slot_or_fallback = default_slot || fallback_block$2(ctx);
  return {
    c() {
      li = element("li");
      if (default_slot_or_fallback) default_slot_or_fallback.c();
      attr(li, "class", "svelte-1w5zc52");
    },
    m(target, anchor) {
      insert(target, li, anchor);
      if (default_slot_or_fallback) {
        default_slot_or_fallback.m(li, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              null
            ),
            null
          );
        }
      } else {
        if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*onClick, trailingIcon, value, label, logo, leadingIcon, link*/
        127)) {
          default_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot_or_fallback, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot_or_fallback, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(li);
      }
      if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    }
  };
}
function instance$t($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { label = void 0 } = $$props;
  let { onClick = () => {
  } } = $$props;
  let { leadingIcon = void 0 } = $$props;
  let { trailingIcon = "chevron-right" } = $$props;
  let { logo = void 0 } = $$props;
  let { value = void 0 } = $$props;
  let { link = void 0 } = $$props;
  $$self.$$set = ($$props2) => {
    if ("label" in $$props2) $$invalidate(0, label = $$props2.label);
    if ("onClick" in $$props2) $$invalidate(1, onClick = $$props2.onClick);
    if ("leadingIcon" in $$props2) $$invalidate(2, leadingIcon = $$props2.leadingIcon);
    if ("trailingIcon" in $$props2) $$invalidate(3, trailingIcon = $$props2.trailingIcon);
    if ("logo" in $$props2) $$invalidate(4, logo = $$props2.logo);
    if ("value" in $$props2) $$invalidate(5, value = $$props2.value);
    if ("link" in $$props2) $$invalidate(6, link = $$props2.link);
    if ("$$scope" in $$props2) $$invalidate(7, $$scope = $$props2.$$scope);
  };
  return [label, onClick, leadingIcon, trailingIcon, logo, value, link, $$scope, slots];
}
class ListItem extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$t,
      create_fragment$t,
      safe_not_equal,
      {
        label: 0,
        onClick: 1,
        leadingIcon: 2,
        trailingIcon: 3,
        logo: 4,
        value: 5,
        link: 6
      },
      add_css$k
    );
  }
}
function isUrlImage(str) {
  return str.startsWith("http://") || str.startsWith("https://");
}
function isBase64Image(str) {
  return str.startsWith("data:image/");
}
function isValidIcon(str) {
  return str in icons;
}
function getThemedLogo(metadata) {
  const { name, logo } = metadata;
  let { theme } = get_store_value(settings$5);
  const oppositeTheme = theme === "light" ? "dark" : "light";
  if (!theme) {
    window.matchMedia("(prefers-color-scheme: dark)").matches ? theme = "dark" : theme = "light";
  }
  if (!logo) {
    if ("getLogo" in metadata) {
      return metadata.getLogo()?.[theme] ?? metadata.getLogo()?.[oppositeTheme];
    }
    console.warn(`${name} does not have a logo.`);
    return;
  }
  const image = logo[theme] ?? logo[oppositeTheme];
  if (!isUrlImage(image.toString()) && !isBase64Image(image.toString())) {
    console.warn(`${name} ${theme} logo is not a supported image format.`);
    return;
  }
  return image;
}
function add_css$j(target) {
  append_styles(target, "svelte-1d8fcdl", "section.svelte-1d8fcdl{display:flex;flex-direction:column;gap:var(--space-s)}");
}
function get_each_context$5(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[4] = list[i2];
  return child_ctx;
}
function create_if_block$g(ctx) {
  let section;
  let bodytitle;
  let t2;
  let list;
  let current;
  bodytitle = new BodyTitle({
    props: {
      $$slots: { default: [create_default_slot_1$9] },
      $$scope: { ctx }
    }
  });
  list = new List({
    props: {
      $$slots: { default: [create_default_slot$b] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      section = element("section");
      create_component(bodytitle.$$.fragment);
      t2 = space();
      create_component(list.$$.fragment);
      attr(section, "class", "svelte-1d8fcdl");
    },
    m(target, anchor) {
      insert(target, section, anchor);
      mount_component(bodytitle, section, null);
      append(section, t2);
      mount_component(list, section, null);
      current = true;
    },
    p(ctx2, dirty) {
      const bodytitle_changes = {};
      if (dirty & /*$$scope, title*/
      130) {
        bodytitle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      bodytitle.$set(bodytitle_changes);
      const list_changes = {};
      if (dirty & /*$$scope, chains*/
      129) {
        list_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list.$set(list_changes);
    },
    i(local) {
      if (current) return;
      transition_in(bodytitle.$$.fragment, local);
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(bodytitle.$$.fragment, local);
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(section);
      }
      destroy_component(bodytitle);
      destroy_component(list);
    }
  };
}
function create_default_slot_1$9(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*title*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*title*/
      2) set_data(
        t2,
        /*title*/
        ctx2[1]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_each_block$5(ctx) {
  let listitem;
  let current;
  function func() {
    return (
      /*func*/
      ctx[3](
        /*chain*/
        ctx[4]
      )
    );
  }
  listitem = new ListItem({
    props: {
      label: (
        /*chain*/
        ctx[4].name
      ),
      onClick: func,
      leadingIcon: "wharf",
      logo: getThemedLogo(
        /*chain*/
        ctx[4]
      )
    }
  });
  return {
    c() {
      create_component(listitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(listitem, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const listitem_changes = {};
      if (dirty & /*chains*/
      1) listitem_changes.label = /*chain*/
      ctx[4].name;
      if (dirty & /*chains*/
      1) listitem_changes.onClick = func;
      if (dirty & /*chains*/
      1) listitem_changes.logo = getThemedLogo(
        /*chain*/
        ctx[4]
      );
      listitem.$set(listitem_changes);
    },
    i(local) {
      if (current) return;
      transition_in(listitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(listitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(listitem, detaching);
    }
  };
}
function create_default_slot$b(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*chains*/
    ctx[0]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$5(get_each_context$5(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*chains, dispatch*/
      5) {
        each_value = ensure_array_like(
          /*chains*/
          ctx2[0]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$5(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$5(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_fragment$s(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*chains*/
    ctx[0] && create_if_block$g(ctx)
  );
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*chains*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*chains*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$g(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function instance$s($$self, $$props, $$invalidate) {
  let { chains } = $$props;
  let { title } = $$props;
  const dispatch2 = createEventDispatcher();
  const func = (chain) => dispatch2("select", chain.id);
  $$self.$$set = ($$props2) => {
    if ("chains" in $$props2) $$invalidate(0, chains = $$props2.chains);
    if ("title" in $$props2) $$invalidate(1, title = $$props2.title);
  };
  return [chains, title, dispatch2, func];
}
class Blockchain extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$s, create_fragment$s, safe_not_equal, { chains: 0, title: 1 }, add_css$j);
  }
}
function add_css$i(target) {
  append_styles(target, "svelte-hwtk1p", ".button.svelte-hwtk1p{--button-height:var(--space-2xl);cursor:pointer;display:flex;justify-content:center;align-items:center;gap:var(--space-2xs);height:var(--button-height);line-height:var(--button-height);text-decoration:none;text-align:center;border-radius:var(--border-radius-inner);font-size:var(--fs-1);font-weight:600;color:var(--button-color, var(--button-text-color));background:var(--button-background, var(--button-primary-background));border:none;box-shadow:var(--button-outline);flex:1}.button.svelte-hwtk1p:hover{background:var(--button-background-hover, var(--button-primary-background-hover));box-shadow:var(--button-outline-hover, var(--button-primary-outline-hover))}.button.svelte-hwtk1p:active{background:var(--button-background-active, var(--button-primary-background-active));box-shadow:var(--button-outline-active);color:var(--button-text-color-active)}.secondary.svelte-hwtk1p{--button-background:var(--button-secondary-background);--button-background-hover:var(--button-secondary-background-hover);--button-background-active:var(--button-secondary-background-active);--button-outline-hover:var(--button-secondary-outline-hover)}.outlined.svelte-hwtk1p{--button-background:transparent;--button-background-hover:transparent;--button-background-active:var(--button-outlined-background-active);--button-outline:var(--button-outlined-outline);--button-outline-hover:var(--button-outlined-outline-hover)}");
}
function create_if_block$f(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({ props: { name: (
    /*icon*/
    ctx[1]
  ) } });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current) return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_fragment$r(ctx) {
  let button;
  let t0;
  let span;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*icon*/
    ctx[1] && create_if_block$f(ctx)
  );
  return {
    c() {
      button = element("button");
      if (if_block) if_block.c();
      t0 = space();
      span = element("span");
      span.textContent = `${/*label*/
      ctx[0]}`;
      attr(button, "class", "button " + /*variant*/
      ctx[3] + " svelte-hwtk1p");
      button.autofocus = /*autofocus*/
      ctx[4];
    },
    m(target, anchor) {
      insert(target, button, anchor);
      if (if_block) if_block.m(button, null);
      append(button, t0);
      append(button, span);
      current = true;
      if (
        /*autofocus*/
        ctx[4]
      ) button.focus();
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*onClick*/
          ctx[2]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (
        /*icon*/
        ctx2[1]
      ) if_block.p(ctx2, dirty);
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      if (if_block) if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function instance$r($$self, $$props, $$invalidate) {
  let { data } = $$props;
  const { label, icon, onClick, variant = "primary", autofocus } = data;
  $$self.$$set = ($$props2) => {
    if ("data" in $$props2) $$invalidate(5, data = $$props2.data);
  };
  return [label, icon, onClick, variant, autofocus, data];
}
class Button extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$r, create_fragment$r, safe_not_equal, { data: 5 }, add_css$i);
  }
}
function add_css$h(target) {
  append_styles(target, "svelte-3b7p6", "input.svelte-3b7p6{box-sizing:border-box;height:var(--space-2xl);border-radius:var(--border-radius-inner);border:1px solid var(--input-border-color);padding-inline:var(--space-m);color:var(--body-text-color);background-color:var(--body-background-color);font-size:var(--fs-1)}input.svelte-3b7p6::placeholder{font-size:var(--fs-1);color:var(--input-placeholder-color);font-style:italic}input.svelte-3b7p6:hover{border:1px solid transparent;outline:2px solid var(--input-border-color-hover);background-color:var(--input-background-focus)}input.svelte-3b7p6:focus-within{border:1px solid transparent;outline:2px solid var(--input-border-color-focus);background-color:var(--input-background-focus)}input.error.svelte-3b7p6{border:1px solid var(--error-color);color:var(--error-color)}input.error.svelte-3b7p6:focus-within{border:1px solid transparent;color:var(--body-text-color)}");
}
function create_fragment$q(ctx) {
  let input;
  let mounted;
  let dispose;
  return {
    c() {
      input = element("input");
      input.autofocus = /*autofocus*/
      ctx[3];
      attr(input, "type", "text");
      attr(
        input,
        "placeholder",
        /*placeholder*/
        ctx[1]
      );
      attr(input, "class", "svelte-3b7p6");
      toggle_class(
        input,
        "error",
        /*error*/
        ctx[4]
      );
    },
    m(target, anchor) {
      insert(target, input, anchor);
      set_input_value(
        input,
        /*value*/
        ctx[0]
      );
      if (
        /*autofocus*/
        ctx[3]
      ) input.focus();
      if (!mounted) {
        dispose = [
          listen(input, "keyup", prevent_default(function() {
            if (is_function(
              /*onKeyup*/
              ctx[2]
            )) ctx[2].apply(this, arguments);
          })),
          listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[5]
          )
        ];
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (dirty & /*autofocus*/
      8) {
        input.autofocus = /*autofocus*/
        ctx[3];
      }
      if (dirty & /*placeholder*/
      2) {
        attr(
          input,
          "placeholder",
          /*placeholder*/
          ctx[1]
        );
      }
      if (dirty & /*value*/
      1 && input.value !== /*value*/
      ctx[0]) {
        set_input_value(
          input,
          /*value*/
          ctx[0]
        );
      }
      if (dirty & /*error*/
      16) {
        toggle_class(
          input,
          "error",
          /*error*/
          ctx[4]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$q($$self, $$props, $$invalidate) {
  let { value } = $$props;
  let { placeholder } = $$props;
  let { onKeyup } = $$props;
  let { autofocus = false } = $$props;
  let { error: error2 = false } = $$props;
  function input_input_handler() {
    value = this.value;
    $$invalidate(0, value);
  }
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2) $$invalidate(0, value = $$props2.value);
    if ("placeholder" in $$props2) $$invalidate(1, placeholder = $$props2.placeholder);
    if ("onKeyup" in $$props2) $$invalidate(2, onKeyup = $$props2.onKeyup);
    if ("autofocus" in $$props2) $$invalidate(3, autofocus = $$props2.autofocus);
    if ("error" in $$props2) $$invalidate(4, error2 = $$props2.error);
  };
  return [value, placeholder, onKeyup, autofocus, error2, input_input_handler];
}
class TextInput extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$q,
      create_fragment$q,
      safe_not_equal,
      {
        value: 0,
        placeholder: 1,
        onKeyup: 2,
        autofocus: 3,
        error: 4
      },
      add_css$h
    );
  }
}
function create_fragment$p(ctx) {
  let message;
  let current;
  message = new Message({
    props: {
      title: (
        /*title*/
        ctx[0]
      ),
      details: (
        /*details*/
        ctx[1]
      ),
      icon: "alert"
    }
  });
  return {
    c() {
      create_component(message.$$.fragment);
    },
    m(target, anchor) {
      mount_component(message, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const message_changes = {};
      if (dirty & /*title*/
      1) message_changes.title = /*title*/
      ctx2[0];
      if (dirty & /*details*/
      2) message_changes.details = /*details*/
      ctx2[1];
      message.$set(message_changes);
    },
    i(local) {
      if (current) return;
      transition_in(message.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(message.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(message, detaching);
    }
  };
}
function instance$p($$self, $$props, $$invalidate) {
  let { title } = $$props;
  let { details } = $$props;
  $$self.$$set = ($$props2) => {
    if ("title" in $$props2) $$invalidate(0, title = $$props2.title);
    if ("details" in $$props2) $$invalidate(1, details = $$props2.details);
  };
  return [title, details];
}
class WarningMessage extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$p, create_fragment$p, safe_not_equal, { title: 0, details: 1 });
  }
}
function add_css$g(target) {
  append_styles(target, "svelte-13p224c", "section.svelte-13p224c{display:flex;flex-direction:column;gap:var(--space-s)}p.loading.svelte-13p224c{margin:0;text-align:center;height:var(--space-4xl)}p.error.svelte-13p224c{margin:0;text-align:center;color:var(--error-color)}.input-group.svelte-13p224c{display:flex;flex-direction:column;gap:var(--space-m);margin-top:var(--space-s)}");
}
function get_each_context$4(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[19] = list[i2];
  return child_ctx;
}
function create_if_block_3$5(ctx) {
  let bodytitle;
  let t0;
  let div;
  let textinput;
  let updating_value;
  let t1;
  let t2;
  let button;
  let current;
  bodytitle = new BodyTitle({
    props: {
      $$slots: { default: [create_default_slot_3$2] },
      $$scope: { ctx }
    }
  });
  function textinput_value_binding(value) {
    ctx[18](value);
  }
  let textinput_props = {
    onKeyup: (
      /*handleKeyup*/
      ctx[13]
    ),
    placeholder: "Account name",
    autofocus: !/*input*/
    ctx[1],
    error: (
      /*accountNotFound*/
      ctx[4] && /*input*/
      ctx[1] === /*prevInput*/
      ctx[2]
    )
  };
  if (
    /*input*/
    ctx[1] !== void 0
  ) {
    textinput_props.value = /*input*/
    ctx[1];
  }
  textinput = new TextInput({ props: textinput_props });
  binding_callbacks.push(() => bind(textinput, "value", textinput_value_binding));
  let if_block = (
    /*accountNotFound*/
    ctx[4] && create_if_block_4$4(ctx)
  );
  button = new Button({
    props: {
      data: {
        variant: "primary",
        onClick: (
          /*lookup*/
          ctx[12]
        ),
        label: (
          /*$t*/
          ctx[8]("login.enter.lookup", { default: "Lookup Account" })
        )
      }
    }
  });
  return {
    c() {
      create_component(bodytitle.$$.fragment);
      t0 = space();
      div = element("div");
      create_component(textinput.$$.fragment);
      t1 = space();
      if (if_block) if_block.c();
      t2 = space();
      create_component(button.$$.fragment);
      attr(div, "class", "input-group svelte-13p224c");
    },
    m(target, anchor) {
      mount_component(bodytitle, target, anchor);
      insert(target, t0, anchor);
      insert(target, div, anchor);
      mount_component(textinput, div, null);
      append(div, t1);
      if (if_block) if_block.m(div, null);
      append(div, t2);
      mount_component(button, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const bodytitle_changes = {};
      if (dirty & /*$$scope, title*/
      4194305) {
        bodytitle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      bodytitle.$set(bodytitle_changes);
      const textinput_changes = {};
      if (dirty & /*input*/
      2) textinput_changes.autofocus = !/*input*/
      ctx2[1];
      if (dirty & /*accountNotFound, input, prevInput*/
      22) textinput_changes.error = /*accountNotFound*/
      ctx2[4] && /*input*/
      ctx2[1] === /*prevInput*/
      ctx2[2];
      if (!updating_value && dirty & /*input*/
      2) {
        updating_value = true;
        textinput_changes.value = /*input*/
        ctx2[1];
        add_flush_callback(() => updating_value = false);
      }
      textinput.$set(textinput_changes);
      if (
        /*accountNotFound*/
        ctx2[4]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_4$4(ctx2);
          if_block.c();
          if_block.m(div, t2);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      const button_changes = {};
      if (dirty & /*$t*/
      256) button_changes.data = {
        variant: "primary",
        onClick: (
          /*lookup*/
          ctx2[12]
        ),
        label: (
          /*$t*/
          ctx2[8]("login.enter.lookup", { default: "Lookup Account" })
        )
      };
      button.$set(button_changes);
    },
    i(local) {
      if (current) return;
      transition_in(bodytitle.$$.fragment, local);
      transition_in(textinput.$$.fragment, local);
      transition_in(button.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(bodytitle.$$.fragment, local);
      transition_out(textinput.$$.fragment, local);
      transition_out(button.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(div);
      }
      destroy_component(bodytitle, detaching);
      destroy_component(textinput);
      if (if_block) if_block.d();
      destroy_component(button);
    }
  };
}
function create_if_block_2$7(ctx) {
  let bodytitle;
  let t_1;
  let warningmessage;
  let current;
  bodytitle = new BodyTitle({
    props: {
      $$slots: { default: [create_default_slot_2$2] },
      $$scope: { ctx }
    }
  });
  warningmessage = new WarningMessage({
    props: {
      title: "",
      details: (
        /*$t*/
        ctx[8]("login.select.no_match", {
          default: "No accounts found matching {{publicKey}}",
          publicKey: (
            /*publicKey*/
            ctx[6]
          )
        })
      )
    }
  });
  return {
    c() {
      create_component(bodytitle.$$.fragment);
      t_1 = space();
      create_component(warningmessage.$$.fragment);
    },
    m(target, anchor) {
      mount_component(bodytitle, target, anchor);
      insert(target, t_1, anchor);
      mount_component(warningmessage, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const bodytitle_changes = {};
      if (dirty & /*$$scope, $t*/
      4194560) {
        bodytitle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      bodytitle.$set(bodytitle_changes);
      const warningmessage_changes = {};
      if (dirty & /*$t, publicKey*/
      320) warningmessage_changes.details = /*$t*/
      ctx2[8]("login.select.no_match", {
        default: "No accounts found matching {{publicKey}}",
        publicKey: (
          /*publicKey*/
          ctx2[6]
        )
      });
      warningmessage.$set(warningmessage_changes);
    },
    i(local) {
      if (current) return;
      transition_in(bodytitle.$$.fragment, local);
      transition_in(warningmessage.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(bodytitle.$$.fragment, local);
      transition_out(warningmessage.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t_1);
      }
      destroy_component(bodytitle, detaching);
      destroy_component(warningmessage, detaching);
    }
  };
}
function create_if_block_1$7(ctx) {
  let bodytitle;
  let t_1;
  let list;
  let current;
  bodytitle = new BodyTitle({
    props: {
      $$slots: { default: [create_default_slot_1$8] },
      $$scope: { ctx }
    }
  });
  list = new List({
    props: {
      $$slots: { default: [create_default_slot$a] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(bodytitle.$$.fragment);
      t_1 = space();
      create_component(list.$$.fragment);
    },
    m(target, anchor) {
      mount_component(bodytitle, target, anchor);
      insert(target, t_1, anchor);
      mount_component(list, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const bodytitle_changes = {};
      if (dirty & /*$$scope, $t*/
      4194560) {
        bodytitle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      bodytitle.$set(bodytitle_changes);
      const list_changes = {};
      if (dirty & /*$$scope, permissions*/
      4194336) {
        list_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list.$set(list_changes);
    },
    i(local) {
      if (current) return;
      transition_in(bodytitle.$$.fragment, local);
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(bodytitle.$$.fragment, local);
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t_1);
      }
      destroy_component(bodytitle, detaching);
      destroy_component(list, detaching);
    }
  };
}
function create_if_block$e(ctx) {
  let p2;
  let t_1_value = (
    /*$t*/
    ctx[8]("loading", { default: "Loading..." }) + ""
  );
  let t_1;
  return {
    c() {
      p2 = element("p");
      t_1 = text(t_1_value);
      attr(p2, "class", "loading svelte-13p224c");
    },
    m(target, anchor) {
      insert(target, p2, anchor);
      append(p2, t_1);
    },
    p(ctx2, dirty) {
      if (dirty & /*$t*/
      256 && t_1_value !== (t_1_value = /*$t*/
      ctx2[8]("loading", { default: "Loading..." }) + "")) set_data(t_1, t_1_value);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(p2);
      }
    }
  };
}
function create_default_slot_3$2(ctx) {
  let t_1;
  return {
    c() {
      t_1 = text(
        /*title*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, t_1, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*title*/
      1) set_data(
        t_1,
        /*title*/
        ctx2[0]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(t_1);
      }
    }
  };
}
function create_if_block_4$4(ctx) {
  let p2;
  let t0_value = (
    /*$t*/
    ctx[8]("login.enter.not_found", { default: "Unable to find account" }) + ""
  );
  let t0;
  let t1;
  let t2;
  return {
    c() {
      p2 = element("p");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(
        /*prevInput*/
        ctx[2]
      );
      attr(p2, "class", "error svelte-13p224c");
    },
    m(target, anchor) {
      insert(target, p2, anchor);
      append(p2, t0);
      append(p2, t1);
      append(p2, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*$t*/
      256 && t0_value !== (t0_value = /*$t*/
      ctx2[8]("login.enter.not_found", { default: "Unable to find account" }) + "")) set_data(t0, t0_value);
      if (dirty & /*prevInput*/
      4) set_data(
        t2,
        /*prevInput*/
        ctx2[2]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(p2);
      }
    }
  };
}
function create_default_slot_2$2(ctx) {
  let t_1_value = (
    /*$t*/
    ctx[8]("login.select.no_accounts") + ""
  );
  let t_1;
  return {
    c() {
      t_1 = text(t_1_value);
    },
    m(target, anchor) {
      insert(target, t_1, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$t*/
      256 && t_1_value !== (t_1_value = /*$t*/
      ctx2[8]("login.select.no_accounts") + "")) set_data(t_1, t_1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t_1);
      }
    }
  };
}
function create_default_slot_1$8(ctx) {
  let t_1_value = (
    /*$t*/
    ctx[8]("login.select.account") + ""
  );
  let t_1;
  return {
    c() {
      t_1 = text(t_1_value);
    },
    m(target, anchor) {
      insert(target, t_1, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$t*/
      256 && t_1_value !== (t_1_value = /*$t*/
      ctx2[8]("login.select.account") + "")) set_data(t_1, t_1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t_1);
      }
    }
  };
}
function create_each_block$4(ctx) {
  let listitem;
  let current;
  function func() {
    return (
      /*func*/
      ctx[17](
        /*permission*/
        ctx[19]
      )
    );
  }
  listitem = new ListItem({
    props: {
      label: String(
        /*permission*/
        ctx[19]
      ),
      onClick: func
    }
  });
  return {
    c() {
      create_component(listitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(listitem, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const listitem_changes = {};
      if (dirty & /*permissions*/
      32) listitem_changes.label = String(
        /*permission*/
        ctx[19]
      );
      if (dirty & /*permissions*/
      32) listitem_changes.onClick = func;
      listitem.$set(listitem_changes);
    },
    i(local) {
      if (current) return;
      transition_in(listitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(listitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(listitem, detaching);
    }
  };
}
function create_default_slot$a(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*permissions*/
    ctx[5]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$4(get_each_context$4(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*String, permissions, dispatch*/
      1056) {
        each_value = ensure_array_like(
          /*permissions*/
          ctx2[5]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$4(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$4(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_fragment$o(ctx) {
  let section;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block$e, create_if_block_1$7, create_if_block_2$7, create_if_block_3$5];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*$busy*/
      ctx2[7]
    ) return 0;
    if (
      /*permissions*/
      ctx2[5] && /*permissions*/
      ctx2[5].length > 0
    ) return 1;
    if (
      /*publicKey*/
      ctx2[6]
    ) return 2;
    if (!/*accountName*/
    ctx2[3]) return 3;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      section = element("section");
      if (if_block) if_block.c();
      attr(section, "class", "svelte-13p224c");
    },
    m(target, anchor) {
      insert(target, section, anchor);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(section, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(section, null);
        } else {
          if_block = null;
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(section);
      }
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
    }
  };
}
function instance$o($$self, $$props, $$invalidate) {
  let $busy;
  let $t;
  const { t: t2 } = getContext("i18n");
  component_subscribe($$self, t2, (value) => $$invalidate(8, $t = value));
  let { chainId } = $$props;
  let { client } = $$props;
  let { walletPlugin } = $$props;
  let { title } = $$props;
  const dispatch2 = createEventDispatcher();
  let busy = writable(true);
  component_subscribe($$self, busy, (value) => $$invalidate(7, $busy = value));
  let input = "";
  let prevInput = "";
  let accountName;
  let accountNotFound = false;
  let permissions;
  let publicKey = walletPlugin.metadata.publicKey;
  onMount(async () => {
    if (walletPlugin.config.requiresPermissionSelect) {
      if (chainId && walletPlugin.retrievePublicKey) {
        try {
          $$invalidate(6, publicKey = String(await walletPlugin.retrievePublicKey(chainId)));
        } catch (error2) {
          errorDetails.set(String(error2));
          throw error2;
        }
      }
      const response = await client.call({
        path: "/v1/chain/get_accounts_by_authorizers",
        params: { keys: [publicKey] }
      });
      busy.set(false);
      $$invalidate(5, permissions = response.accounts.map((account) => PermissionLevel.from(`${account.account_name}@${account.permission_name}`)));
    } else if (walletPlugin.config.requiresPermissionEntry) {
      busy.set(false);
      $$invalidate(5, permissions = []);
    }
  });
  async function lookup2() {
    busy.set(true);
    try {
      const response = await client.v1.chain.get_account(input);
      if (response.account_name.equals(input)) {
        $$invalidate(3, accountName = response.account_name);
        $$invalidate(5, permissions = response.permissions.map((permission) => PermissionLevel.from(`${response.account_name}@${permission.perm_name}`)));
      }
      $$invalidate(4, accountNotFound = false);
    } catch (error2) {
      $$invalidate(4, accountNotFound = true);
    } finally {
      $$invalidate(2, prevInput = input);
      busy.set(false);
    }
  }
  function handleKeyup(event) {
    if (event.code == "Enter") {
      event.preventDefault();
      lookup2();
      return false;
    }
  }
  const func = (permission) => dispatch2("select", permission);
  function textinput_value_binding(value) {
    input = value;
    $$invalidate(1, input);
  }
  $$self.$$set = ($$props2) => {
    if ("chainId" in $$props2) $$invalidate(14, chainId = $$props2.chainId);
    if ("client" in $$props2) $$invalidate(15, client = $$props2.client);
    if ("walletPlugin" in $$props2) $$invalidate(16, walletPlugin = $$props2.walletPlugin);
    if ("title" in $$props2) $$invalidate(0, title = $$props2.title);
  };
  return [
    title,
    input,
    prevInput,
    accountName,
    accountNotFound,
    permissions,
    publicKey,
    $busy,
    $t,
    t2,
    dispatch2,
    busy,
    lookup2,
    handleKeyup,
    chainId,
    client,
    walletPlugin,
    func,
    textinput_value_binding
  ];
}
class Permission extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$o,
      create_fragment$o,
      safe_not_equal,
      {
        chainId: 14,
        client: 15,
        walletPlugin: 16,
        title: 0
      },
      add_css$g
    );
  }
}
function add_css$f(target) {
  append_styles(target, "svelte-lwrp5l", "section.svelte-lwrp5l{display:flex;flex-direction:column;gap:var(--space-s)}");
}
function get_each_context$3(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[4] = list[i2];
  child_ctx[6] = i2;
  return child_ctx;
}
function create_if_block$d(ctx) {
  let section;
  let bodytitle;
  let t2;
  let list;
  let current;
  bodytitle = new BodyTitle({
    props: {
      $$slots: { default: [create_default_slot_1$7] },
      $$scope: { ctx }
    }
  });
  list = new List({
    props: {
      $$slots: { default: [create_default_slot$9] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      section = element("section");
      create_component(bodytitle.$$.fragment);
      t2 = space();
      create_component(list.$$.fragment);
      attr(section, "class", "svelte-lwrp5l");
    },
    m(target, anchor) {
      insert(target, section, anchor);
      mount_component(bodytitle, section, null);
      append(section, t2);
      mount_component(list, section, null);
      current = true;
    },
    p(ctx2, dirty) {
      const bodytitle_changes = {};
      if (dirty & /*$$scope, title*/
      130) {
        bodytitle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      bodytitle.$set(bodytitle_changes);
      const list_changes = {};
      if (dirty & /*$$scope, wallets*/
      129) {
        list_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list.$set(list_changes);
    },
    i(local) {
      if (current) return;
      transition_in(bodytitle.$$.fragment, local);
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(bodytitle.$$.fragment, local);
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(section);
      }
      destroy_component(bodytitle);
      destroy_component(list);
    }
  };
}
function create_default_slot_1$7(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*title*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*title*/
      2) set_data(
        t2,
        /*title*/
        ctx2[1]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_each_block$3(ctx) {
  let listitem;
  let current;
  function func() {
    return (
      /*func*/
      ctx[3](
        /*index*/
        ctx[6]
      )
    );
  }
  listitem = new ListItem({
    props: {
      label: (
        /*wallet*/
        ctx[4].metadata.name
      ),
      onClick: func,
      leadingIcon: "wallet",
      logo: getThemedLogo(
        /*wallet*/
        ctx[4].metadata
      )
    }
  });
  return {
    c() {
      create_component(listitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(listitem, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const listitem_changes = {};
      if (dirty & /*wallets*/
      1) listitem_changes.label = /*wallet*/
      ctx[4].metadata.name;
      if (dirty & /*wallets*/
      1) listitem_changes.logo = getThemedLogo(
        /*wallet*/
        ctx[4].metadata
      );
      listitem.$set(listitem_changes);
    },
    i(local) {
      if (current) return;
      transition_in(listitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(listitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(listitem, detaching);
    }
  };
}
function create_default_slot$9(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*wallets*/
    ctx[0]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$3(get_each_context$3(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*wallets, dispatch*/
      5) {
        each_value = ensure_array_like(
          /*wallets*/
          ctx2[0]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$3(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$3(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_fragment$n(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*wallets*/
    ctx[0] && create_if_block$d(ctx)
  );
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*wallets*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*wallets*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$d(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function instance$n($$self, $$props, $$invalidate) {
  let { wallets } = $$props;
  let { title } = $$props;
  const dispatch2 = createEventDispatcher();
  const func = (index) => dispatch2("select", index);
  $$self.$$set = ($$props2) => {
    if ("wallets" in $$props2) $$invalidate(0, wallets = $$props2.wallets);
    if ("title" in $$props2) $$invalidate(1, title = $$props2.title);
  };
  return [wallets, title, dispatch2, func];
}
class Wallet extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$n, create_fragment$n, safe_not_equal, { wallets: 0, title: 1 }, add_css$f);
  }
}
function is_date(obj) {
  return Object.prototype.toString.call(obj) === "[object Date]";
}
function cubicInOut(t2) {
  return t2 < 0.5 ? 4 * t2 * t2 * t2 : 0.5 * Math.pow(2 * t2 - 2, 3) + 1;
}
function cubicOut(t2) {
  const f2 = t2 - 1;
  return f2 * f2 * f2 + 1;
}
function get_interpolator(a, b) {
  if (a === b || a !== a) return () => a;
  const type = typeof a;
  if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {
    throw new Error("Cannot interpolate values of different type");
  }
  if (Array.isArray(a)) {
    const arr = b.map((bi, i2) => {
      return get_interpolator(a[i2], bi);
    });
    return (t2) => arr.map((fn) => fn(t2));
  }
  if (type === "object") {
    if (!a || !b) throw new Error("Object cannot be null");
    if (is_date(a) && is_date(b)) {
      a = a.getTime();
      b = b.getTime();
      const delta = b - a;
      return (t2) => new Date(a + t2 * delta);
    }
    const keys = Object.keys(b);
    const interpolators = {};
    keys.forEach((key2) => {
      interpolators[key2] = get_interpolator(a[key2], b[key2]);
    });
    return (t2) => {
      const result = {};
      keys.forEach((key2) => {
        result[key2] = interpolators[key2](t2);
      });
      return result;
    };
  }
  if (type === "number") {
    const delta = b - a;
    return (t2) => a + t2 * delta;
  }
  throw new Error(`Cannot interpolate ${type} values`);
}
function tweened(value, defaults = {}) {
  const store = writable(value);
  let task;
  let target_value = value;
  function set(new_value, opts) {
    if (value == null) {
      store.set(value = new_value);
      return Promise.resolve();
    }
    target_value = new_value;
    let previous_task = task;
    let started = false;
    let {
      delay = 0,
      duration = 400,
      easing = identity,
      interpolate = get_interpolator
    } = assign(assign({}, defaults), opts);
    if (duration === 0) {
      if (previous_task) {
        previous_task.abort();
        previous_task = null;
      }
      store.set(value = target_value);
      return Promise.resolve();
    }
    const start = now() + delay;
    let fn;
    task = loop((now2) => {
      if (now2 < start) return true;
      if (!started) {
        fn = interpolate(value, new_value);
        if (typeof duration === "function") duration = duration(value, new_value);
        started = true;
      }
      if (previous_task) {
        previous_task.abort();
        previous_task = null;
      }
      const elapsed = now2 - start;
      if (elapsed > /** @type {number} */
      duration) {
        store.set(value = new_value);
        return false;
      }
      store.set(value = fn(easing(elapsed / duration)));
      return true;
    });
    return task.promise;
  }
  return {
    set,
    update: (fn, opts) => set(fn(target_value, value), opts),
    subscribe: store.subscribe
  };
}
function add_css$e(target) {
  append_styles(target, "svelte-1cxfvrd", '.loader.svelte-1cxfvrd.svelte-1cxfvrd{position:relative;display:grid;place-items:center;grid-template-areas:"stack" "text";gap:var(--space-m)}.logo.svelte-1cxfvrd.svelte-1cxfvrd{grid-area:stack;place-self:center;color:var(--body-text-color);width:var(--space-2xl);display:flex;align-items:center;justify-content:center}.logo.svelte-1cxfvrd img.svelte-1cxfvrd{width:100%;height:100%;object-fit:contain}.logo.svelte-1cxfvrd>svg{width:35%;height:35%}.text.svelte-1cxfvrd.svelte-1cxfvrd{grid-area:text;display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;gap:var(--space-4xs)}.text.svelte-1cxfvrd .label.svelte-1cxfvrd{font-size:var(--fs-2);font-weight:500;color:var(--body-text-color);margin:0}.text.svelte-1cxfvrd span.svelte-1cxfvrd{font-size:var(--fs-1);font-variant-numeric:tabular-nums;color:var(--body-text-color-variant)}svg.svelte-1cxfvrd.svelte-1cxfvrd{grid-area:stack;animation:2.5s linear infinite svelte-1cxfvrd-svg-animation}@keyframes svelte-1cxfvrd-svg-animation{0%{transform:rotateZ(0deg)}100%{transform:rotateZ(360deg)}}circle.svelte-1cxfvrd.svelte-1cxfvrd{transform-origin:center}circle.spinner.svelte-1cxfvrd.svelte-1cxfvrd{stroke:var(--loading-circle-color)}circle.track.svelte-1cxfvrd.svelte-1cxfvrd{stroke:var(--loading-circle-track-color)}circle.animated.svelte-1cxfvrd.svelte-1cxfvrd{animation:svelte-1cxfvrd-dash 2.1s ease-in-out both infinite}@keyframes svelte-1cxfvrd-dash{0%{stroke-dashoffset:var(--circumference);transform:rotate(0)}50%,65%{stroke-dashoffset:70;transform:rotate(90deg)}100%{stroke-dashoffset:var(--circumference);transform:rotate(360deg)}}');
}
function create_if_block_2$6(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block_3$4, create_if_block_4$3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (isUrlImage(
      /*logo*/
      ctx2[5]
    ) || isBase64Image(
      /*logo*/
      ctx2[5]
    )) return 0;
    if (isValidIcon(
      /*logo*/
      ctx2[5]
    )) return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      div = element("div");
      if (if_block) if_block.c();
      attr(div, "class", "logo svelte-1cxfvrd");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (if_block) if_block.p(ctx2, dirty);
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
    }
  };
}
function create_if_block_4$3(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: { name: (
      /*logo*/
      ctx[5]
    ), size: "75%" }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current) return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_3$4(ctx) {
  let img;
  let img_src_value;
  return {
    c() {
      img = element("img");
      if (!src_url_equal(img.src, img_src_value = /*logo*/
      ctx[5])) attr(img, "src", img_src_value);
      attr(img, "alt", `loading logo`);
      attr(img, "class", "svelte-1cxfvrd");
    },
    m(target, anchor) {
      insert(target, img, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_if_block_1$6(ctx) {
  let p2;
  return {
    c() {
      p2 = element("p");
      p2.textContent = `${/*label*/
      ctx[4]}`;
      attr(p2, "class", "label svelte-1cxfvrd");
    },
    m(target, anchor) {
      insert(target, p2, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(p2);
      }
    }
  };
}
function create_if_block$c(ctx) {
  let previous_key = (
    /*remaining*/
    ctx[1]
  );
  let key_block_anchor;
  let key_block = create_key_block(ctx);
  return {
    c() {
      key_block.c();
      key_block_anchor = empty();
    },
    m(target, anchor) {
      key_block.m(target, anchor);
      insert(target, key_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*remaining*/
      2 && safe_not_equal(previous_key, previous_key = /*remaining*/
      ctx2[1])) {
        key_block.d(1);
        key_block = create_key_block(ctx2);
        key_block.c();
        key_block.m(key_block_anchor.parentNode, key_block_anchor);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(key_block_anchor);
      }
      key_block.d(detaching);
    }
  };
}
function create_key_block(ctx) {
  let span;
  let t_value = countdownFormat(
    /*deadline*/
    ctx[0]
  ) + "";
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(t_value);
      attr(span, "class", "svelte-1cxfvrd");
      toggle_class(span, "label", !/*label*/
      ctx[4]);
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*deadline*/
      1 && t_value !== (t_value = countdownFormat(
        /*deadline*/
        ctx2[0]
      ) + "")) set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$m(ctx) {
  let div1;
  let svg;
  let circle0;
  let circle1;
  let t0;
  let t1;
  let div0;
  let t2;
  let current;
  let if_block0 = (
    /*logo*/
    ctx[5] && create_if_block_2$6(ctx)
  );
  let if_block1 = (
    /*label*/
    ctx[4] && create_if_block_1$6(ctx)
  );
  let if_block2 = (
    /*deadline*/
    ctx[0] && create_if_block$c(ctx)
  );
  return {
    c() {
      div1 = element("div");
      svg = svg_element("svg");
      circle0 = svg_element("circle");
      circle1 = svg_element("circle");
      t0 = space();
      if (if_block0) if_block0.c();
      t1 = space();
      div0 = element("div");
      if (if_block1) if_block1.c();
      t2 = space();
      if (if_block2) if_block2.c();
      attr(circle0, "class", "track svelte-1cxfvrd");
      attr(
        circle0,
        "cx",
        /*offset*/
        ctx[6]
      );
      attr(
        circle0,
        "cy",
        /*offset*/
        ctx[6]
      );
      attr(
        circle0,
        "r",
        /*radius*/
        ctx[7]
      );
      attr(circle0, "stroke-width", strokeWidth - 1);
      attr(circle0, "stroke-linecap", "round");
      attr(
        circle0,
        "stroke-dasharray",
        /*$circumference*/
        ctx[3]
      );
      attr(circle0, "stroke-dashoffset", 0);
      attr(circle0, "fill", "none");
      attr(circle1, "class", "spinner svelte-1cxfvrd");
      attr(
        circle1,
        "cx",
        /*offset*/
        ctx[6]
      );
      attr(
        circle1,
        "cy",
        /*offset*/
        ctx[6]
      );
      attr(
        circle1,
        "r",
        /*radius*/
        ctx[7]
      );
      attr(circle1, "stroke-width", strokeWidth);
      attr(circle1, "stroke-linecap", "round");
      attr(
        circle1,
        "stroke-dasharray",
        /*$circumference*/
        ctx[3]
      );
      attr(circle1, "fill", "none");
      set_style(
        circle1,
        "--radius",
        /*radius*/
        ctx[7]
      );
      set_style(
        circle1,
        "--circumference",
        /*$circumference*/
        ctx[3]
      );
      toggle_class(
        circle1,
        "animated",
        /*animated*/
        ctx[2]
      );
      attr(svg, "width", size);
      attr(svg, "height", size);
      attr(svg, "class", "svelte-1cxfvrd");
      toggle_class(
        svg,
        "animated",
        /*animated*/
        ctx[2]
      );
      attr(div0, "class", "text svelte-1cxfvrd");
      attr(div1, "class", "loader svelte-1cxfvrd");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, svg);
      append(svg, circle0);
      append(svg, circle1);
      append(div1, t0);
      if (if_block0) if_block0.m(div1, null);
      append(div1, t1);
      append(div1, div0);
      if (if_block1) if_block1.m(div0, null);
      append(div0, t2);
      if (if_block2) if_block2.m(div0, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*$circumference*/
      8) {
        attr(
          circle0,
          "stroke-dasharray",
          /*$circumference*/
          ctx2[3]
        );
      }
      if (!current || dirty & /*$circumference*/
      8) {
        attr(
          circle1,
          "stroke-dasharray",
          /*$circumference*/
          ctx2[3]
        );
      }
      if (!current || dirty & /*$circumference*/
      8) {
        set_style(
          circle1,
          "--circumference",
          /*$circumference*/
          ctx2[3]
        );
      }
      if (!current || dirty & /*animated*/
      4) {
        toggle_class(
          circle1,
          "animated",
          /*animated*/
          ctx2[2]
        );
      }
      if (!current || dirty & /*animated*/
      4) {
        toggle_class(
          svg,
          "animated",
          /*animated*/
          ctx2[2]
        );
      }
      if (
        /*logo*/
        ctx2[5]
      ) if_block0.p(ctx2, dirty);
      if (
        /*label*/
        ctx2[4]
      ) if_block1.p(ctx2, dirty);
      if (
        /*deadline*/
        ctx2[0]
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
        } else {
          if_block2 = create_if_block$c(ctx2);
          if_block2.c();
          if_block2.m(div0, null);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block0);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (if_block0) if_block0.d();
      if (if_block1) if_block1.d();
      if (if_block2) if_block2.d();
    }
  };
}
let size = 100;
let strokeWidth = 8;
function countdownFormat(date) {
  const timeLeft = date.getTime() - Date.now();
  if (timeLeft > 0) {
    return new Date(timeLeft).toISOString().slice(14, 19);
  }
  return "00:00";
}
function instance$m($$self, $$props, $$invalidate) {
  let animated;
  let $circumference;
  let { data = {} } = $$props;
  let { label, end, logo, loading: loading2 = true } = data;
  let deadline;
  let remaining;
  let timer;
  let offset = size / 2;
  let radius = offset - strokeWidth;
  let circumference = tweened(2 * Math.PI * radius, { duration: 500, easing: cubicOut });
  component_subscribe($$self, circumference, (value) => $$invalidate(3, $circumference = value));
  onDestroy(() => {
    if (timer) {
      clearInterval(timer);
    }
  });
  $$self.$$set = ($$props2) => {
    if ("data" in $$props2) $$invalidate(9, data = $$props2.data);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*timer, deadline, remaining*/
    2051) {
      {
        if (timer) {
          clearInterval(timer);
        }
        if (end) {
          $$invalidate(0, deadline = new Date(end));
          $$invalidate(11, timer = setInterval(
            () => {
              $$invalidate(1, remaining = new Date(deadline).getTime() - Date.now());
              if (remaining <= 0) {
                clearInterval(timer);
                circumference.set(1e3);
                $$invalidate(10, loading2 = false);
              }
            },
            200
          ));
        }
      }
    }
    if ($$self.$$.dirty & /*loading*/
    1024) {
      $$invalidate(2, animated = loading2);
    }
  };
  return [
    deadline,
    remaining,
    animated,
    $circumference,
    label,
    logo,
    offset,
    radius,
    circumference,
    data,
    loading2,
    timer
  ];
}
class Countdown extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$m, create_fragment$m, safe_not_equal, { data: 9 }, add_css$e);
  }
}
function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
  const o = +getComputedStyle(node).opacity;
  return {
    delay,
    duration,
    easing,
    css: (t2) => `opacity: ${t2 * o}`
  };
}
function fly(node, { delay = 0, duration = 400, easing = cubicOut, x: x2 = 0, y = 0, opacity = 0 } = {}) {
  const style = getComputedStyle(node);
  const target_opacity = +style.opacity;
  const transform = style.transform === "none" ? "" : style.transform;
  const od = target_opacity * (1 - opacity);
  const [xValue, xUnit] = split_css_unit(x2);
  const [yValue, yUnit] = split_css_unit(y);
  return {
    delay,
    duration,
    easing,
    css: (t2, u2) => `
			transform: ${transform} translate(${(1 - t2) * xValue}${xUnit}, ${(1 - t2) * yValue}${yUnit});
			opacity: ${target_opacity - od * u2}`
  };
}
function create_else_block$4(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[5].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    null
  );
  return {
    c() {
      if (default_slot) default_slot.c();
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function create_if_block$b(ctx) {
  let div;
  let div_intro;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[5].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "class", "transition");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx,
            /*$$scope*/
            ctx[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx[4]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx[4],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      if (!div_intro) {
        add_render_callback(() => {
          div_intro = create_in_transition(div, fly, {
            duration: 200,
            x: (
              /*x*/
              ctx[1]
            ),
            y: (
              /*y*/
              ctx[0]
            )
          });
          div_intro.start();
        });
      }
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function create_fragment$l(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$b, create_else_block$4];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*animations*/
      ctx2[2]
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if_block.p(ctx2, dirty);
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$l($$self, $$props, $$invalidate) {
  let x2;
  let y;
  let $settings;
  component_subscribe($$self, settings$5, ($$value) => $$invalidate(6, $settings = $$value));
  let { $$slots: slots = {}, $$scope } = $$props;
  let { direction = void 0 } = $$props;
  const { animations } = $settings;
  const horizontal = ["ltr", "rtl"];
  const getDistance = (direction2) => {
    return direction2 === "rtl" || direction2 === "btt" ? 100 : -100;
  };
  $$self.$$set = ($$props2) => {
    if ("direction" in $$props2) $$invalidate(3, direction = $$props2.direction);
    if ("$$scope" in $$props2) $$invalidate(4, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*direction*/
    8) {
      $$invalidate(
        1,
        [x2, y] = direction ? horizontal.includes(direction) ? [getDistance(direction), 0] : [0, getDistance(direction)] : [0, 0],
        x2,
        ($$invalidate(0, y), $$invalidate(3, direction))
      );
    }
  };
  return [y, x2, animations, direction, $$scope, slots];
}
class Transition extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$l, create_fragment$l, safe_not_equal, { direction: 3 });
  }
}
function create_else_block_1$2(ctx) {
  let p2;
  let t_1_value = (
    /*$t*/
    ctx[4]("loading", { default: "Loading..." }) + ""
  );
  let t_1;
  return {
    c() {
      p2 = element("p");
      t_1 = text(t_1_value);
    },
    m(target, anchor) {
      insert(target, p2, anchor);
      append(p2, t_1);
    },
    p(ctx2, dirty) {
      if (dirty & /*$t*/
      16 && t_1_value !== (t_1_value = /*$t*/
      ctx2[4]("loading", { default: "Loading..." }) + "")) set_data(t_1, t_1_value);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(p2);
      }
    }
  };
}
function create_if_block$a(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [
    create_if_block_1$5,
    create_if_block_2$5,
    create_if_block_3$3,
    create_if_block_4$2,
    create_else_block$3
  ];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*$step*/
      ctx2[6] === /*Steps*/
      ctx2[0].selectWallet
    ) return 0;
    if (
      /*$step*/
      ctx2[6] === /*Steps*/
      ctx2[0].selectChain && /*$chains*/
      ctx2[7]
    ) return 1;
    if (
      /*$step*/
      ctx2[6] === /*Steps*/
      ctx2[0].enterPermission && /*$client*/
      ctx2[8] && /*$walletPlugin*/
      ctx2[9]
    ) return 2;
    if (
      /*$step*/
      ctx2[6] === /*Steps*/
      ctx2[0].selectPermission && /*$client*/
      ctx2[8] && /*$walletPlugin*/
      ctx2[9]
    ) return 3;
    return 4;
  }
  current_block_type_index = select_block_type_1(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block$3(ctx) {
  let countdown;
  let current;
  countdown = new Countdown({
    props: {
      data: {
        label: (
          /*$t*/
          ctx[4]("login.complete", {
            default: "Complete the login using your selected wallet."
          })
        )
      }
    }
  });
  return {
    c() {
      create_component(countdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(countdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const countdown_changes = {};
      if (dirty & /*$t*/
      16) countdown_changes.data = {
        label: (
          /*$t*/
          ctx2[4]("login.complete", {
            default: "Complete the login using your selected wallet."
          })
        )
      };
      countdown.$set(countdown_changes);
    },
    i(local) {
      if (current) return;
      transition_in(countdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(countdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(countdown, detaching);
    }
  };
}
function create_if_block_4$2(ctx) {
  let transition;
  let current;
  transition = new Transition({
    props: {
      direction: (
        /*$transitionDirection*/
        ctx[2]
      ),
      $$slots: { default: [create_default_slot_3$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(transition.$$.fragment);
    },
    m(target, anchor) {
      mount_component(transition, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const transition_changes = {};
      if (dirty & /*$transitionDirection*/
      4) transition_changes.direction = /*$transitionDirection*/
      ctx2[2];
      if (dirty & /*$$scope, $loginResponse, $client, $walletPlugin, $t*/
      268436242) {
        transition_changes.$$scope = { dirty, ctx: ctx2 };
      }
      transition.$set(transition_changes);
    },
    i(local) {
      if (current) return;
      transition_in(transition.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(transition.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(transition, detaching);
    }
  };
}
function create_if_block_3$3(ctx) {
  let transition;
  let current;
  transition = new Transition({
    props: {
      direction: (
        /*$transitionDirection*/
        ctx[2]
      ),
      $$slots: { default: [create_default_slot_2$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(transition.$$.fragment);
    },
    m(target, anchor) {
      mount_component(transition, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const transition_changes = {};
      if (dirty & /*$transitionDirection*/
      4) transition_changes.direction = /*$transitionDirection*/
      ctx2[2];
      if (dirty & /*$$scope, $loginResponse, $client, $walletPlugin, $t*/
      268436242) {
        transition_changes.$$scope = { dirty, ctx: ctx2 };
      }
      transition.$set(transition_changes);
    },
    i(local) {
      if (current) return;
      transition_in(transition.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(transition.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(transition, detaching);
    }
  };
}
function create_if_block_2$5(ctx) {
  let transition;
  let current;
  transition = new Transition({
    props: {
      direction: (
        /*$transitionDirection*/
        ctx[2]
      ),
      $$slots: { default: [create_default_slot_1$6] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(transition.$$.fragment);
    },
    m(target, anchor) {
      mount_component(transition, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const transition_changes = {};
      if (dirty & /*$transitionDirection*/
      4) transition_changes.direction = /*$transitionDirection*/
      ctx2[2];
      if (dirty & /*$$scope, $chains, $t*/
      268435600) {
        transition_changes.$$scope = { dirty, ctx: ctx2 };
      }
      transition.$set(transition_changes);
    },
    i(local) {
      if (current) return;
      transition_in(transition.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(transition.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(transition, detaching);
    }
  };
}
function create_if_block_1$5(ctx) {
  let transition;
  let current;
  transition = new Transition({
    props: {
      direction: (
        /*$transitionDirection*/
        ctx[2]
      ),
      $$slots: { default: [create_default_slot$8] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(transition.$$.fragment);
    },
    m(target, anchor) {
      mount_component(transition, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const transition_changes = {};
      if (dirty & /*$transitionDirection*/
      4) transition_changes.direction = /*$transitionDirection*/
      ctx2[2];
      if (dirty & /*$$scope, $loginContext, $t*/
      268435480) {
        transition_changes.$$scope = { dirty, ctx: ctx2 };
      }
      transition.$set(transition_changes);
    },
    i(local) {
      if (current) return;
      transition_in(transition.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(transition.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(transition, detaching);
    }
  };
}
function create_default_slot_3$1(ctx) {
  let permission;
  let current;
  permission = new Permission({
    props: {
      chainId: (
        /*$loginResponse*/
        ctx[1].chainId
      ),
      client: (
        /*$client*/
        ctx[8]
      ),
      walletPlugin: (
        /*$walletPlugin*/
        ctx[9]
      ),
      title: (
        /*$t*/
        ctx[4]("login.select.account", { default: "Select an Account" })
      )
    }
  });
  permission.$on(
    "select",
    /*selectPermission*/
    ctx[17]
  );
  permission.$on(
    "cancel",
    /*unselectChain*/
    ctx[16]
  );
  return {
    c() {
      create_component(permission.$$.fragment);
    },
    m(target, anchor) {
      mount_component(permission, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const permission_changes = {};
      if (dirty & /*$loginResponse*/
      2) permission_changes.chainId = /*$loginResponse*/
      ctx2[1].chainId;
      if (dirty & /*$client*/
      256) permission_changes.client = /*$client*/
      ctx2[8];
      if (dirty & /*$walletPlugin*/
      512) permission_changes.walletPlugin = /*$walletPlugin*/
      ctx2[9];
      if (dirty & /*$t*/
      16) permission_changes.title = /*$t*/
      ctx2[4]("login.select.account", { default: "Select an Account" });
      permission.$set(permission_changes);
    },
    i(local) {
      if (current) return;
      transition_in(permission.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(permission.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(permission, detaching);
    }
  };
}
function create_default_slot_2$1(ctx) {
  let permission;
  let current;
  permission = new Permission({
    props: {
      chainId: (
        /*$loginResponse*/
        ctx[1].chainId
      ),
      client: (
        /*$client*/
        ctx[8]
      ),
      walletPlugin: (
        /*$walletPlugin*/
        ctx[9]
      ),
      title: (
        /*$t*/
        ctx[4]("login.enter.account", { default: "Enter account name" })
      )
    }
  });
  permission.$on(
    "select",
    /*selectPermission*/
    ctx[17]
  );
  permission.$on(
    "cancel",
    /*unselectChain*/
    ctx[16]
  );
  return {
    c() {
      create_component(permission.$$.fragment);
    },
    m(target, anchor) {
      mount_component(permission, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const permission_changes = {};
      if (dirty & /*$loginResponse*/
      2) permission_changes.chainId = /*$loginResponse*/
      ctx2[1].chainId;
      if (dirty & /*$client*/
      256) permission_changes.client = /*$client*/
      ctx2[8];
      if (dirty & /*$walletPlugin*/
      512) permission_changes.walletPlugin = /*$walletPlugin*/
      ctx2[9];
      if (dirty & /*$t*/
      16) permission_changes.title = /*$t*/
      ctx2[4]("login.enter.account", { default: "Enter account name" });
      permission.$set(permission_changes);
    },
    i(local) {
      if (current) return;
      transition_in(permission.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(permission.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(permission, detaching);
    }
  };
}
function create_default_slot_1$6(ctx) {
  let blockchain;
  let current;
  blockchain = new Blockchain({
    props: {
      chains: (
        /*$chains*/
        ctx[7]
      ),
      title: (
        /*$t*/
        ctx[4]("login.select.blockchain", { default: "Select a Blockchain" })
      )
    }
  });
  blockchain.$on(
    "select",
    /*selectChain*/
    ctx[15]
  );
  blockchain.$on(
    "cancel",
    /*unselectWallet*/
    ctx[19]
  );
  return {
    c() {
      create_component(blockchain.$$.fragment);
    },
    m(target, anchor) {
      mount_component(blockchain, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const blockchain_changes = {};
      if (dirty & /*$chains*/
      128) blockchain_changes.chains = /*$chains*/
      ctx2[7];
      if (dirty & /*$t*/
      16) blockchain_changes.title = /*$t*/
      ctx2[4]("login.select.blockchain", { default: "Select a Blockchain" });
      blockchain.$set(blockchain_changes);
    },
    i(local) {
      if (current) return;
      transition_in(blockchain.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(blockchain.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(blockchain, detaching);
    }
  };
}
function create_default_slot$8(ctx) {
  let wallet;
  let current;
  wallet = new Wallet({
    props: {
      wallets: (
        /*$loginContext*/
        ctx[3].walletPlugins
      ),
      title: (
        /*$t*/
        ctx[4]("login.select.wallet", { default: "Select a Wallet" })
      )
    }
  });
  wallet.$on(
    "select",
    /*selectWallet*/
    ctx[18]
  );
  wallet.$on(
    "cancel",
    /*cancel*/
    ctx[20]
  );
  return {
    c() {
      create_component(wallet.$$.fragment);
    },
    m(target, anchor) {
      mount_component(wallet, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const wallet_changes = {};
      if (dirty & /*$loginContext*/
      8) wallet_changes.wallets = /*$loginContext*/
      ctx2[3].walletPlugins;
      if (dirty & /*$t*/
      16) wallet_changes.title = /*$t*/
      ctx2[4]("login.select.wallet", { default: "Select a Wallet" });
      wallet.$set(wallet_changes);
    },
    i(local) {
      if (current) return;
      transition_in(wallet.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(wallet.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(wallet, detaching);
    }
  };
}
function create_fragment$k(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$a, create_else_block_1$2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*$props*/
      ctx2[5] && /*$loginContext*/
      ctx2[3]
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$k($$self, $$props, $$invalidate) {
  let $loginResponse;
  let $transitionDirection;
  let $backAction;
  let $loginContext;
  let $t;
  let $props;
  let $step;
  let $chains;
  let $client;
  let $walletPlugin;
  component_subscribe($$self, loginResponse, ($$value) => $$invalidate(1, $loginResponse = $$value));
  component_subscribe($$self, transitionDirection, ($$value) => $$invalidate(2, $transitionDirection = $$value));
  component_subscribe($$self, backAction, ($$value) => $$invalidate(22, $backAction = $$value));
  component_subscribe($$self, loginContext, ($$value) => $$invalidate(3, $loginContext = $$value));
  component_subscribe($$self, props, ($$value) => $$invalidate(5, $props = $$value));
  const { t: t2 } = getContext("i18n");
  component_subscribe($$self, t2, (value) => $$invalidate(4, $t = value));
  let completed = false;
  const dispatch2 = createEventDispatcher();
  var Steps;
  (function(Steps2) {
    Steps2["done"] = "done";
    Steps2["enterPermission"] = "enterPermission";
    Steps2["selectChain"] = "selectChain";
    Steps2["selectPermission"] = "selectPermission";
    Steps2["selectWallet"] = "selectWallet";
  })(Steps || (Steps = {}));
  const chain = derived([loginContext, loginResponse], ([$currentContext, $currentResponse]) => {
    if (!$currentContext || $currentResponse.chainId === void 0) {
      return void 0;
    }
    if ($currentContext.chain) {
      return $currentContext.chain;
    }
    return $currentContext.chains.find((c2) => c2.id === $currentResponse.chainId);
  });
  const client = derived([chain, loginContext], ([$currentChain, $currentContext]) => {
    if (!$currentContext || $currentChain === void 0) {
      return void 0;
    }
    return $currentContext.getClient($currentChain);
  });
  component_subscribe($$self, client, (value) => $$invalidate(8, $client = value));
  const walletPlugin = derived([loginContext, loginResponse], ([$currentContext, $currentResponse]) => {
    if (!$currentContext || $currentResponse.walletPluginIndex === void 0) {
      return void 0;
    }
    return $currentContext.walletPlugins[$currentResponse.walletPluginIndex];
  });
  component_subscribe($$self, walletPlugin, (value) => $$invalidate(9, $walletPlugin = value));
  let chains = derived([loginContext, walletPlugin], ([$currentContext, $currentWalletPlugin]) => {
    if (!$currentContext || !$currentWalletPlugin) {
      return [];
    }
    if ($currentWalletPlugin.config.supportedChains) {
      return $currentContext.chains.filter((chain2) => {
        return !$currentWalletPlugin.config.supportedChains || $currentWalletPlugin.config.supportedChains.includes(String(chain2.id));
      });
    }
    return $currentContext.chains;
  });
  component_subscribe($$self, chains, (value) => $$invalidate(7, $chains = value));
  const loginContextUnsubscribe = loginContext.subscribe((currentContext) => {
    if (currentContext) {
      set_store_value(
        props,
        $props.subtitle = $t("login.title-app", {
          appName: currentContext.appName,
          default: "Login to {{appName}}"
        }),
        $props
      );
      if (currentContext.chain) {
        set_store_value(loginResponse, $loginResponse.chainId = currentContext.chain.id, $loginResponse);
      }
      if (currentContext.chains.length === 1) {
        set_store_value(loginResponse, $loginResponse.chainId = currentContext.chains[0].id, $loginResponse);
      }
      if (currentContext.permissionLevel) {
        set_store_value(loginResponse, $loginResponse.permissionLevel = currentContext.permissionLevel, $loginResponse);
      }
      if (currentContext.walletPlugins.length === 1) {
        set_store_value(loginResponse, $loginResponse.walletPluginIndex = 0, $loginResponse);
      }
      if (currentContext.walletPluginIndex !== void 0) {
        set_store_value(loginResponse, $loginResponse.walletPluginIndex = currentContext.walletPluginIndex, $loginResponse);
      }
    }
  });
  onMount(() => {
    set_store_value(props, $props.title = $t("login.title", { default: "Login" }), $props);
  });
  onDestroy(loginContextUnsubscribe);
  const step = derived([loginResponse, walletPlugin], ([$currentResponse, $currentWalletPlugin]) => {
    if (!$currentWalletPlugin) {
      return Steps.selectWallet;
    }
    const { requiresChainSelect, requiresPermissionEntry, requiresPermissionSelect, supportedChains } = $currentWalletPlugin.config;
    if (!$currentResponse.chainId && supportedChains && supportedChains.length === 1) {
      set_store_value(loginResponse, $loginResponse.chainId = supportedChains[0], $loginResponse);
      return Steps.selectPermission;
    } else if (!$currentResponse.chainId && $loginContext && $loginContext.chain) {
      set_store_value(loginResponse, $loginResponse.chainId = $loginContext?.chain.id, $loginResponse);
      return Steps.selectPermission;
    } else if (!$currentResponse.chainId && requiresChainSelect) {
      return Steps.selectChain;
    } else if (!$currentResponse.permissionLevel && requiresPermissionSelect) {
      return Steps.selectPermission;
    } else if (!$currentResponse.permissionLevel && requiresPermissionEntry) {
      return Steps.enterPermission;
    }
    complete();
  });
  component_subscribe($$self, step, (value) => $$invalidate(6, $step = value));
  const selectChain = (e) => {
    set_store_value(loginResponse, $loginResponse.chainId = e.detail, $loginResponse);
    set_store_value(backAction, $backAction = unselectChain, $backAction);
    set_store_value(transitionDirection, $transitionDirection = "rtl", $transitionDirection);
  };
  const unselectChain = () => {
    set_store_value(loginResponse, $loginResponse.chainId = void 0, $loginResponse);
    set_store_value(backAction, $backAction = unselectWallet, $backAction);
    set_store_value(transitionDirection, $transitionDirection = "ltr", $transitionDirection);
  };
  const selectPermission = (e) => {
    set_store_value(loginResponse, $loginResponse.permissionLevel = e.detail, $loginResponse);
    set_store_value(backAction, $backAction = void 0, $backAction);
    set_store_value(transitionDirection, $transitionDirection = "rtl", $transitionDirection);
  };
  const selectWallet = (e) => {
    set_store_value(backAction, $backAction = unselectWallet, $backAction);
    set_store_value(loginResponse, $loginResponse.walletPluginIndex = e.detail, $loginResponse);
    set_store_value(transitionDirection, $transitionDirection = "rtl", $transitionDirection);
  };
  const unselectWallet = () => {
    set_store_value(loginResponse, $loginResponse.walletPluginIndex = void 0, $loginResponse);
    set_store_value(backAction, $backAction = void 0, $backAction);
    set_store_value(transitionDirection, $transitionDirection = "ltr", $transitionDirection);
  };
  const complete = () => {
    if (!completed) {
      completed = true;
      dispatch2("complete", $loginResponse);
      backAction.set(void 0);
      allowSettings.set(false);
    }
  };
  const cancel2 = () => {
    dispatch2("cancel");
  };
  return [
    Steps,
    $loginResponse,
    $transitionDirection,
    $loginContext,
    $t,
    $props,
    $step,
    $chains,
    $client,
    $walletPlugin,
    t2,
    client,
    walletPlugin,
    chains,
    step,
    selectChain,
    unselectChain,
    selectPermission,
    selectWallet,
    unselectWallet,
    cancel2
  ];
}
class Login extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$k, create_fragment$k, safe_not_equal, {});
  }
}
function add_css$d(target) {
  append_styles(target, "svelte-1m2zvm", "div.svelte-1m2zvm{flex:1;display:flex;justify-content:space-between;gap:var(--space-xs)}");
}
function create_fragment$j(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[1].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[0],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "class", "svelte-1m2zvm");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        1)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[0],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[0]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[0],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function instance$j($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
  };
  return [$$scope, slots];
}
class ButtonGroup extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$j, create_fragment$j, safe_not_equal, {}, add_css$d);
  }
}
function create_default_slot$7(ctx) {
  let button0;
  let t_1;
  let button1;
  let current;
  button0 = new Button({
    props: {
      data: {
        variant: "outlined",
        label: (
          /*$t*/
          ctx[0]("decline", { default: "Decline" })
        ),
        onClick: (
          /*func*/
          ctx[3]
        ),
        icon: "close"
      }
    }
  });
  button1 = new Button({
    props: {
      data: {
        variant: "primary",
        label: (
          /*$t*/
          ctx[0]("accept", { default: "Accept" })
        ),
        onClick: (
          /*func_1*/
          ctx[4]
        ),
        icon: "check",
        autofocus: true
      }
    }
  });
  return {
    c() {
      create_component(button0.$$.fragment);
      t_1 = space();
      create_component(button1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(button0, target, anchor);
      insert(target, t_1, anchor);
      mount_component(button1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const button0_changes = {};
      if (dirty & /*$t*/
      1) button0_changes.data = {
        variant: "outlined",
        label: (
          /*$t*/
          ctx2[0]("decline", { default: "Decline" })
        ),
        onClick: (
          /*func*/
          ctx2[3]
        ),
        icon: "close"
      };
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$t*/
      1) button1_changes.data = {
        variant: "primary",
        label: (
          /*$t*/
          ctx2[0]("accept", { default: "Accept" })
        ),
        onClick: (
          /*func_1*/
          ctx2[4]
        ),
        icon: "check",
        autofocus: true
      };
      button1.$set(button1_changes);
    },
    i(local) {
      if (current) return;
      transition_in(button0.$$.fragment, local);
      transition_in(button1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button0.$$.fragment, local);
      transition_out(button1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t_1);
      }
      destroy_component(button0, detaching);
      destroy_component(button1, detaching);
    }
  };
}
function create_fragment$i(ctx) {
  let buttongroup;
  let current;
  buttongroup = new ButtonGroup({
    props: {
      $$slots: { default: [create_default_slot$7] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(buttongroup.$$.fragment);
    },
    m(target, anchor) {
      mount_component(buttongroup, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const buttongroup_changes = {};
      if (dirty & /*$$scope, $t*/
      33) {
        buttongroup_changes.$$scope = { dirty, ctx: ctx2 };
      }
      buttongroup.$set(buttongroup_changes);
    },
    i(local) {
      if (current) return;
      transition_in(buttongroup.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(buttongroup.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(buttongroup, detaching);
    }
  };
}
function instance$i($$self, $$props, $$invalidate) {
  let $t;
  const { t: t2 } = getContext("i18n");
  component_subscribe($$self, t2, (value) => $$invalidate(0, $t = value));
  const dispatch2 = createEventDispatcher();
  const func = () => dispatch2("cancel");
  const func_1 = () => dispatch2("complete");
  return [$t, t2, dispatch2, func, func_1];
}
class Accept extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$i, create_fragment$i, safe_not_equal, {});
  }
}
function add_css$c(target) {
  append_styles(target, "svelte-1lmgxnd", ".asset.svelte-1lmgxnd.svelte-1lmgxnd{text-align:center}.asset.svelte-1lmgxnd>.svelte-1lmgxnd{margin:0;line-height:1.5}.value.svelte-1lmgxnd.svelte-1lmgxnd{font-size:var(--fs-2);font-weight:600;color:var(--body-text-color)}.label.svelte-1lmgxnd.svelte-1lmgxnd{font-size:var(--fs-0);font-weight:400;color:var(--body-text-color-variant)}");
}
function create_if_block$9(ctx) {
  let div;
  let p0;
  let t0_value = (
    /*data*/
    ctx[0].value + ""
  );
  let t0;
  let t1;
  let p1;
  let t2_value = (
    /*data*/
    ctx[0].label + ""
  );
  let t2;
  return {
    c() {
      div = element("div");
      p0 = element("p");
      t0 = text(t0_value);
      t1 = space();
      p1 = element("p");
      t2 = text(t2_value);
      attr(p0, "class", "value svelte-1lmgxnd");
      attr(p1, "class", "label svelte-1lmgxnd");
      attr(div, "class", "asset svelte-1lmgxnd");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, p0);
      append(p0, t0);
      append(div, t1);
      append(div, p1);
      append(p1, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*data*/
      1 && t0_value !== (t0_value = /*data*/
      ctx2[0].value + "")) set_data(t0, t0_value);
      if (dirty & /*data*/
      1 && t2_value !== (t2_value = /*data*/
      ctx2[0].label + "")) set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_fragment$h(ctx) {
  let if_block_anchor;
  let if_block = (
    /*data*/
    ctx[0] && create_if_block$9(ctx)
  );
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (
        /*data*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$9(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function instance$h($$self, $$props, $$invalidate) {
  let { data = {
    label: "[[Unknown Label]]",
    value: "[[Unknown Value]]"
  } } = $$props;
  $$self.$$set = ($$props2) => {
    if ("data" in $$props2) $$invalidate(0, data = $$props2.data);
  };
  return [data];
}
class Asset2 extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$h, create_fragment$h, safe_not_equal, { data: 0 }, add_css$c);
  }
}
function add_css$b(target) {
  append_styles(target, "svelte-1bils14", "button.svelte-1bils14{cursor:pointer;display:block;width:300px;height:65px;border-radius:12px;font-size:16px;font-weight:600;color:var(--button-text-color);background-color:var(--button-tertiary-color);border:none;box-shadow:none;margin:27px auto 0}");
}
function create_fragment$g(ctx) {
  let button;
  let t_1_value = (
    /*$t*/
    ctx[0]("close", { default: "Close" }) + ""
  );
  let t_1;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      t_1 = text(t_1_value);
      attr(button, "class", "svelte-1bils14");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, t_1);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[3]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*$t*/
      1 && t_1_value !== (t_1_value = /*$t*/
      ctx2[0]("close", { default: "Close" }) + "")) set_data(t_1, t_1_value);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance$g($$self, $$props, $$invalidate) {
  let $t;
  const { t: t2 } = getContext("i18n");
  component_subscribe($$self, t2, (value) => $$invalidate(0, $t = value));
  const dispatch2 = createEventDispatcher();
  const click_handler = () => dispatch2("complete");
  return [$t, t2, dispatch2, click_handler];
}
class Close extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$g, create_fragment$g, safe_not_equal, {}, add_css$b);
  }
}
function add_css$a(target) {
  append_styles(target, "svelte-785ja0", ".button.svelte-785ja0{--button-height:var(--space-2xl);cursor:pointer;display:flex;justify-content:center;align-items:center;gap:var(--space-2xs);height:var(--button-height);line-height:var(--button-height);text-decoration:none;text-align:center;border-radius:var(--border-radius-inner);font-size:var(--fs-1);font-weight:600;color:var(--button-color, var(--button-text-color));background:var(--button-background, var(--button-primary-background));border:none;box-shadow:var(--button-outline);flex:1}.button.svelte-785ja0:hover{background:var(--button-background-hover, var(--button-primary-background-hover));box-shadow:var(--button-outline-hover, var(--button-primary-outline-hover))}.button.svelte-785ja0:active{background:var(--button-background-active, var(--button-primary-background-active));box-shadow:var(--button-outline-active);color:var(--button-text-color-active)}.secondary.svelte-785ja0{--button-background:var(--button-secondary-background);--button-background-hover:var(--button-secondary-background-hover);--button-background-active:var(--button-secondary-background-active);--button-outline-hover:var(--button-secondary-outline-hover)}.outlined.svelte-785ja0{--button-background:transparent;--button-background-hover:transparent;--button-background-active:var(--button-outlined-background-active);--button-outline:var(--button-outlined-outline);--button-outline-hover:var(--button-outlined-outline-hover)}a.svelte-785ja0{align-self:stretch}");
}
function create_if_block$8(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({ props: { name: (
    /*icon*/
    ctx[3]
  ) } });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current) return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_fragment$f(ctx) {
  let a;
  let t0;
  let span;
  let current;
  let if_block = (
    /*icon*/
    ctx[3] && create_if_block$8(ctx)
  );
  return {
    c() {
      a = element("a");
      if (if_block) if_block.c();
      t0 = space();
      span = element("span");
      span.textContent = `${/*label*/
      ctx[2]}`;
      attr(a, "class", null_to_empty(
        /*variant*/
        ctx[5]
      ) + " svelte-785ja0");
      attr(
        a,
        "href",
        /*href*/
        ctx[1]
      );
      attr(
        a,
        "target",
        /*target*/
        ctx[4]
      );
      attr(a, "rel", "noreferrer");
      toggle_class(
        a,
        "button",
        /*button*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, a, anchor);
      if (if_block) if_block.m(a, null);
      append(a, t0);
      append(a, span);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*icon*/
        ctx2[3]
      ) if_block.p(ctx2, dirty);
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(a);
      }
      if (if_block) if_block.d();
    }
  };
}
function instance$f($$self, $$props, $$invalidate) {
  let { data } = $$props;
  let { button = true, href, label, icon, target, variant = "outlined" } = data;
  $$self.$$set = ($$props2) => {
    if ("data" in $$props2) $$invalidate(6, data = $$props2.data);
  };
  return [button, href, label, icon, target, variant, data];
}
class Link extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$f, create_fragment$f, safe_not_equal, { data: 6 }, add_css$a);
  }
}
var ErrorCorrectLevel = {
  L: 1,
  M: 0,
  Q: 3,
  H: 2
};
var Mode = {
  MODE_NUMBER: 1 << 0,
  MODE_ALPHA_NUM: 1 << 1,
  MODE_8BIT_BYTE: 1 << 2,
  MODE_KANJI: 1 << 3
};
class QR8bitByte {
  constructor(data) {
    this.mode = Mode.MODE_8BIT_BYTE;
    this.data = data;
  }
  getLength() {
    return this.data.length;
  }
  write(buffer) {
    for (let i2 = 0; i2 < this.data.length; i2++) {
      buffer.put(this.data.charCodeAt(i2), 8);
    }
  }
}
class QRBitBuffer {
  constructor() {
    this.buffer = [];
    this.length = 0;
  }
  get(index) {
    const bufIndex = Math.floor(index / 8);
    return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;
  }
  put(num, length) {
    for (let i2 = 0; i2 < length; i2++) {
      this.putBit((num >>> length - i2 - 1 & 1) == 1);
    }
  }
  getLengthInBits() {
    return this.length;
  }
  putBit(bit) {
    const bufIndex = Math.floor(this.length / 8);
    if (this.buffer.length <= bufIndex) {
      this.buffer.push(0);
    }
    if (bit) {
      this.buffer[bufIndex] |= 128 >>> this.length % 8;
    }
    this.length++;
  }
}
const QRMath = {
  glog: function(n2) {
    if (n2 < 1) {
      throw new Error("glog(" + n2 + ")");
    }
    return QRMath.LOG_TABLE[n2];
  },
  gexp: function(n2) {
    while (n2 < 0) {
      n2 += 255;
    }
    while (n2 >= 256) {
      n2 -= 255;
    }
    return QRMath.EXP_TABLE[n2];
  },
  EXP_TABLE: new Array(256),
  LOG_TABLE: new Array(256)
};
for (let i2 = 0; i2 < 8; i2++) {
  QRMath.EXP_TABLE[i2] = 1 << i2;
}
for (let i2 = 8; i2 < 256; i2++) {
  QRMath.EXP_TABLE[i2] = QRMath.EXP_TABLE[i2 - 4] ^ QRMath.EXP_TABLE[i2 - 5] ^ QRMath.EXP_TABLE[i2 - 6] ^ QRMath.EXP_TABLE[i2 - 8];
}
for (let i2 = 0; i2 < 255; i2++) {
  QRMath.LOG_TABLE[QRMath.EXP_TABLE[i2]] = i2;
}
class QRPolynomial {
  constructor(num, shift) {
    if (num.length == void 0) {
      throw new Error(num.length + "/" + shift);
    }
    let offset = 0;
    while (offset < num.length && num[offset] == 0) {
      offset++;
    }
    this.num = new Array(num.length - offset + shift);
    for (let i2 = 0; i2 < num.length - offset; i2++) {
      this.num[i2] = num[i2 + offset];
    }
  }
  get(index) {
    return this.num[index];
  }
  getLength() {
    return this.num.length;
  }
  multiply(e) {
    const num = new Array(this.getLength() + e.getLength() - 1);
    for (let i2 = 0; i2 < this.getLength(); i2++) {
      for (let j2 = 0; j2 < e.getLength(); j2++) {
        num[i2 + j2] ^= QRMath.gexp(QRMath.glog(this.get(i2)) + QRMath.glog(e.get(j2)));
      }
    }
    return new QRPolynomial(num, 0);
  }
  mod(e) {
    if (this.getLength() - e.getLength() < 0) {
      return this;
    }
    const ratio = QRMath.glog(this.get(0)) - QRMath.glog(e.get(0));
    const num = new Array(this.getLength());
    for (let i2 = 0; i2 < this.getLength(); i2++) {
      num[i2] = this.get(i2);
    }
    for (let i2 = 0; i2 < e.getLength(); i2++) {
      num[i2] ^= QRMath.gexp(QRMath.glog(e.get(i2)) + ratio);
    }
    return new QRPolynomial(num, 0).mod(e);
  }
}
class QRRSBlock {
  constructor(totalCount, dataCount) {
    this.totalCount = totalCount;
    this.dataCount = dataCount;
  }
  static getRSBlocks(typeNumber, errorCorrectLevel) {
    const rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);
    if (rsBlock == void 0) {
      throw new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectLevel:" + errorCorrectLevel);
    }
    const length = rsBlock.length / 3;
    const list = [];
    for (let i2 = 0; i2 < length; i2++) {
      const count = rsBlock[i2 * 3 + 0];
      const totalCount = rsBlock[i2 * 3 + 1];
      const dataCount = rsBlock[i2 * 3 + 2];
      for (let j2 = 0; j2 < count; j2++) {
        list.push(new QRRSBlock(totalCount, dataCount));
      }
    }
    return list;
  }
  static getRsBlockTable(typeNumber, errorCorrectLevel) {
    switch (errorCorrectLevel) {
      case ErrorCorrectLevel.L:
        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
      case ErrorCorrectLevel.M:
        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
      case ErrorCorrectLevel.Q:
        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
      case ErrorCorrectLevel.H:
        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
      default:
        return void 0;
    }
  }
}
QRRSBlock.RS_BLOCK_TABLE = [
  // L
  // M
  // Q
  // H
  // 1
  [1, 26, 19],
  [1, 26, 16],
  [1, 26, 13],
  [1, 26, 9],
  // 2
  [1, 44, 34],
  [1, 44, 28],
  [1, 44, 22],
  [1, 44, 16],
  // 3
  [1, 70, 55],
  [1, 70, 44],
  [2, 35, 17],
  [2, 35, 13],
  // 4
  [1, 100, 80],
  [2, 50, 32],
  [2, 50, 24],
  [4, 25, 9],
  // 5
  [1, 134, 108],
  [2, 67, 43],
  [2, 33, 15, 2, 34, 16],
  [2, 33, 11, 2, 34, 12],
  // 6
  [2, 86, 68],
  [4, 43, 27],
  [4, 43, 19],
  [4, 43, 15],
  // 7
  [2, 98, 78],
  [4, 49, 31],
  [2, 32, 14, 4, 33, 15],
  [4, 39, 13, 1, 40, 14],
  // 8
  [2, 121, 97],
  [2, 60, 38, 2, 61, 39],
  [4, 40, 18, 2, 41, 19],
  [4, 40, 14, 2, 41, 15],
  // 9
  [2, 146, 116],
  [3, 58, 36, 2, 59, 37],
  [4, 36, 16, 4, 37, 17],
  [4, 36, 12, 4, 37, 13],
  // 10
  [2, 86, 68, 2, 87, 69],
  [4, 69, 43, 1, 70, 44],
  [6, 43, 19, 2, 44, 20],
  [6, 43, 15, 2, 44, 16],
  // 11
  [4, 101, 81],
  [1, 80, 50, 4, 81, 51],
  [4, 50, 22, 4, 51, 23],
  [3, 36, 12, 8, 37, 13],
  // 12
  [2, 116, 92, 2, 117, 93],
  [6, 58, 36, 2, 59, 37],
  [4, 46, 20, 6, 47, 21],
  [7, 42, 14, 4, 43, 15],
  // 13
  [4, 133, 107],
  [8, 59, 37, 1, 60, 38],
  [8, 44, 20, 4, 45, 21],
  [12, 33, 11, 4, 34, 12],
  // 14
  [3, 145, 115, 1, 146, 116],
  [4, 64, 40, 5, 65, 41],
  [11, 36, 16, 5, 37, 17],
  [11, 36, 12, 5, 37, 13],
  // 15
  [5, 109, 87, 1, 110, 88],
  [5, 65, 41, 5, 66, 42],
  [5, 54, 24, 7, 55, 25],
  [11, 36, 12],
  // 16
  [5, 122, 98, 1, 123, 99],
  [7, 73, 45, 3, 74, 46],
  [15, 43, 19, 2, 44, 20],
  [3, 45, 15, 13, 46, 16],
  // 17
  [1, 135, 107, 5, 136, 108],
  [10, 74, 46, 1, 75, 47],
  [1, 50, 22, 15, 51, 23],
  [2, 42, 14, 17, 43, 15],
  // 18
  [5, 150, 120, 1, 151, 121],
  [9, 69, 43, 4, 70, 44],
  [17, 50, 22, 1, 51, 23],
  [2, 42, 14, 19, 43, 15],
  // 19
  [3, 141, 113, 4, 142, 114],
  [3, 70, 44, 11, 71, 45],
  [17, 47, 21, 4, 48, 22],
  [9, 39, 13, 16, 40, 14],
  // 20
  [3, 135, 107, 5, 136, 108],
  [3, 67, 41, 13, 68, 42],
  [15, 54, 24, 5, 55, 25],
  [15, 43, 15, 10, 44, 16],
  // 21
  [4, 144, 116, 4, 145, 117],
  [17, 68, 42],
  [17, 50, 22, 6, 51, 23],
  [19, 46, 16, 6, 47, 17],
  // 22
  [2, 139, 111, 7, 140, 112],
  [17, 74, 46],
  [7, 54, 24, 16, 55, 25],
  [34, 37, 13],
  // 23
  [4, 151, 121, 5, 152, 122],
  [4, 75, 47, 14, 76, 48],
  [11, 54, 24, 14, 55, 25],
  [16, 45, 15, 14, 46, 16],
  // 24
  [6, 147, 117, 4, 148, 118],
  [6, 73, 45, 14, 74, 46],
  [11, 54, 24, 16, 55, 25],
  [30, 46, 16, 2, 47, 17],
  // 25
  [8, 132, 106, 4, 133, 107],
  [8, 75, 47, 13, 76, 48],
  [7, 54, 24, 22, 55, 25],
  [22, 45, 15, 13, 46, 16],
  // 26
  [10, 142, 114, 2, 143, 115],
  [19, 74, 46, 4, 75, 47],
  [28, 50, 22, 6, 51, 23],
  [33, 46, 16, 4, 47, 17],
  // 27
  [8, 152, 122, 4, 153, 123],
  [22, 73, 45, 3, 74, 46],
  [8, 53, 23, 26, 54, 24],
  [12, 45, 15, 28, 46, 16],
  // 28
  [3, 147, 117, 10, 148, 118],
  [3, 73, 45, 23, 74, 46],
  [4, 54, 24, 31, 55, 25],
  [11, 45, 15, 31, 46, 16],
  // 29
  [7, 146, 116, 7, 147, 117],
  [21, 73, 45, 7, 74, 46],
  [1, 53, 23, 37, 54, 24],
  [19, 45, 15, 26, 46, 16],
  // 30
  [5, 145, 115, 10, 146, 116],
  [19, 75, 47, 10, 76, 48],
  [15, 54, 24, 25, 55, 25],
  [23, 45, 15, 25, 46, 16],
  // 31
  [13, 145, 115, 3, 146, 116],
  [2, 74, 46, 29, 75, 47],
  [42, 54, 24, 1, 55, 25],
  [23, 45, 15, 28, 46, 16],
  // 32
  [17, 145, 115],
  [10, 74, 46, 23, 75, 47],
  [10, 54, 24, 35, 55, 25],
  [19, 45, 15, 35, 46, 16],
  // 33
  [17, 145, 115, 1, 146, 116],
  [14, 74, 46, 21, 75, 47],
  [29, 54, 24, 19, 55, 25],
  [11, 45, 15, 46, 46, 16],
  // 34
  [13, 145, 115, 6, 146, 116],
  [14, 74, 46, 23, 75, 47],
  [44, 54, 24, 7, 55, 25],
  [59, 46, 16, 1, 47, 17],
  // 35
  [12, 151, 121, 7, 152, 122],
  [12, 75, 47, 26, 76, 48],
  [39, 54, 24, 14, 55, 25],
  [22, 45, 15, 41, 46, 16],
  // 36
  [6, 151, 121, 14, 152, 122],
  [6, 75, 47, 34, 76, 48],
  [46, 54, 24, 10, 55, 25],
  [2, 45, 15, 64, 46, 16],
  // 37
  [17, 152, 122, 4, 153, 123],
  [29, 74, 46, 14, 75, 47],
  [49, 54, 24, 10, 55, 25],
  [24, 45, 15, 46, 46, 16],
  // 38
  [4, 152, 122, 18, 153, 123],
  [13, 74, 46, 32, 75, 47],
  [48, 54, 24, 14, 55, 25],
  [42, 45, 15, 32, 46, 16],
  // 39
  [20, 147, 117, 4, 148, 118],
  [40, 75, 47, 7, 76, 48],
  [43, 54, 24, 22, 55, 25],
  [10, 45, 15, 67, 46, 16],
  // 40
  [19, 148, 118, 6, 149, 119],
  [18, 75, 47, 31, 76, 48],
  [34, 54, 24, 34, 55, 25],
  [20, 45, 15, 61, 46, 16]
];
const QRMaskPattern = {
  PATTERN000: 0,
  PATTERN001: 1,
  PATTERN010: 2,
  PATTERN011: 3,
  PATTERN100: 4,
  PATTERN101: 5,
  PATTERN110: 6,
  PATTERN111: 7
};
const QRUtil = {
  PATTERN_POSITION_TABLE: [
    [],
    [6, 18],
    [6, 22],
    [6, 26],
    [6, 30],
    [6, 34],
    [6, 22, 38],
    [6, 24, 42],
    [6, 26, 46],
    [6, 28, 50],
    [6, 30, 54],
    [6, 32, 58],
    [6, 34, 62],
    [6, 26, 46, 66],
    [6, 26, 48, 70],
    [6, 26, 50, 74],
    [6, 30, 54, 78],
    [6, 30, 56, 82],
    [6, 30, 58, 86],
    [6, 34, 62, 90],
    [6, 28, 50, 72, 94],
    [6, 26, 50, 74, 98],
    [6, 30, 54, 78, 102],
    [6, 28, 54, 80, 106],
    [6, 32, 58, 84, 110],
    [6, 30, 58, 86, 114],
    [6, 34, 62, 90, 118],
    [6, 26, 50, 74, 98, 122],
    [6, 30, 54, 78, 102, 126],
    [6, 26, 52, 78, 104, 130],
    [6, 30, 56, 82, 108, 134],
    [6, 34, 60, 86, 112, 138],
    [6, 30, 58, 86, 114, 142],
    [6, 34, 62, 90, 118, 146],
    [6, 30, 54, 78, 102, 126, 150],
    [6, 24, 50, 76, 102, 128, 154],
    [6, 28, 54, 80, 106, 132, 158],
    [6, 32, 58, 84, 110, 136, 162],
    [6, 26, 54, 82, 110, 138, 166],
    [6, 30, 58, 86, 114, 142, 170]
  ],
  G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,
  G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,
  G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,
  getBCHTypeInfo: function(data) {
    let d2 = data << 10;
    while (QRUtil.getBCHDigit(d2) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
      d2 ^= QRUtil.G15 << QRUtil.getBCHDigit(d2) - QRUtil.getBCHDigit(QRUtil.G15);
    }
    return (data << 10 | d2) ^ QRUtil.G15_MASK;
  },
  getBCHTypeNumber: function(data) {
    let d2 = data << 12;
    while (QRUtil.getBCHDigit(d2) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
      d2 ^= QRUtil.G18 << QRUtil.getBCHDigit(d2) - QRUtil.getBCHDigit(QRUtil.G18);
    }
    return data << 12 | d2;
  },
  getBCHDigit: function(data) {
    let digit = 0;
    while (data != 0) {
      digit++;
      data >>>= 1;
    }
    return digit;
  },
  getPatternPosition: function(typeNumber) {
    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
  },
  getMask: function(maskPattern, i2, j2) {
    switch (maskPattern) {
      case QRMaskPattern.PATTERN000:
        return (i2 + j2) % 2 == 0;
      case QRMaskPattern.PATTERN001:
        return i2 % 2 == 0;
      case QRMaskPattern.PATTERN010:
        return j2 % 3 == 0;
      case QRMaskPattern.PATTERN011:
        return (i2 + j2) % 3 == 0;
      case QRMaskPattern.PATTERN100:
        return (Math.floor(i2 / 2) + Math.floor(j2 / 3)) % 2 == 0;
      case QRMaskPattern.PATTERN101:
        return i2 * j2 % 2 + i2 * j2 % 3 == 0;
      case QRMaskPattern.PATTERN110:
        return (i2 * j2 % 2 + i2 * j2 % 3) % 2 == 0;
      case QRMaskPattern.PATTERN111:
        return (i2 * j2 % 3 + (i2 + j2) % 2) % 2 == 0;
      default:
        throw new Error("bad maskPattern:" + maskPattern);
    }
  },
  getErrorCorrectPolynomial: function(errorCorrectLength) {
    let a = new QRPolynomial([1], 0);
    for (let i2 = 0; i2 < errorCorrectLength; i2++) {
      a = a.multiply(new QRPolynomial([1, QRMath.gexp(i2)], 0));
    }
    return a;
  },
  getLengthInBits: function(mode, type) {
    if (1 <= type && type < 10) {
      switch (mode) {
        case Mode.MODE_NUMBER:
          return 10;
        case Mode.MODE_ALPHA_NUM:
          return 9;
        case Mode.MODE_8BIT_BYTE:
          return 8;
        case Mode.MODE_KANJI:
          return 8;
        default:
          throw new Error("mode:" + mode);
      }
    } else if (type < 27) {
      switch (mode) {
        case Mode.MODE_NUMBER:
          return 12;
        case Mode.MODE_ALPHA_NUM:
          return 11;
        case Mode.MODE_8BIT_BYTE:
          return 16;
        case Mode.MODE_KANJI:
          return 10;
        default:
          throw new Error("mode:" + mode);
      }
    } else if (type < 41) {
      switch (mode) {
        case Mode.MODE_NUMBER:
          return 14;
        case Mode.MODE_ALPHA_NUM:
          return 13;
        case Mode.MODE_8BIT_BYTE:
          return 16;
        case Mode.MODE_KANJI:
          return 12;
        default:
          throw new Error("mode:" + mode);
      }
    } else {
      throw new Error("type:" + type);
    }
  },
  getLostPoint: function(qrCode) {
    const moduleCount = qrCode.getModuleCount();
    let lostPoint = 0;
    for (let row = 0; row < moduleCount; row++) {
      for (let col = 0; col < moduleCount; col++) {
        let sameCount = 0;
        const dark = qrCode.isDark(row, col);
        for (let r = -1; r <= 1; r++) {
          if (row + r < 0 || moduleCount <= row + r) {
            continue;
          }
          for (let c2 = -1; c2 <= 1; c2++) {
            if (col + c2 < 0 || moduleCount <= col + c2) {
              continue;
            }
            if (r == 0 && c2 == 0) {
              continue;
            }
            if (dark == qrCode.isDark(row + r, col + c2)) {
              sameCount++;
            }
          }
        }
        if (sameCount > 5) {
          lostPoint += 3 + sameCount - 5;
        }
      }
    }
    for (let row = 0; row < moduleCount - 1; row++) {
      for (let col = 0; col < moduleCount - 1; col++) {
        let count = 0;
        if (qrCode.isDark(row, col))
          count++;
        if (qrCode.isDark(row + 1, col))
          count++;
        if (qrCode.isDark(row, col + 1))
          count++;
        if (qrCode.isDark(row + 1, col + 1))
          count++;
        if (count == 0 || count == 4) {
          lostPoint += 3;
        }
      }
    }
    for (let row = 0; row < moduleCount; row++) {
      for (let col = 0; col < moduleCount - 6; col++) {
        if (qrCode.isDark(row, col) && !qrCode.isDark(row, col + 1) && qrCode.isDark(row, col + 2) && qrCode.isDark(row, col + 3) && qrCode.isDark(row, col + 4) && !qrCode.isDark(row, col + 5) && qrCode.isDark(row, col + 6)) {
          lostPoint += 40;
        }
      }
    }
    for (let col = 0; col < moduleCount; col++) {
      for (let row = 0; row < moduleCount - 6; row++) {
        if (qrCode.isDark(row, col) && !qrCode.isDark(row + 1, col) && qrCode.isDark(row + 2, col) && qrCode.isDark(row + 3, col) && qrCode.isDark(row + 4, col) && !qrCode.isDark(row + 5, col) && qrCode.isDark(row + 6, col)) {
          lostPoint += 40;
        }
      }
    }
    let darkCount = 0;
    for (let col = 0; col < moduleCount; col++) {
      for (let row = 0; row < moduleCount; row++) {
        if (qrCode.isDark(row, col)) {
          darkCount++;
        }
      }
    }
    const ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
    lostPoint += ratio * 10;
    return lostPoint;
  }
};
class QRCode {
  constructor(typeNumber, errorCorrectLevel) {
    this.typeNumber = typeNumber;
    this.errorCorrectLevel = errorCorrectLevel;
    this.modules = null;
    this.moduleCount = 0;
    this.dataCache = null;
    this.dataList = [];
  }
  addData(data) {
    const newData = new QR8bitByte(data);
    this.dataList.push(newData);
    this.dataCache = null;
  }
  isDark(row, col) {
    if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {
      throw new Error(row + "," + col);
    }
    return this.modules[row][col];
  }
  getModuleCount() {
    return this.moduleCount;
  }
  make() {
    if (this.typeNumber < 1) {
      let typeNumber = 1;
      for (typeNumber = 1; typeNumber < 40; typeNumber++) {
        const rsBlocks = QRRSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);
        const buffer = new QRBitBuffer();
        let totalDataCount = 0;
        for (let i2 = 0; i2 < rsBlocks.length; i2++) {
          totalDataCount += rsBlocks[i2].dataCount;
        }
        for (let i2 = 0; i2 < this.dataList.length; i2++) {
          const data = this.dataList[i2];
          buffer.put(data.mode, 4);
          buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber));
          data.write(buffer);
        }
        if (buffer.getLengthInBits() <= totalDataCount * 8)
          break;
      }
      this.typeNumber = typeNumber;
    }
    this.makeImpl(false, this.getBestMaskPattern());
  }
  makeImpl(test, maskPattern) {
    this.moduleCount = this.typeNumber * 4 + 17;
    this.modules = new Array(this.moduleCount);
    for (let row = 0; row < this.moduleCount; row++) {
      this.modules[row] = new Array(this.moduleCount);
      for (let col = 0; col < this.moduleCount; col++) {
        this.modules[row][col] = null;
      }
    }
    this.setupPositionProbePattern(0, 0);
    this.setupPositionProbePattern(this.moduleCount - 7, 0);
    this.setupPositionProbePattern(0, this.moduleCount - 7);
    this.setupPositionAdjustPattern();
    this.setupTimingPattern();
    this.setupTypeInfo(test, maskPattern);
    if (this.typeNumber >= 7) {
      this.setupTypeNumber(test);
    }
    if (this.dataCache == null) {
      this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);
    }
    this.mapData(this.dataCache, maskPattern);
  }
  setupPositionProbePattern(row, col) {
    for (let r = -1; r <= 7; r++) {
      if (row + r <= -1 || this.moduleCount <= row + r)
        continue;
      for (let c2 = -1; c2 <= 7; c2++) {
        if (col + c2 <= -1 || this.moduleCount <= col + c2)
          continue;
        if (0 <= r && r <= 6 && (c2 == 0 || c2 == 6) || 0 <= c2 && c2 <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c2 && c2 <= 4) {
          this.modules[row + r][col + c2] = true;
        } else {
          this.modules[row + r][col + c2] = false;
        }
      }
    }
  }
  getBestMaskPattern() {
    let minLostPoint = 0;
    let pattern = 0;
    for (let i2 = 0; i2 < 8; i2++) {
      this.makeImpl(true, i2);
      const lostPoint = QRUtil.getLostPoint(this);
      if (i2 == 0 || minLostPoint > lostPoint) {
        minLostPoint = lostPoint;
        pattern = i2;
      }
    }
    return pattern;
  }
  setupTimingPattern() {
    for (let r = 8; r < this.moduleCount - 8; r++) {
      if (this.modules[r][6] != null) {
        continue;
      }
      this.modules[r][6] = r % 2 == 0;
    }
    for (let c2 = 8; c2 < this.moduleCount - 8; c2++) {
      if (this.modules[6][c2] != null) {
        continue;
      }
      this.modules[6][c2] = c2 % 2 == 0;
    }
  }
  setupPositionAdjustPattern() {
    const pos = QRUtil.getPatternPosition(this.typeNumber);
    for (let i2 = 0; i2 < pos.length; i2++) {
      for (let j2 = 0; j2 < pos.length; j2++) {
        const row = pos[i2];
        const col = pos[j2];
        if (this.modules[row][col] != null) {
          continue;
        }
        for (let r = -2; r <= 2; r++) {
          for (let c2 = -2; c2 <= 2; c2++) {
            if (r == -2 || r == 2 || c2 == -2 || c2 == 2 || r == 0 && c2 == 0) {
              this.modules[row + r][col + c2] = true;
            } else {
              this.modules[row + r][col + c2] = false;
            }
          }
        }
      }
    }
  }
  setupTypeNumber(test) {
    const bits = QRUtil.getBCHTypeNumber(this.typeNumber);
    for (let i2 = 0; i2 < 18; i2++) {
      const mod = !test && (bits >> i2 & 1) == 1;
      this.modules[Math.floor(i2 / 3)][i2 % 3 + this.moduleCount - 8 - 3] = mod;
    }
    for (let i2 = 0; i2 < 18; i2++) {
      const mod = !test && (bits >> i2 & 1) == 1;
      this.modules[i2 % 3 + this.moduleCount - 8 - 3][Math.floor(i2 / 3)] = mod;
    }
  }
  setupTypeInfo(test, maskPattern) {
    const data = this.errorCorrectLevel << 3 | maskPattern;
    const bits = QRUtil.getBCHTypeInfo(data);
    for (let i2 = 0; i2 < 15; i2++) {
      const mod = !test && (bits >> i2 & 1) == 1;
      if (i2 < 6) {
        this.modules[i2][8] = mod;
      } else if (i2 < 8) {
        this.modules[i2 + 1][8] = mod;
      } else {
        this.modules[this.moduleCount - 15 + i2][8] = mod;
      }
    }
    for (let i2 = 0; i2 < 15; i2++) {
      const mod = !test && (bits >> i2 & 1) == 1;
      if (i2 < 8) {
        this.modules[8][this.moduleCount - i2 - 1] = mod;
      } else if (i2 < 9) {
        this.modules[8][15 - i2 - 1 + 1] = mod;
      } else {
        this.modules[8][15 - i2 - 1] = mod;
      }
    }
    this.modules[this.moduleCount - 8][8] = !test;
  }
  mapData(data, maskPattern) {
    let inc = -1;
    let row = this.moduleCount - 1;
    let bitIndex = 7;
    let byteIndex = 0;
    for (let col = this.moduleCount - 1; col > 0; col -= 2) {
      if (col == 6)
        col--;
      for (; ; ) {
        for (let c2 = 0; c2 < 2; c2++) {
          if (this.modules[row][col - c2] == null) {
            let dark = false;
            if (byteIndex < data.length) {
              dark = (data[byteIndex] >>> bitIndex & 1) == 1;
            }
            const mask = QRUtil.getMask(maskPattern, row, col - c2);
            if (mask) {
              dark = !dark;
            }
            this.modules[row][col - c2] = dark;
            bitIndex--;
            if (bitIndex == -1) {
              byteIndex++;
              bitIndex = 7;
            }
          }
        }
        row += inc;
        if (row < 0 || this.moduleCount <= row) {
          row -= inc;
          inc = -inc;
          break;
        }
      }
    }
  }
  static createData(typeNumber, errorCorrectLevel, dataList) {
    const rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);
    const buffer = new QRBitBuffer();
    for (let i2 = 0; i2 < dataList.length; i2++) {
      const data = dataList[i2];
      buffer.put(data.mode, 4);
      buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber));
      data.write(buffer);
    }
    let totalDataCount = 0;
    for (let i2 = 0; i2 < rsBlocks.length; i2++) {
      totalDataCount += rsBlocks[i2].dataCount;
    }
    if (buffer.getLengthInBits() > totalDataCount * 8) {
      throw new Error("code length overflow. (" + buffer.getLengthInBits() + ">" + totalDataCount * 8 + ")");
    }
    if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
      buffer.put(0, 4);
    }
    while (buffer.getLengthInBits() % 8 != 0) {
      buffer.putBit(false);
    }
    for (; ; ) {
      if (buffer.getLengthInBits() >= totalDataCount * 8) {
        break;
      }
      buffer.put(QRCode.PAD0, 8);
      if (buffer.getLengthInBits() >= totalDataCount * 8) {
        break;
      }
      buffer.put(QRCode.PAD1, 8);
    }
    return QRCode.createBytes(buffer, rsBlocks);
  }
  static createBytes(buffer, rsBlocks) {
    let offset = 0;
    let maxDcCount = 0;
    let maxEcCount = 0;
    const dcdata = new Array(rsBlocks.length);
    const ecdata = new Array(rsBlocks.length);
    for (let r = 0; r < rsBlocks.length; r++) {
      const dcCount = rsBlocks[r].dataCount;
      const ecCount = rsBlocks[r].totalCount - dcCount;
      maxDcCount = Math.max(maxDcCount, dcCount);
      maxEcCount = Math.max(maxEcCount, ecCount);
      dcdata[r] = new Array(dcCount);
      for (let i2 = 0; i2 < dcdata[r].length; i2++) {
        dcdata[r][i2] = 255 & buffer.buffer[i2 + offset];
      }
      offset += dcCount;
      const rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);
      const rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);
      const modPoly = rawPoly.mod(rsPoly);
      ecdata[r] = new Array(rsPoly.getLength() - 1);
      for (let i2 = 0; i2 < ecdata[r].length; i2++) {
        const modIndex = i2 + modPoly.getLength() - ecdata[r].length;
        ecdata[r][i2] = modIndex >= 0 ? modPoly.get(modIndex) : 0;
      }
    }
    let totalCodeCount = 0;
    for (let i2 = 0; i2 < rsBlocks.length; i2++) {
      totalCodeCount += rsBlocks[i2].totalCount;
    }
    const data = new Array(totalCodeCount);
    let index = 0;
    for (let i2 = 0; i2 < maxDcCount; i2++) {
      for (let r = 0; r < rsBlocks.length; r++) {
        if (i2 < dcdata[r].length) {
          data[index++] = dcdata[r][i2];
        }
      }
    }
    for (let i2 = 0; i2 < maxEcCount; i2++) {
      for (let r = 0; r < rsBlocks.length; r++) {
        if (i2 < ecdata[r].length) {
          data[index++] = ecdata[r][i2];
        }
      }
    }
    return data;
  }
}
QRCode.PAD0 = 236;
QRCode.PAD1 = 17;
function generate(text2, level = "L", version2 = -1) {
  try {
    const qr = new QRCode(version2, ErrorCorrectLevel[level]);
    const rects = [];
    qr.addData(text2);
    qr.make();
    const rows = qr.modules;
    const size2 = rows.length;
    for (const [y, row] of rows.entries()) {
      let rect;
      for (const [x2, on] of row.entries()) {
        if (on) {
          if (!rect)
            rect = { x: x2, y, width: 0, height: 1 };
          rect.width++;
        } else {
          if (rect && rect.width > 0) {
            rects.push(rect);
          }
          rect = void 0;
        }
      }
      if (rect && rect.width > 0) {
        rects.push(rect);
      }
    }
    const svg = [
      `<svg xmlns="http://www.w3.org/2000/svg" width="300" viewBox="0 0 ${size2} ${size2}">`
    ];
    for (const { x: x2, y, width, height } of rects) {
      svg.push(`<rect x="${x2}" y="${y}" width="${width}" height="${height}" />`);
    }
    svg.push("</svg>");
    return svg.join("");
  } catch (e) {
    console.log("Could not render QR code: ", e);
  }
}
function add_css$9(target) {
  append_styles(target, "svelte-vj0cjm", ".wrapper.svelte-vj0cjm.svelte-vj0cjm{position:relative;display:grid;background:var(--body-background-color);border-radius:var(--space-s);padding:var(--space-m);box-shadow:var(--qr-border-color);margin-bottom:var(--space-xs)}.qr.svelte-vj0cjm.svelte-vj0cjm{display:flex}.qr.svelte-vj0cjm svg{border-radius:var(--space-2xs);padding:var(--space-xs);background:white;flex:1;width:100%}dialog.svelte-vj0cjm.svelte-vj0cjm{padding:0;border-radius:var(--space-2xs);border:none}dialog.svelte-vj0cjm .qr.svelte-vj0cjm{background-color:white;width:min(800px, 80vmin);border:none}.button-group.svelte-vj0cjm.svelte-vj0cjm{display:grid;grid-template-columns:1fr 1fr;justify-items:center;gap:var(--space-s);position:absolute;top:100%;width:100%;transform:translateY(-50%)}.button-group.svelte-vj0cjm button.svelte-vj0cjm{display:flex;align-items:center;gap:var(--space-xs);border:none;cursor:pointer;background:var(--body-background-color);color:var(--body-text-color);font-size:var(--fs-0)}@media(max-width: 340px){.button-group.svelte-vj0cjm button span.svelte-vj0cjm:last-of-type{display:none}}.icon.svelte-vj0cjm.svelte-vj0cjm{display:grid;place-content:center;grid-template-areas:'stack'}.icon.svelte-vj0cjm>.svelte-vj0cjm{grid-area:stack}.check.svelte-vj0cjm.svelte-vj0cjm{background:var(--body-background-color)}");
}
function create_if_block$7(ctx) {
  let div4;
  let t0;
  let div3;
  let t1;
  let button;
  let div1;
  let div0;
  let icon;
  let t2;
  let t3;
  let div2;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*$qrcode*/
    ctx[3] && create_if_block_3$2(ctx)
  );
  let if_block1 = (
    /*$qrcode*/
    ctx[3] && create_if_block_2$4(ctx)
  );
  icon = new Icon({
    props: { name: "copy", size: "var(--space-m)" }
  });
  let if_block2 = (
    /*copied*/
    ctx[2] && create_if_block_1$4()
  );
  return {
    c() {
      div4 = element("div");
      if (if_block0) if_block0.c();
      t0 = space();
      div3 = element("div");
      if (if_block1) if_block1.c();
      t1 = space();
      button = element("button");
      div1 = element("div");
      div0 = element("div");
      create_component(icon.$$.fragment);
      t2 = space();
      if (if_block2) if_block2.c();
      t3 = space();
      div2 = element("div");
      div2.innerHTML = `<span class="svelte-vj0cjm">Copy</span> <span class="svelte-vj0cjm">to clipboard</span>`;
      attr(div0, "class", "svelte-vj0cjm");
      attr(div1, "class", "icon svelte-vj0cjm");
      attr(button, "class", "copy svelte-vj0cjm");
      attr(div3, "class", "button-group svelte-vj0cjm");
      attr(div4, "class", "wrapper svelte-vj0cjm");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      if (if_block0) if_block0.m(div4, null);
      append(div4, t0);
      append(div4, div3);
      if (if_block1) if_block1.m(div3, null);
      append(div3, t1);
      append(div3, button);
      append(button, div1);
      append(div1, div0);
      mount_component(icon, div0, null);
      append(div1, t2);
      if (if_block2) if_block2.m(div1, null);
      append(button, t3);
      append(button, div2);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[11]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*$qrcode*/
        ctx2[3]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_3$2(ctx2);
          if_block0.c();
          if_block0.m(div4, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*$qrcode*/
        ctx2[3]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*$qrcode*/
          8) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_2$4(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div3, t1);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (
        /*copied*/
        ctx2[2]
      ) {
        if (if_block2) {
          if (dirty & /*copied*/
          4) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_1$4();
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div1, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block1);
      transition_in(icon.$$.fragment, local);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      transition_out(icon.$$.fragment, local);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div4);
      }
      if (if_block0) if_block0.d();
      if (if_block1) if_block1.d();
      destroy_component(icon);
      if (if_block2) if_block2.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_3$2(ctx) {
  let div;
  let t2;
  let dialog_1;
  let button;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      t2 = space();
      dialog_1 = element("dialog");
      button = element("button");
      attr(div, "class", "main qr svelte-vj0cjm");
      attr(button, "class", "qr svelte-vj0cjm");
      attr(dialog_1, "class", "svelte-vj0cjm");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      div.innerHTML = /*$qrcode*/
      ctx[3];
      insert(target, t2, anchor);
      insert(target, dialog_1, anchor);
      append(dialog_1, button);
      button.innerHTML = /*$qrcode*/
      ctx[3];
      ctx[10](dialog_1);
      if (!mounted) {
        dispose = [
          listen(
            button,
            "click",
            /*collapse*/
            ctx[6]
          ),
          listen(dialog_1, "click", self$1(
            /*backgroundClose*/
            ctx[7]
          )),
          listen(dialog_1, "keydown", stop_propagation(prevent_default(
            /*escapeClose*/
            ctx[8]
          )), true)
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*$qrcode*/
      8) div.innerHTML = /*$qrcode*/
      ctx2[3];
      if (dirty & /*$qrcode*/
      8) button.innerHTML = /*$qrcode*/
      ctx2[3];
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t2);
        detach(dialog_1);
      }
      ctx[10](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_2$4(ctx) {
  let button;
  let icon;
  let t0;
  let div;
  let current;
  let mounted;
  let dispose;
  icon = new Icon({
    props: { name: "expand", size: "var(--space-m)" }
  });
  return {
    c() {
      button = element("button");
      create_component(icon.$$.fragment);
      t0 = space();
      div = element("div");
      div.innerHTML = `<span class="svelte-vj0cjm">Expand</span> <span class="svelte-vj0cjm">QR code</span>`;
      attr(button, "class", "expand svelte-vj0cjm");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(icon, button, null);
      append(button, t0);
      append(button, div);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*toggleExpanded*/
          ctx[5]
        );
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current) return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1$4(ctx) {
  let div;
  let icon;
  let div_transition;
  let current;
  icon = new Icon({
    props: { name: "check", size: "var(--space-m)" }
  });
  return {
    c() {
      div = element("div");
      create_component(icon.$$.fragment);
      attr(div, "class", "check svelte-vj0cjm");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(icon, div, null);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(icon.$$.fragment, local);
      if (local) {
        add_render_callback(() => {
          if (!current) return;
          if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 180, easing: cubicInOut }, true);
          div_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      if (local) {
        if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 180, easing: cubicInOut }, false);
        div_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
      if (detaching && div_transition) div_transition.end();
    }
  };
}
function create_fragment$e(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*data*/
    ctx[0] && create_if_block$7(ctx)
  );
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*data*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*data*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$7(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function instance$e($$self, $$props, $$invalidate) {
  let $qrcode;
  let { data = "" } = $$props;
  let dialog;
  let expanded = false;
  let copied = false;
  const qrcode = writable();
  component_subscribe($$self, qrcode, (value) => $$invalidate(3, $qrcode = value));
  onMount(() => {
    try {
      qrcode.set(generate(data));
    } catch (e) {
      console.error("Error rendering QR code", e);
    }
  });
  const toggleExpanded = () => {
    if (expanded) {
      collapse();
    } else {
      expanded = true;
      dialog.showModal();
    }
  };
  const collapse = () => {
    dialog.close();
    expanded = false;
  };
  function backgroundClose(event) {
    var rect = dialog.getBoundingClientRect();
    var isInDialog = rect.top <= event.clientY && event.clientY <= rect.top + rect.height && rect.left <= event.clientX && event.clientX <= rect.left + rect.width;
    if (!isInDialog) {
      collapse();
    }
  }
  function escapeClose(event) {
    if (event.key === "Escape") {
      collapse();
    }
  }
  function copyToClipboard(data2) {
    if (!navigator.clipboard) return;
    navigator.clipboard.writeText(data2);
    $$invalidate(2, copied = true);
    setTimeout(() => $$invalidate(2, copied = false), 1200);
  }
  function dialog_1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      dialog = $$value;
      $$invalidate(1, dialog);
    });
  }
  const click_handler = () => copyToClipboard(data);
  $$self.$$set = ($$props2) => {
    if ("data" in $$props2) $$invalidate(0, data = $$props2.data);
  };
  return [
    data,
    dialog,
    copied,
    $qrcode,
    qrcode,
    toggleExpanded,
    collapse,
    backgroundClose,
    escapeClose,
    copyToClipboard,
    dialog_1_binding,
    click_handler
  ];
}
class Qr extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$e, create_fragment$e, safe_not_equal, { data: 0 }, add_css$9);
  }
}
function add_css$8(target) {
  append_styles(target, "svelte-1gpx2bs", '.wrapper.svelte-1gpx2bs{position:relative;display:flex;display:grid;background-color:var(--text-area-background);border-radius:var(--border-radius-inner);overflow:hidden}textarea.svelte-1gpx2bs{--rows:9;flex:1;color:var(--text-area-text-color);background-color:var(--text-area-background);border:none;font-size:var(--fs-0);font-weight:400;line-height:1.5;resize:none;opacity:0.75;height:calc(var(--fs-0) * 1.5 * var(--rows) - var(--fs-0) * 1.5 * 0.5);border-radius:inherit;padding-inline-start:var(--space-m);padding-block-start:var(--space-m)}.wrapper.svelte-1gpx2bs::before,.wrapper.svelte-1gpx2bs::after{content:"";display:block;position:absolute;z-index:2;width:100%;height:var(--space-l);background:linear-gradient(var(--deg), transparent, black 100%)}.wrapper.svelte-1gpx2bs::before{--deg:0;top:0;opacity:var(--top-shadow-opacity, 0)}.wrapper.svelte-1gpx2bs::after{--deg:180deg;bottom:0;opacity:var(--bottom-shadow-opacity, 0)}');
}
function create_fragment$d(ctx) {
  let div;
  let textarea_1;
  let textarea_1_value_value;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      textarea_1 = element("textarea");
      textarea_1.readOnly = true;
      textarea_1.value = textarea_1_value_value = /*data*/
      ctx[0].content;
      attr(textarea_1, "class", "svelte-1gpx2bs");
      attr(div, "class", "wrapper svelte-1gpx2bs");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, textarea_1);
      ctx[4](textarea_1);
      ctx[5](div);
      if (!mounted) {
        dispose = listen(
          textarea_1,
          "scroll",
          /*handleScroll*/
          ctx[3]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*data*/
      1 && textarea_1_value_value !== (textarea_1_value_value = /*data*/
      ctx2[0].content)) {
        textarea_1.value = textarea_1_value_value;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      ctx[4](null);
      ctx[5](null);
      mounted = false;
      dispose();
    }
  };
}
let maxOpacity = 0.2;
function instance$d($$self, $$props, $$invalidate) {
  let { data = {} } = $$props;
  let wrapper;
  let textarea;
  function handleScroll(event) {
    let scrollMax = event.target.scrollHeight - event.target.clientHeight;
    let currentScroll = event.target.scrollTop / scrollMax;
    let topShadowOpacity = currentScroll * maxOpacity;
    let bottomShadowOpacity = (1 - currentScroll) * maxOpacity;
    wrapper.style.setProperty("--top-shadow-opacity", topShadowOpacity);
    wrapper.style.setProperty("--bottom-shadow-opacity", bottomShadowOpacity);
  }
  onMount(() => {
    let startingOpacity = (1 - textarea.scrollTop / (textarea.scrollHeight - textarea.clientHeight)) * maxOpacity;
    wrapper.style.setProperty("--bottom-shadow-opacity", startingOpacity);
  });
  function textarea_1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      textarea = $$value;
      $$invalidate(2, textarea);
    });
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      wrapper = $$value;
      $$invalidate(1, wrapper);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("data" in $$props2) $$invalidate(0, data = $$props2.data);
  };
  return [data, wrapper, textarea, handleScroll, textarea_1_binding, div_binding];
}
class Textarea extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$d, create_fragment$d, safe_not_equal, { data: 0 }, add_css$8);
  }
}
function add_css$7(target) {
  append_styles(target, "svelte-1kd5uy1", ".prompt.svelte-1kd5uy1{display:flex;flex-direction:column;gap:var(--space-m);gap:var(--space-l)}.text.svelte-1kd5uy1{display:flex;flex-direction:column;gap:var(--space-s);text-align:center}");
}
function get_each_context$2(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i2];
  return child_ctx;
}
function create_default_slot_1$5(ctx) {
  let t_value = (
    /*$prompt*/
    ctx[0]?.args.title + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$prompt*/
      1 && t_value !== (t_value = /*$prompt*/
      ctx2[0]?.args.title + "")) set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_default_slot$6(ctx) {
  let t_value = (
    /*$prompt*/
    ctx[0]?.args.body + ""
  );
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$prompt*/
      1 && t_value !== (t_value = /*$prompt*/
      ctx2[0]?.args.body + "")) set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_each_block$2(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  const switch_instance_spread_levels = [
    /*component*/
    ctx[6].props
  ];
  var switch_value = (
    /*component*/
    ctx[6].component
  );
  function switch_props(ctx2, dirty) {
    let switch_instance_props = {};
    if (dirty !== void 0 && dirty & /*$elements*/
    2) {
      switch_instance_props = get_spread_update(switch_instance_spread_levels, [get_spread_object(
        /*component*/
        ctx2[6].props
      )]);
    } else {
      for (let i2 = 0; i2 < switch_instance_spread_levels.length; i2 += 1) {
        switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i2]);
      }
    }
    return { props: switch_instance_props };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    switch_instance.$on(
      "complete",
      /*complete_handler*/
      ctx[4]
    );
    switch_instance.$on(
      "cancel",
      /*cancel_handler*/
      ctx[5]
    );
  }
  return {
    c() {
      if (switch_instance) create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    m(target, anchor) {
      if (switch_instance) mount_component(switch_instance, target, anchor);
      insert(target, switch_instance_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*$elements*/
      2 && switch_value !== (switch_value = /*component*/
      ctx2[6].component)) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
          switch_instance.$on(
            "complete",
            /*complete_handler*/
            ctx2[4]
          );
          switch_instance.$on(
            "cancel",
            /*cancel_handler*/
            ctx2[5]
          );
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        const switch_instance_changes = dirty & /*$elements*/
        2 ? get_spread_update(switch_instance_spread_levels, [get_spread_object(
          /*component*/
          ctx2[6].props
        )]) : {};
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current) return;
      if (switch_instance) transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance) transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(switch_instance_anchor);
      }
      if (switch_instance) destroy_component(switch_instance, detaching);
    }
  };
}
function create_fragment$c(ctx) {
  let div1;
  let div0;
  let bodytitle;
  let t0;
  let bodytext;
  let t1;
  let current;
  bodytitle = new BodyTitle({
    props: {
      $$slots: { default: [create_default_slot_1$5] },
      $$scope: { ctx }
    }
  });
  bodytext = new BodyText({
    props: {
      $$slots: { default: [create_default_slot$6] },
      $$scope: { ctx }
    }
  });
  let each_value = ensure_array_like(
    /*$elements*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$2(get_each_context$2(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      create_component(bodytitle.$$.fragment);
      t0 = space();
      create_component(bodytext.$$.fragment);
      t1 = space();
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      attr(div0, "class", "text svelte-1kd5uy1");
      attr(div1, "class", "prompt svelte-1kd5uy1");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      mount_component(bodytitle, div0, null);
      append(div0, t0);
      mount_component(bodytext, div0, null);
      append(div1, t1);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(div1, null);
        }
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      const bodytitle_changes = {};
      if (dirty & /*$$scope, $prompt*/
      513) {
        bodytitle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      bodytitle.$set(bodytitle_changes);
      const bodytext_changes = {};
      if (dirty & /*$$scope, $prompt*/
      513) {
        bodytext_changes.$$scope = { dirty, ctx: ctx2 };
      }
      bodytext.$set(bodytext_changes);
      if (dirty & /*$elements, dispatch*/
      10) {
        each_value = ensure_array_like(
          /*$elements*/
          ctx2[1]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$2(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$2(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(div1, null);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(bodytitle.$$.fragment, local);
      transition_in(bodytext.$$.fragment, local);
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      transition_out(bodytitle.$$.fragment, local);
      transition_out(bodytext.$$.fragment, local);
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(bodytitle);
      destroy_component(bodytext);
      destroy_each(each_blocks, detaching);
    }
  };
}
function instance$c($$self, $$props, $$invalidate) {
  let $prompt;
  let $elements;
  component_subscribe($$self, prompt, ($$value) => $$invalidate(0, $prompt = $$value));
  const elements = derived(prompt, ($prompt2) => {
    const components = [];
    if ($prompt2) {
      $prompt2.args.elements.forEach((element2) => {
        switch (element2.type) {
          case "accept": {
            components.push({
              component: Accept,
              props: { data: element2.data }
            });
            break;
          }
          case "asset": {
            components.push({
              component: Asset2,
              props: { data: element2.data }
            });
            break;
          }
          case "close": {
            components.push({
              component: Close,
              props: { label: element2.label }
            });
            break;
          }
          case "link": {
            components.push({
              component: Link,
              props: { data: element2.data }
            });
            break;
          }
          case "qr": {
            components.push({
              component: Qr,
              props: { data: element2.data }
            });
            break;
          }
          case "countdown": {
            components.push({
              component: Countdown,
              props: { data: element2.data }
            });
            break;
          }
          case "textarea": {
            components.push({
              component: Textarea,
              props: { data: element2.data }
            });
            break;
          }
          case "button": {
            components.push({
              component: Button,
              props: { data: element2.data }
            });
            break;
          }
          default: {
            throw new Error(`Unknown element type: ${element2.type}`);
          }
        }
      });
    }
    return components;
  });
  component_subscribe($$self, elements, (value) => $$invalidate(1, $elements = value));
  const dispatch2 = createEventDispatcher();
  const complete_handler = () => dispatch2("complete");
  const cancel_handler = () => dispatch2("cancel");
  return [$prompt, $elements, elements, dispatch2, complete_handler, cancel_handler];
}
class Prompt extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$c, create_fragment$c, safe_not_equal, {}, add_css$7);
  }
}
var version = "1.4.2";
function add_css$6(target) {
  append_styles(target, "svelte-tj2pg7", "div.svelte-tj2pg7{display:flex;flex-direction:column;align-items:center;justify-content:center;gap:var(--space-m)}svg.svelte-tj2pg7{height:auto;width:100%;max-width:200px}");
}
function create_else_block$2(ctx) {
  let svg;
  let path0;
  let path1;
  let path2;
  let path3;
  let path4;
  let path5;
  let path6;
  let path7;
  let path8;
  let path9;
  let path10;
  let path11;
  return {
    c() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      path2 = svg_element("path");
      path3 = svg_element("path");
      path4 = svg_element("path");
      path5 = svg_element("path");
      path6 = svg_element("path");
      path7 = svg_element("path");
      path8 = svg_element("path");
      path9 = svg_element("path");
      path10 = svg_element("path");
      path11 = svg_element("path");
      attr(path0, "d", "M273.403 84.085C273.403 83.4185 272.851 82.8783 272.171 82.8783H265.007C264.327 82.8783 263.775 83.4185 263.775 84.085V106.927C263.775 110.163 263.082 112.365 261.908 113.745C260.77 115.083 259.014 115.841 256.4 115.841C253.723 115.841 251.923 115.078 250.76 113.737C249.564 112.357 248.859 110.158 248.859 106.927V96.1519C248.859 95.4854 248.307 94.9452 247.627 94.9452H240.408C239.727 94.9452 239.175 95.4854 239.175 96.1519V106.927C239.175 110.16 238.474 112.36 237.286 113.74C236.131 115.08 234.345 115.841 231.689 115.841C229.131 115.841 227.36 115.114 226.172 113.816C225.018 112.514 224.315 110.304 224.315 106.927V84.085C224.315 83.4185 223.763 82.8783 223.082 82.8783H215.863C215.183 82.8783 214.631 83.4185 214.631 84.085V107.148C214.631 112.616 216.054 116.982 219.088 120.045C222.122 123.107 226.385 124.559 231.689 124.559C234.557 124.559 237.131 124.116 239.384 123.194L239.394 123.19C241.185 122.439 242.729 121.465 244.007 120.261C245.263 121.467 246.796 122.44 248.585 123.19L248.609 123.2C250.927 124.115 253.531 124.559 256.4 124.559C261.699 124.559 265.947 123.129 268.946 120.1C271.982 117.036 273.403 112.65 273.403 107.148V84.085Z");
      attr(path0, "fill", "#494E62");
      attr(path1, "d", "M326.457 84.085C326.457 83.4185 325.905 82.8783 325.224 82.8783H318.005C317.325 82.8783 316.773 83.4185 316.773 84.085V98.8619H299.136V84.085C299.136 83.4185 298.584 82.8783 297.904 82.8783H290.685C290.004 82.8783 289.452 83.4185 289.452 84.085V122.8C289.452 123.466 290.004 124.006 290.685 124.006H297.904C298.584 124.006 299.136 123.466 299.136 122.8V107.414H316.773V122.8C316.773 123.466 317.325 124.006 318.005 124.006H325.224C325.905 124.006 326.457 123.466 326.457 122.8V84.085Z");
      attr(path1, "fill", "#494E62");
      attr(path2, "fill-rule", "evenodd");
      attr(path2, "clip-rule", "evenodd");
      attr(path2, "d", "M378.176 124.006C378.857 124.006 379.408 123.466 379.408 122.8V101.341C379.408 97.4001 378.66 93.9713 377.103 91.1039C375.588 88.2098 373.417 86.0002 370.597 84.5155C367.796 83.0409 364.552 82.3252 360.906 82.3252C357.26 82.3252 354.016 83.0409 351.215 84.5155C348.395 86.0002 346.206 88.2088 344.655 91.1009L344.652 91.1063C343.133 93.9728 342.404 97.4004 342.404 101.341V122.8C342.404 123.466 342.955 124.006 343.636 124.006H350.744C351.425 124.006 351.977 123.466 351.977 122.8V114.051H369.724V122.8C369.724 123.466 370.276 124.006 370.957 124.006H378.176ZM367.395 93.4304L367.404 93.4391C368.88 94.9405 369.724 97.2793 369.724 100.677V105.609H351.977V100.677C351.977 97.2793 352.821 94.9405 354.297 93.4392L354.306 93.4303C355.798 91.882 357.923 91.0435 360.85 91.0435C363.778 91.0435 365.903 91.882 367.395 93.4304Z");
      attr(path2, "fill", "#494E62");
      attr(path3, "fill-rule", "evenodd");
      attr(path3, "clip-rule", "evenodd");
      attr(path3, "d", "M421.019 123.482C421.249 123.81 421.63 124.006 422.036 124.006H429.81C430.268 124.006 430.688 123.758 430.901 123.361C431.114 122.964 431.085 122.485 430.826 122.116L422.723 110.587C424.933 109.494 426.707 107.983 428.005 106.045C429.603 103.717 430.376 100.969 430.376 97.8563C430.376 94.8268 429.663 92.1432 428.187 89.8559C426.712 87.5705 424.59 85.837 421.877 84.6445C419.204 83.4531 416.099 82.8783 412.596 82.8783H396.603C395.923 82.8783 395.371 83.4185 395.371 84.085V122.8C395.371 123.466 395.923 124.006 396.603 124.006H403.822C404.503 124.006 405.055 123.466 405.055 122.8V112.724H412.596C412.917 112.724 413.212 112.72 413.475 112.711L421.019 123.482ZM418.638 93.0871C419.931 94.1409 420.637 95.6687 420.637 97.8563C420.637 100.039 419.933 101.592 418.631 102.686C417.309 103.76 415.252 104.393 412.263 104.393H405.055V91.3754H412.263C415.256 91.3754 417.315 92.0098 418.638 93.0871Z");
      attr(path3, "fill", "#494E62");
      attr(path4, "d", "M453.668 122.8V109.184H469.372C470.053 109.184 470.605 108.644 470.605 107.977V101.894C470.605 101.227 470.053 100.687 469.372 100.687H453.668V98.5753C453.668 95.9375 454.441 94.1359 455.807 92.9529C457.199 91.7469 459.374 91.0435 462.542 91.0435C465.829 91.0435 468.452 91.7903 470.494 93.201C470.805 93.416 471.2 93.478 471.565 93.3691C471.929 93.2601 472.221 92.9924 472.357 92.6438L474.634 86.7813C474.839 86.251 474.64 85.6517 474.155 85.3418C472.582 84.3375 470.769 83.5885 468.732 83.0814C466.697 82.5746 464.521 82.3252 462.209 82.3252C456.701 82.3252 452.209 83.729 448.887 86.6749C445.583 89.6004 443.984 93.6202 443.984 98.5753V122.8C443.984 123.466 444.536 124.006 445.217 124.006H452.436C453.116 124.006 453.668 123.466 453.668 122.8Z");
      attr(path4, "fill", "#494E62");
      attr(path5, "d", "M177.58 117.515C177.507 121.507 174.869 124.279 172.268 125.782L166.67 129.016C163.999 130.559 160.875 131.159 158.077 131.159C155.278 131.159 152.155 130.559 149.485 129.016L143.994 125.782V136.762C143.994 140.829 141.316 143.664 138.68 145.188L133.083 148.422C130.411 149.965 127.288 150.565 124.489 150.565C121.69 150.565 118.567 149.965 115.897 148.422L107.695 143.683L99.495 148.422C96.8235 149.965 93.7002 150.565 90.9014 150.565C88.1027 150.565 84.9808 149.965 82.3093 148.422L43.1243 125.782C40.523 124.279 37.8851 121.507 37.812 117.515L37.8105 117.269V131.648L37.812 131.895C37.8851 135.886 40.523 138.659 43.1243 140.161L82.3093 162.801C84.9808 164.344 88.1027 164.944 90.9014 164.944C93.7002 164.944 96.8235 164.344 99.495 162.801L107.695 158.063L115.897 162.801C118.567 164.344 121.69 164.944 124.489 164.944C127.288 164.944 130.411 164.344 133.083 162.801L138.68 159.567C141.316 158.044 143.994 155.209 143.994 151.142V140.161L149.485 143.396C152.155 144.939 155.278 145.538 158.077 145.538C160.875 145.538 163.999 144.939 166.67 143.396L172.268 140.161C174.869 138.659 177.507 135.886 177.58 131.895L177.58 117.515Z");
      attr(path5, "fill", "#F4FAF4");
      attr(path6, "d", "M37.8456 103.768C37.8224 103.982 37.8105 104.199 37.8105 104.419V117.268L37.812 117.515C37.8851 121.507 40.523 124.279 43.1243 125.782L82.3093 148.422C84.9808 149.964 88.1027 150.564 90.9014 150.564C93.7002 150.564 96.8235 149.964 99.495 148.422L107.695 143.683L115.897 148.422C118.567 149.964 121.69 150.564 124.489 150.564C127.288 150.564 130.411 149.964 133.083 148.422L138.68 145.187C141.316 143.664 143.994 140.829 143.994 136.762V125.782L149.484 129.016C152.155 130.559 155.278 131.159 158.077 131.159C160.875 131.159 163.999 130.559 166.67 129.016L172.268 125.782C174.869 124.279 177.507 121.507 177.58 117.515V103.136C177.506 107.127 174.869 109.899 172.268 111.402L166.67 114.636C163.999 116.179 160.875 116.779 158.077 116.779C155.278 116.779 152.155 116.179 149.484 114.636L143.887 111.402C143.797 111.35 143.707 111.296 143.617 111.241C143.86 112.035 143.997 112.892 143.997 113.813C143.997 114.082 143.985 114.346 143.962 114.604C143.983 114.807 143.994 115.012 143.994 115.219V122.382C143.994 126.449 141.316 129.284 138.68 130.808L133.083 134.042C130.411 135.585 127.288 136.184 124.489 136.184C121.69 136.184 118.567 135.585 115.897 134.042L107.695 129.303L99.495 134.042C96.8235 135.585 93.7002 136.184 90.9014 136.184C88.1027 136.184 84.9808 135.585 82.3093 134.042L43.1243 111.402C40.6627 109.98 38.1684 107.421 37.8456 103.768Z");
      attr(path6, "fill", "#B2F2E1");
      attr(path7, "d", "M105.024 64.9883C105.03 65.0464 105.036 65.1046 105.043 65.1627C105.324 67.5849 106.527 69.4925 108.024 70.9048C107.915 70.903 107.807 70.9021 107.699 70.9021C106.824 70.9021 105.918 70.9607 105.003 71.0884V65.4957C105.003 65.3248 105.01 65.1556 105.024 64.9883Z");
      attr(path7, "fill", "#B2F2E1");
      attr(path8, "d", "M48.7253 82.7478L43.1274 85.9821C40.6334 87.423 38.1038 90.037 37.837 93.7573C37.8195 93.932 37.8105 94.1145 37.8105 94.3053V102.889L37.812 103.135C37.8851 107.127 40.523 109.899 43.1243 111.402L82.3093 134.042C84.9808 135.585 88.1027 136.185 90.9014 136.185C93.7001 136.185 96.8235 135.585 99.495 134.042L107.695 129.304L115.897 134.042C118.567 135.585 121.69 136.185 124.489 136.185C127.288 136.185 130.411 135.585 133.083 134.042L138.68 130.808C141.316 129.284 143.994 126.45 143.994 122.382V115.219C143.994 115.012 143.983 114.807 143.962 114.605C143.985 114.346 143.997 114.082 143.997 113.813C143.997 112.892 143.86 112.035 143.617 111.241C143.707 111.296 143.797 111.35 143.887 111.402L149.484 114.636C152.155 116.179 155.278 116.779 158.077 116.779C160.875 116.779 163.999 116.179 166.67 114.636L172.268 111.402C174.869 109.899 177.507 107.127 177.58 103.135V94.6923C177.583 94.5981 177.584 94.5031 177.584 94.4075C177.584 94.3119 177.583 94.217 177.58 94.1228L177.581 75.2371C177.583 75.1592 177.584 75.0808 177.584 75.0019C177.584 70.9348 174.908 68.0999 172.271 66.5765L133.085 43.9366C130.415 42.3936 127.292 41.7939 124.493 41.7939C121.694 41.7939 118.571 42.3936 115.9 43.9366L110.303 47.1708C107.666 48.6943 104.989 51.5291 104.989 55.5963C104.989 55.788 104.995 55.9769 105.006 56.1631C105.004 56.2285 105.003 56.2944 105.003 56.3609V63.611C104.984 63.8988 104.981 64.1871 104.992 64.4752C104.999 64.7047 105.016 64.9341 105.043 65.163C105.324 67.5851 106.527 69.4928 108.024 70.9051C107.915 70.9033 107.807 70.9024 107.699 70.9024C104.9 70.9024 101.777 71.5021 99.1067 73.045L93.5087 76.2793C90.8719 77.8027 88.1951 80.6376 88.1951 84.7047C88.1951 84.9692 88.2065 85.2285 88.2284 85.4826C88.2236 85.5807 88.2212 85.6793 88.2212 85.7785V92.5656L88.2109 92.7314L88.2007 92.9128C88.1934 93.0894 88.1919 93.2661 88.1948 93.4428C88.2007 93.8112 88.2314 94.1794 88.2855 94.5454C88.3525 94.997 88.4513 95.4299 88.5777 95.8443L65.9101 82.7478C63.2396 81.2049 60.1164 80.6052 57.3177 80.6052C54.519 80.6052 51.3958 81.2049 48.7253 82.7478Z");
      attr(path8, "fill", "#7BE7CE");
      attr(path9, "d", "M130.088 49.1268C126.997 47.3406 121.984 47.3405 118.893 49.1268L113.295 52.3611C110.203 54.1473 110.203 57.0434 113.295 58.8296L151.801 81.0771C153.286 81.9349 154.12 83.0983 154.12 84.3114V85.0962C154.12 86.3092 153.286 87.4726 151.801 88.3304L146.882 91.1723C143.791 92.9586 143.791 95.8546 146.882 97.6409L152.48 100.875C155.572 102.661 160.584 102.661 163.676 100.875L169.274 97.6409C172.366 95.8546 172.366 92.9586 169.274 91.1723L164.355 88.3304C162.87 87.4726 162.036 86.3092 162.036 85.0962V84.3114C162.036 83.0983 162.87 81.9349 164.355 81.0771L169.274 78.2352C172.366 76.449 172.366 73.5529 169.274 71.7667L130.088 49.1268Z");
      attr(path9, "fill", "#494E62");
      attr(path10, "d", "M62.9133 87.938C59.8216 86.1518 54.8091 86.1518 51.7174 87.938L46.1195 91.1723C43.0279 92.9585 43.0279 95.8546 46.1195 97.6408L85.305 120.281C88.3967 122.067 93.4092 122.067 96.5009 120.281L107.697 113.812L62.9133 87.938Z");
      attr(path10, "fill", "#494E62");
      attr(path11, "d", "M128.449 104.502C128.449 105.715 129.283 106.878 130.768 107.736L135.686 110.578C138.778 112.364 138.778 115.26 135.686 117.046L130.088 120.281C126.997 122.067 121.984 122.067 118.893 120.281L107.697 113.812L118.213 107.736C119.698 106.878 120.532 105.715 120.532 104.502L120.532 103.717C120.532 102.504 119.698 101.341 118.213 100.483L96.5009 87.938C93.4092 86.1518 93.4092 83.2557 96.5009 81.4695L102.099 78.2352C105.19 76.449 110.203 76.449 113.295 78.2352L135.686 91.1723C138.778 92.9585 138.778 95.8546 135.686 97.6409L130.768 100.483C129.283 101.341 128.449 102.504 128.449 103.717L128.449 104.502Z");
      attr(path11, "fill", "#494E62");
      attr(svg, "width", "512");
      attr(svg, "height", "206");
      attr(svg, "viewBox", "0 0 512 206");
      attr(svg, "fill", "none");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "class", "svelte-tj2pg7");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path0);
      append(svg, path1);
      append(svg, path2);
      append(svg, path3);
      append(svg, path4);
      append(svg, path5);
      append(svg, path6);
      append(svg, path7);
      append(svg, path8);
      append(svg, path9);
      append(svg, path10);
      append(svg, path11);
    },
    d(detaching) {
      if (detaching) {
        detach(svg);
      }
    }
  };
}
function create_if_block$6(ctx) {
  let svg;
  let path0;
  let path1;
  let path2;
  let path3;
  let path4;
  let path5;
  let path6;
  let path7;
  let path8;
  let path9;
  let path10;
  let path11;
  return {
    c() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      path2 = svg_element("path");
      path3 = svg_element("path");
      path4 = svg_element("path");
      path5 = svg_element("path");
      path6 = svg_element("path");
      path7 = svg_element("path");
      path8 = svg_element("path");
      path9 = svg_element("path");
      path10 = svg_element("path");
      path11 = svg_element("path");
      attr(path0, "d", "M273.61 84.1001C273.61 83.4342 273.058 82.8944 272.378 82.8944H265.214C264.534 82.8944 263.982 83.4342 263.982 84.1001V106.924C263.982 110.157 263.289 112.358 262.115 113.737C260.978 115.074 259.221 115.831 256.607 115.831C253.93 115.831 252.13 115.069 250.967 113.728C249.771 112.35 249.066 110.153 249.066 106.924V96.1574C249.066 95.4915 248.514 94.9517 247.834 94.9517H240.615C239.934 94.9517 239.382 95.4915 239.382 96.1574V106.924C239.382 110.154 238.681 112.352 237.493 113.731C236.338 115.07 234.552 115.831 231.897 115.831C229.338 115.831 227.567 115.104 226.379 113.807C225.225 112.507 224.522 110.299 224.522 106.924V84.1001C224.522 83.4342 223.97 82.8944 223.289 82.8944H216.071C215.39 82.8944 214.838 83.4342 214.838 84.1001V107.145C214.838 112.609 216.261 116.971 219.295 120.031C222.329 123.091 226.593 124.542 231.897 124.542C234.764 124.542 237.338 124.099 239.591 123.178L239.601 123.174C241.392 122.423 242.936 121.451 244.214 120.248C245.47 121.452 247.003 122.424 248.792 123.174L248.816 123.184C251.134 124.098 253.738 124.542 256.607 124.542C261.906 124.542 266.154 123.113 269.153 120.086C272.189 117.025 273.61 112.643 273.61 107.145V84.1001Z");
      attr(path0, "fill", "white");
      attr(path1, "d", "M326.664 84.1001C326.664 83.4342 326.112 82.8944 325.431 82.8944H318.212C317.532 82.8944 316.98 83.4342 316.98 84.1001V98.8652H299.343V84.1001C299.343 83.4342 298.791 82.8944 298.111 82.8944H290.892C290.211 82.8944 289.659 83.4342 289.659 84.1001V122.784C289.659 123.45 290.211 123.99 290.892 123.99H298.111C298.791 123.99 299.343 123.45 299.343 122.784V107.411H316.98V122.784C316.98 123.45 317.532 123.99 318.212 123.99H325.431C326.112 123.99 326.664 123.45 326.664 122.784V84.1001Z");
      attr(path1, "fill", "white");
      attr(path2, "fill-rule", "evenodd");
      attr(path2, "clip-rule", "evenodd");
      attr(path2, "d", "M378.383 123.99C379.064 123.99 379.615 123.45 379.615 122.784V101.342C379.615 97.4046 378.867 93.9786 377.31 91.1134C375.795 88.2217 373.624 86.0139 370.804 84.5303C368.003 83.0569 364.759 82.3418 361.113 82.3418C357.467 82.3418 354.223 83.0569 351.422 84.5303C348.602 86.0138 346.413 88.2207 344.862 91.1105L344.859 91.1159C343.34 93.9801 342.611 97.4049 342.611 101.342V122.784C342.611 123.45 343.162 123.99 343.843 123.99H350.951C351.632 123.99 352.184 123.45 352.184 122.784V114.042H369.931V122.784C369.931 123.45 370.483 123.99 371.164 123.99H378.383ZM367.602 93.4381L367.611 93.4468C369.087 94.947 369.931 97.284 369.931 100.679V105.607H352.184V100.679C352.184 97.284 353.028 94.947 354.504 93.4469L354.513 93.438C356.005 91.891 358.13 91.0532 361.057 91.0532C363.985 91.0532 366.11 91.891 367.602 93.4381Z");
      attr(path2, "fill", "white");
      attr(path3, "fill-rule", "evenodd");
      attr(path3, "clip-rule", "evenodd");
      attr(path3, "d", "M421.226 123.466C421.456 123.794 421.837 123.99 422.243 123.99H430.017C430.475 123.99 430.895 123.741 431.108 123.345C431.321 122.949 431.292 122.469 431.033 122.1L422.93 110.581C425.14 109.488 426.914 107.979 428.212 106.043C429.81 103.717 430.583 100.971 430.583 97.8605C430.583 94.8334 429.87 92.152 428.394 89.8665C426.919 87.5829 424.797 85.8508 422.084 84.6593C419.411 83.4688 416.306 82.8944 412.803 82.8944H396.81C396.13 82.8944 395.578 83.4342 395.578 84.1001V122.784C395.578 123.45 396.13 123.99 396.81 123.99H404.029C404.71 123.99 405.262 123.45 405.262 122.784V112.716H412.803C413.124 112.716 413.419 112.712 413.682 112.703L421.226 123.466ZM418.845 93.0951C420.138 94.1481 420.844 95.6746 420.844 97.8605C420.844 100.042 420.14 101.594 418.838 102.686C417.516 103.76 415.459 104.391 412.47 104.391H405.262V91.3847H412.47C415.463 91.3847 417.522 92.0186 418.845 93.0951Z");
      attr(path3, "fill", "white");
      attr(path4, "d", "M453.875 122.784V109.179H469.579C470.26 109.179 470.812 108.639 470.812 107.973V101.895C470.812 101.229 470.26 100.689 469.579 100.689H453.875V98.5789C453.875 95.9432 454.648 94.1431 456.014 92.961C457.406 91.7559 459.581 91.0532 462.749 91.0532C466.036 91.0532 468.659 91.7993 470.701 93.2089C471.012 93.4237 471.408 93.4857 471.772 93.3768C472.136 93.268 472.428 93.0005 472.564 92.6522L474.841 86.7944C475.046 86.2644 474.847 85.6657 474.362 85.356C472.789 84.3525 470.976 83.6041 468.939 83.0974C466.904 82.5911 464.728 82.3418 462.416 82.3418C456.908 82.3418 452.417 83.7445 449.094 86.688C445.79 89.6112 444.191 93.6277 444.191 98.5789V122.784C444.191 123.45 444.743 123.99 445.424 123.99H452.643C453.323 123.99 453.875 123.45 453.875 122.784Z");
      attr(path4, "fill", "white");
      attr(path5, "d", "M177.787 117.503C177.714 121.492 175.076 124.262 172.475 125.763L166.877 128.995C164.206 130.537 161.082 131.136 158.284 131.136C155.485 131.136 152.362 130.537 149.692 128.995L144.201 125.763V136.735C144.201 140.799 141.523 143.631 138.887 145.154L133.29 148.385C130.618 149.927 127.495 150.526 124.696 150.526C121.897 150.526 118.774 149.927 116.104 148.385L107.902 143.651L99.702 148.385C97.0305 149.927 93.9072 150.526 91.1085 150.526C88.3098 150.526 85.1879 149.927 82.5164 148.385L43.3313 125.763C40.73 124.262 38.0922 121.492 38.019 117.503L38.0176 117.257V131.625L38.019 131.871C38.0922 135.86 40.73 138.63 43.3313 140.131L82.5164 162.753C85.1879 164.295 88.3098 164.894 91.1085 164.894C93.9072 164.894 97.0305 164.295 99.702 162.753L107.902 158.018L116.104 162.753C118.774 164.295 121.897 164.894 124.696 164.894C127.495 164.894 130.618 164.295 133.29 162.753L138.887 159.521C141.523 157.999 144.201 155.167 144.201 151.103V140.131L149.692 143.363C152.362 144.905 155.485 145.504 158.284 145.504C161.082 145.504 164.206 144.905 166.877 143.363L172.475 140.131C175.076 138.63 177.714 135.86 177.787 131.871L177.787 117.503Z");
      attr(path5, "fill", "#7BE7CE");
      attr(path6, "d", "M38.0526 103.767C38.0295 103.981 38.0176 104.198 38.0176 104.418V117.257L38.019 117.503C38.0922 121.492 40.73 124.262 43.3313 125.763L82.5164 148.385C85.1879 149.927 88.3097 150.526 91.1085 150.526C93.9072 150.526 97.0305 149.927 99.702 148.385L107.902 143.65L116.104 148.385C118.774 149.927 121.897 150.526 124.696 150.526C127.495 150.526 130.618 149.927 133.29 148.385L138.887 145.153C141.523 143.631 144.201 140.799 144.201 136.735V125.763L149.692 128.995C152.362 130.537 155.485 131.136 158.284 131.136C161.082 131.136 164.206 130.537 166.877 128.995L172.475 125.763C175.076 124.262 177.714 121.492 177.787 117.503V103.136C177.714 107.124 175.076 109.893 172.475 111.395L166.877 114.627C164.206 116.168 161.082 116.768 158.284 116.768C155.485 116.768 152.362 116.168 149.692 114.627L144.094 111.395C144.004 111.343 143.914 111.289 143.824 111.234C144.067 112.027 144.204 112.884 144.204 113.804C144.204 114.073 144.192 114.337 144.169 114.595C144.19 114.797 144.201 115.002 144.201 115.209V122.366C144.201 126.43 141.523 129.263 138.887 130.785L133.29 134.017C130.618 135.558 127.495 136.158 124.696 136.158C121.897 136.158 118.774 135.558 116.104 134.017L107.902 129.282L99.702 134.017C97.0305 135.558 93.9072 136.158 91.1085 136.158C88.3097 136.158 85.1879 135.558 82.5164 134.017L43.3313 111.395C40.8698 109.974 38.3755 107.417 38.0526 103.767Z");
      attr(path6, "fill", "#B2F2E1");
      attr(path7, "d", "M105.231 65.0186C105.237 65.0767 105.243 65.1348 105.25 65.1928C105.531 67.6131 106.734 69.5192 108.231 70.9303C108.122 70.9285 108.014 70.9276 107.906 70.9276C107.031 70.9276 106.125 70.9862 105.21 71.1138V65.5255C105.21 65.3548 105.217 65.1857 105.231 65.0186Z");
      attr(path7, "fill", "#B2F2E1");
      attr(path8, "d", "M48.9324 82.7639L43.3344 85.9955C40.8405 87.4353 38.3108 90.0472 38.044 93.7645C38.0265 93.939 38.0176 94.1214 38.0176 94.312V102.889L38.019 103.135C38.0922 107.124 40.73 109.894 43.3313 111.395L82.5164 134.017C85.1879 135.559 88.3097 136.158 91.1085 136.158C93.9072 136.158 97.0305 135.559 99.702 134.017L107.902 129.282L116.104 134.017C118.774 135.559 121.897 136.158 124.696 136.158C127.495 136.158 130.618 135.559 133.29 134.017L138.887 130.785C141.523 129.263 144.201 126.431 144.201 122.367V115.209C144.201 115.003 144.19 114.798 144.169 114.595C144.192 114.337 144.204 114.073 144.204 113.804C144.204 112.884 144.067 112.027 143.824 111.235C143.914 111.29 144.004 111.343 144.094 111.395L149.692 114.627C152.362 116.169 155.485 116.768 158.284 116.768C161.082 116.768 164.206 116.169 166.877 114.627L172.475 111.395C175.076 109.894 177.714 107.124 177.787 103.135V94.6988C177.79 94.6046 177.791 94.5098 177.791 94.4142C177.791 94.3187 177.79 94.2239 177.787 94.1297L177.788 75.2591C177.79 75.1813 177.791 75.103 177.791 75.0242C177.791 70.9603 175.115 68.1277 172.478 66.6055L133.292 43.9837C130.622 42.442 127.499 41.8428 124.7 41.8428C121.901 41.8428 118.778 42.442 116.107 43.9837L110.51 47.2154C107.873 48.7376 105.196 51.5702 105.196 55.6341C105.196 55.8256 105.202 56.0144 105.214 56.2005C105.211 56.2658 105.21 56.3317 105.21 56.3981V63.6424C105.191 63.9299 105.188 64.218 105.199 64.5058C105.206 64.7352 105.223 64.9644 105.25 65.1931C105.531 67.6133 106.734 69.5194 108.231 70.9306C108.122 70.9288 108.014 70.9279 107.906 70.9279C105.107 70.9279 101.984 71.5271 99.3137 73.0688L93.7158 76.3005C91.0789 77.8227 88.4022 80.6553 88.4022 84.7192C88.4022 84.9835 88.4135 85.2426 88.4354 85.4964C88.4306 85.5945 88.4282 85.693 88.4282 85.7922V92.5738L88.4179 92.7394L88.4077 92.9207C88.4004 93.0971 88.3989 93.2737 88.4019 93.4503C88.4077 93.8184 88.4384 94.1863 88.4925 94.552C88.5595 95.0033 88.6583 95.4358 88.7848 95.8499L66.1171 82.7639C63.4466 81.2222 60.3234 80.623 57.5247 80.623C54.726 80.623 51.6029 81.2222 48.9324 82.7639Z");
      attr(path8, "fill", "#F4FAF4");
      attr(path9, "d", "M130.295 49.1697C127.204 47.3849 122.191 47.3849 119.1 49.1697L113.502 52.4013C110.41 54.1862 110.41 57.0799 113.502 58.8647L152.008 81.0944C153.493 81.9515 154.327 83.114 154.327 84.3261V85.1102C154.327 86.3223 153.493 87.4848 152.008 88.3419L147.089 91.1815C143.998 92.9663 143.998 95.8601 147.089 97.6449L152.687 100.877C155.779 102.661 160.791 102.661 163.883 100.877L169.481 97.6449C172.573 95.8601 172.573 92.9663 169.481 91.1815L164.562 88.3419C163.077 87.4848 162.243 86.3224 162.243 85.1102V84.3261C162.243 83.114 163.077 81.9515 164.562 81.0944L169.481 78.2548C172.573 76.47 172.573 73.5762 169.481 71.7914L130.295 49.1697Z");
      attr(path9, "fill", "#494E62");
      attr(path10, "d", "M63.1203 87.9498C60.0287 86.165 55.0161 86.165 51.9245 87.9498L46.3265 91.1815C43.2349 92.9663 43.2349 95.8601 46.3265 97.6449L85.512 120.267C88.6037 122.051 93.6162 122.051 96.7079 120.267L107.904 113.803L63.1203 87.9498Z");
      attr(path10, "fill", "#494E62");
      attr(path11, "d", "M128.656 104.5C128.656 105.712 129.49 106.875 130.975 107.732L135.893 110.572C138.985 112.356 138.985 115.25 135.893 117.035L130.295 120.267C127.204 122.051 122.191 122.051 119.1 120.267L107.904 113.803L118.42 107.732C119.905 106.875 120.739 105.712 120.739 104.5L120.739 103.716C120.739 102.504 119.905 101.342 118.42 100.485L96.7079 87.9498C93.6162 86.165 93.6162 83.2713 96.7079 81.4865L102.306 78.2548C105.397 76.47 110.41 76.47 113.502 78.2548L135.893 91.1815C138.985 92.9663 138.985 95.8601 135.893 97.6449L130.975 100.485C129.49 101.342 128.656 102.504 128.656 103.716L128.656 104.5Z");
      attr(path11, "fill", "#494E62");
      attr(svg, "width", "513");
      attr(svg, "height", "206");
      attr(svg, "viewBox", "0 0 513 206");
      attr(svg, "fill", "none");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "class", "svelte-tj2pg7");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path0);
      append(svg, path1);
      append(svg, path2);
      append(svg, path3);
      append(svg, path4);
      append(svg, path5);
      append(svg, path6);
      append(svg, path7);
      append(svg, path8);
      append(svg, path9);
      append(svg, path10);
      append(svg, path11);
    },
    d(detaching) {
      if (detaching) {
        detach(svg);
      }
    }
  };
}
function create_default_slot_1$4(ctx) {
  let t_1_value = (
    /*$t*/
    ctx[1]("settings.about.version", { version }) + ""
  );
  let t_1;
  return {
    c() {
      t_1 = text(t_1_value);
    },
    m(target, anchor) {
      insert(target, t_1, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$t*/
      2 && t_1_value !== (t_1_value = /*$t*/
      ctx2[1]("settings.about.version", { version }) + "")) set_data(t_1, t_1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t_1);
      }
    }
  };
}
function create_default_slot$5(ctx) {
  let t_1_value = (
    /*$t*/
    ctx[1]("settings.about.author") + ""
  );
  let t_1;
  return {
    c() {
      t_1 = text(t_1_value);
    },
    m(target, anchor) {
      insert(target, t_1, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$t*/
      2 && t_1_value !== (t_1_value = /*$t*/
      ctx2[1]("settings.about.author") + "")) set_data(t_1, t_1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t_1);
      }
    }
  };
}
function create_fragment$b(ctx) {
  let div;
  let t0;
  let bodytitle;
  let t1;
  let bodytext;
  let t2;
  let link;
  let current;
  function select_block_type(ctx2, dirty) {
    if (
      /*theme*/
      ctx2[0] === "dark"
    ) return create_if_block$6;
    return create_else_block$2;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  bodytitle = new BodyTitle({
    props: {
      $$slots: { default: [create_default_slot_1$4] },
      $$scope: { ctx }
    }
  });
  bodytext = new BodyText({
    props: {
      $$slots: { default: [create_default_slot$5] },
      $$scope: { ctx }
    }
  });
  link = new Link({
    props: {
      data: {
        button: true,
        variant: "primary",
        label: (
          /*$t*/
          ctx[1]("settings.about.link")
        ),
        href: "https://wharfkit.com",
        target: "_blank"
      }
    }
  });
  return {
    c() {
      div = element("div");
      if_block.c();
      t0 = space();
      create_component(bodytitle.$$.fragment);
      t1 = space();
      create_component(bodytext.$$.fragment);
      t2 = space();
      create_component(link.$$.fragment);
      attr(div, "class", "svelte-tj2pg7");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_block.m(div, null);
      append(div, t0);
      mount_component(bodytitle, div, null);
      append(div, t1);
      mount_component(bodytext, div, null);
      append(div, t2);
      mount_component(link, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (current_block_type !== (current_block_type = select_block_type(ctx2))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div, t0);
        }
      }
      const bodytitle_changes = {};
      if (dirty & /*$$scope, $t*/
      10) {
        bodytitle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      bodytitle.$set(bodytitle_changes);
      const bodytext_changes = {};
      if (dirty & /*$$scope, $t*/
      10) {
        bodytext_changes.$$scope = { dirty, ctx: ctx2 };
      }
      bodytext.$set(bodytext_changes);
      const link_changes = {};
      if (dirty & /*$t*/
      2) link_changes.data = {
        button: true,
        variant: "primary",
        label: (
          /*$t*/
          ctx2[1]("settings.about.link")
        ),
        href: "https://wharfkit.com",
        target: "_blank"
      };
      link.$set(link_changes);
    },
    i(local) {
      if (current) return;
      transition_in(bodytitle.$$.fragment, local);
      transition_in(bodytext.$$.fragment, local);
      transition_in(link.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(bodytitle.$$.fragment, local);
      transition_out(bodytext.$$.fragment, local);
      transition_out(link.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_block.d();
      destroy_component(bodytitle);
      destroy_component(bodytext);
      destroy_component(link);
    }
  };
}
function instance$b($$self, $$props, $$invalidate) {
  let theme;
  let $t;
  const { t: t2 } = getContext("i18n");
  component_subscribe($$self, t2, (value) => $$invalidate(1, $t = value));
  $$invalidate(0, { theme } = get_store_value(settings$5), theme);
  return [theme, $t, t2];
}
class About extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$b, create_fragment$b, safe_not_equal, {}, add_css$6);
  }
}
var en$1 = "English";
var ko$1 = "한국어";
var zh = "中文";
var tr$1 = "Türkçe";
var lang = {
  en: en$1,
  ko: ko$1,
  zh,
  "zh-Hans": "中文简体",
  "zh-Hant": "中文繁体",
  tr: tr$1
};
function add_css$5(target) {
  append_styles(target, "svelte-yv3ifw", "label.svelte-yv3ifw{flex:1;height:100%;display:flex;align-items:center;justify-content:space-between;cursor:pointer;padding-inline:var(--space-s)}");
}
function create_if_block$5(ctx) {
  let div;
  let icon;
  let current;
  icon = new Icon({ props: { name: "check" } });
  return {
    c() {
      div = element("div");
      create_component(icon.$$.fragment);
      attr(div, "class", "trailing");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(icon, div, null);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
    }
  };
}
function fallback_block$1(ctx) {
  let input;
  let t0;
  let t1;
  let t2;
  let if_block_anchor;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*checked*/
    ctx[2] && create_if_block$5()
  );
  return {
    c() {
      input = element("input");
      t0 = space();
      t1 = text(
        /*label*/
        ctx[6]
      );
      t2 = space();
      if (if_block) if_block.c();
      if_block_anchor = empty();
      attr(input, "type", "radio");
      attr(
        input,
        "name",
        /*name*/
        ctx[0]
      );
      input.value = /*value*/
      ctx[1];
      input.checked = /*checked*/
      ctx[2];
      input.hidden = /*hidden*/
      ctx[5];
      attr(
        input,
        "group",
        /*group*/
        ctx[3]
      );
    },
    m(target, anchor) {
      insert(target, input, anchor);
      insert(target, t0, anchor);
      insert(target, t1, anchor);
      insert(target, t2, anchor);
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(input, "change", function() {
          if (is_function(
            /*onChange*/
            ctx[4]
          )) ctx[4].apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (!current || dirty & /*name*/
      1) {
        attr(
          input,
          "name",
          /*name*/
          ctx[0]
        );
      }
      if (!current || dirty & /*value*/
      2) {
        input.value = /*value*/
        ctx[1];
      }
      if (!current || dirty & /*checked*/
      4) {
        input.checked = /*checked*/
        ctx[2];
      }
      if (!current || dirty & /*hidden*/
      32) {
        input.hidden = /*hidden*/
        ctx[5];
      }
      if (!current || dirty & /*group*/
      8) {
        attr(
          input,
          "group",
          /*group*/
          ctx[3]
        );
      }
      if (!current || dirty & /*label*/
      64) set_data(
        t1,
        /*label*/
        ctx[6]
      );
      if (
        /*checked*/
        ctx[2]
      ) {
        if (if_block) {
          if (dirty & /*checked*/
          4) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$5();
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(input);
        detach(t0);
        detach(t1);
        detach(t2);
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$a(ctx) {
  let label_1;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[8].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    null
  );
  const default_slot_or_fallback = default_slot || fallback_block$1(ctx);
  return {
    c() {
      label_1 = element("label");
      if (default_slot_or_fallback) default_slot_or_fallback.c();
      attr(label_1, "class", "svelte-yv3ifw");
    },
    m(target, anchor) {
      insert(target, label_1, anchor);
      if (default_slot_or_fallback) {
        default_slot_or_fallback.m(label_1, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              null
            ),
            null
          );
        }
      } else {
        if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*checked, label, name, value, hidden, group, onChange*/
        127)) {
          default_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot_or_fallback, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot_or_fallback, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(label_1);
      }
      if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    }
  };
}
function instance$a($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { name } = $$props;
  let { value } = $$props;
  let { checked } = $$props;
  let { group } = $$props;
  let { onChange } = $$props;
  let { hidden } = $$props;
  let { label } = $$props;
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2) $$invalidate(0, name = $$props2.name);
    if ("value" in $$props2) $$invalidate(1, value = $$props2.value);
    if ("checked" in $$props2) $$invalidate(2, checked = $$props2.checked);
    if ("group" in $$props2) $$invalidate(3, group = $$props2.group);
    if ("onChange" in $$props2) $$invalidate(4, onChange = $$props2.onChange);
    if ("hidden" in $$props2) $$invalidate(5, hidden = $$props2.hidden);
    if ("label" in $$props2) $$invalidate(6, label = $$props2.label);
    if ("$$scope" in $$props2) $$invalidate(7, $$scope = $$props2.$$scope);
  };
  return [name, value, checked, group, onChange, hidden, label, $$scope, slots];
}
class ListOption extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$a,
      create_fragment$a,
      safe_not_equal,
      {
        name: 0,
        value: 1,
        checked: 2,
        group: 3,
        onChange: 4,
        hidden: 5,
        label: 6
      },
      add_css$5
    );
  }
}
function get_each_context$1(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i2];
  return child_ctx;
}
function create_default_slot_1$3(ctx) {
  let listoption;
  let updating_group;
  let t2;
  let current;
  function func() {
    return (
      /*func*/
      ctx[4](
        /*option*/
        ctx[6]
      )
    );
  }
  function listoption_group_binding(value) {
    ctx[5](value);
  }
  let listoption_props = {
    label: (
      /*option*/
      ctx[6].label
    ),
    name: (
      /*setting*/
      ctx[0]
    ),
    value: (
      /*option*/
      ctx[6].value
    ),
    checked: (
      /*$settings*/
      ctx[3][
        /*setting*/
        ctx[0]
      ] === /*option*/
      ctx[6].value
    ),
    onChange: func,
    hidden: true
  };
  if (
    /*$settings*/
    ctx[3][
      /*setting*/
      ctx[0]
    ] !== void 0
  ) {
    listoption_props.group = /*$settings*/
    ctx[3][
      /*setting*/
      ctx[0]
    ];
  }
  listoption = new ListOption({ props: listoption_props });
  binding_callbacks.push(() => bind(listoption, "group", listoption_group_binding));
  return {
    c() {
      create_component(listoption.$$.fragment);
      t2 = space();
    },
    m(target, anchor) {
      mount_component(listoption, target, anchor);
      insert(target, t2, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const listoption_changes = {};
      if (dirty & /*options*/
      2) listoption_changes.label = /*option*/
      ctx[6].label;
      if (dirty & /*setting*/
      1) listoption_changes.name = /*setting*/
      ctx[0];
      if (dirty & /*options*/
      2) listoption_changes.value = /*option*/
      ctx[6].value;
      if (dirty & /*$settings, setting, options*/
      11) listoption_changes.checked = /*$settings*/
      ctx[3][
        /*setting*/
        ctx[0]
      ] === /*option*/
      ctx[6].value;
      if (dirty & /*onChange, options*/
      6) listoption_changes.onChange = func;
      if (!updating_group && dirty & /*$settings, setting*/
      9) {
        updating_group = true;
        listoption_changes.group = /*$settings*/
        ctx[3][
          /*setting*/
          ctx[0]
        ];
        add_flush_callback(() => updating_group = false);
      }
      listoption.$set(listoption_changes);
    },
    i(local) {
      if (current) return;
      transition_in(listoption.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(listoption.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(listoption, detaching);
    }
  };
}
function create_each_block$1(ctx) {
  let listitem;
  let current;
  listitem = new ListItem({
    props: {
      $$slots: { default: [create_default_slot_1$3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(listitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(listitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const listitem_changes = {};
      if (dirty & /*$$scope, options, setting, $settings, onChange*/
      527) {
        listitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      listitem.$set(listitem_changes);
    },
    i(local) {
      if (current) return;
      transition_in(listitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(listitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(listitem, detaching);
    }
  };
}
function create_default_slot$4(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*options*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block$1(get_each_context$1(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*options, setting, $settings, onChange*/
      15) {
        each_value = ensure_array_like(
          /*options*/
          ctx2[1]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context$1(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block$1(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_fragment$9(ctx) {
  let list;
  let current;
  list = new List({
    props: {
      $$slots: { default: [create_default_slot$4] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list.$$.fragment);
    },
    m(target, anchor) {
      mount_component(list, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const list_changes = {};
      if (dirty & /*$$scope, options, setting, $settings, onChange*/
      527) {
        list_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list.$set(list_changes);
    },
    i(local) {
      if (current) return;
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list, detaching);
    }
  };
}
function instance$9($$self, $$props, $$invalidate) {
  let $settings;
  component_subscribe($$self, settings$5, ($$value) => $$invalidate(3, $settings = $$value));
  let { setting } = $$props;
  let { options } = $$props;
  let { onChange = (value) => {
    set_store_value(settings$5, $settings[setting] = value, $settings);
  } } = $$props;
  const func = (option) => onChange(option.value);
  function listoption_group_binding(value) {
    if ($$self.$$.not_equal($settings[setting], value)) {
      $settings[setting] = value;
      settings$5.set($settings);
    }
  }
  $$self.$$set = ($$props2) => {
    if ("setting" in $$props2) $$invalidate(0, setting = $$props2.setting);
    if ("options" in $$props2) $$invalidate(1, options = $$props2.options);
    if ("onChange" in $$props2) $$invalidate(2, onChange = $$props2.onChange);
  };
  return [setting, options, onChange, $settings, func, listoption_group_binding];
}
class Selector extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$9, create_fragment$9, safe_not_equal, { setting: 0, options: 1, onChange: 2 });
  }
}
function create_if_block_4$1(ctx) {
  let transition;
  let current;
  transition = new Transition({
    props: {
      direction: (
        /*$transitionDirection*/
        ctx[4]
      ),
      $$slots: { default: [create_default_slot_4] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(transition.$$.fragment);
    },
    m(target, anchor) {
      mount_component(transition, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const transition_changes = {};
      if (dirty & /*$transitionDirection*/
      16) transition_changes.direction = /*$transitionDirection*/
      ctx2[4];
      if (dirty & /*$$scope, $t, $settings*/
      524353) {
        transition_changes.$$scope = { dirty, ctx: ctx2 };
      }
      transition.$set(transition_changes);
    },
    i(local) {
      if (current) return;
      transition_in(transition.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(transition.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(transition, detaching);
    }
  };
}
function create_default_slot_5(ctx) {
  let listitem0;
  let t0;
  let listitem1;
  let t1;
  let listitem2;
  let t2;
  let listitem3;
  let t3;
  let listitem4;
  let current;
  listitem0 = new ListItem({
    props: {
      label: (
        /*$t*/
        ctx[0](`settings.theme.title`)
      ),
      onClick: (
        /*func*/
        ctx[11]
      ),
      leadingIcon: "theme",
      value: (
        /*$settings*/
        ctx[6].theme ? (
          /*$t*/
          ctx[0](`settings.theme.${/*$settings*/
          ctx[6].theme}`)
        ) : (
          /*$t*/
          ctx[0]("settings.theme.automatic")
        )
      )
    }
  });
  listitem1 = new ListItem({
    props: {
      label: (
        /*$t*/
        ctx[0](`settings.language.title`)
      ),
      onClick: (
        /*func_1*/
        ctx[12]
      ),
      leadingIcon: "globe",
      value: lang[
        /*$settings*/
        ctx[6].language
      ]
    }
  });
  listitem2 = new ListItem({
    props: {
      label: (
        /*$t*/
        ctx[0](`settings.animations.title`)
      ),
      onClick: (
        /*func_2*/
        ctx[13]
      ),
      leadingIcon: "waves",
      value: (
        /*$settings*/
        ctx[6].animations ? (
          /*$t*/
          ctx[0](`settings.animations.enabled`)
        ) : (
          /*$t*/
          ctx[0]("settings.animations.disabled")
        )
      )
    }
  });
  listitem3 = new ListItem({
    props: {
      label: (
        /*$t*/
        ctx[0]("settings.about.title")
      ),
      onClick: (
        /*func_3*/
        ctx[14]
      ),
      leadingIcon: "info"
    }
  });
  listitem4 = new ListItem({
    props: {
      label: (
        /*$t*/
        ctx[0]("settings.github")
      ),
      link: "https://www.github.com/wharfkit",
      leadingIcon: "github",
      trailingIcon: "external-link"
    }
  });
  return {
    c() {
      create_component(listitem0.$$.fragment);
      t0 = space();
      create_component(listitem1.$$.fragment);
      t1 = space();
      create_component(listitem2.$$.fragment);
      t2 = space();
      create_component(listitem3.$$.fragment);
      t3 = space();
      create_component(listitem4.$$.fragment);
    },
    m(target, anchor) {
      mount_component(listitem0, target, anchor);
      insert(target, t0, anchor);
      mount_component(listitem1, target, anchor);
      insert(target, t1, anchor);
      mount_component(listitem2, target, anchor);
      insert(target, t2, anchor);
      mount_component(listitem3, target, anchor);
      insert(target, t3, anchor);
      mount_component(listitem4, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const listitem0_changes = {};
      if (dirty & /*$t*/
      1) listitem0_changes.label = /*$t*/
      ctx2[0](`settings.theme.title`);
      if (dirty & /*$settings, $t*/
      65) listitem0_changes.value = /*$settings*/
      ctx2[6].theme ? (
        /*$t*/
        ctx2[0](`settings.theme.${/*$settings*/
        ctx2[6].theme}`)
      ) : (
        /*$t*/
        ctx2[0]("settings.theme.automatic")
      );
      listitem0.$set(listitem0_changes);
      const listitem1_changes = {};
      if (dirty & /*$t*/
      1) listitem1_changes.label = /*$t*/
      ctx2[0](`settings.language.title`);
      if (dirty & /*$settings*/
      64) listitem1_changes.value = lang[
        /*$settings*/
        ctx2[6].language
      ];
      listitem1.$set(listitem1_changes);
      const listitem2_changes = {};
      if (dirty & /*$t*/
      1) listitem2_changes.label = /*$t*/
      ctx2[0](`settings.animations.title`);
      if (dirty & /*$settings, $t*/
      65) listitem2_changes.value = /*$settings*/
      ctx2[6].animations ? (
        /*$t*/
        ctx2[0](`settings.animations.enabled`)
      ) : (
        /*$t*/
        ctx2[0]("settings.animations.disabled")
      );
      listitem2.$set(listitem2_changes);
      const listitem3_changes = {};
      if (dirty & /*$t*/
      1) listitem3_changes.label = /*$t*/
      ctx2[0]("settings.about.title");
      listitem3.$set(listitem3_changes);
      const listitem4_changes = {};
      if (dirty & /*$t*/
      1) listitem4_changes.label = /*$t*/
      ctx2[0]("settings.github");
      listitem4.$set(listitem4_changes);
    },
    i(local) {
      if (current) return;
      transition_in(listitem0.$$.fragment, local);
      transition_in(listitem1.$$.fragment, local);
      transition_in(listitem2.$$.fragment, local);
      transition_in(listitem3.$$.fragment, local);
      transition_in(listitem4.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(listitem0.$$.fragment, local);
      transition_out(listitem1.$$.fragment, local);
      transition_out(listitem2.$$.fragment, local);
      transition_out(listitem3.$$.fragment, local);
      transition_out(listitem4.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
      }
      destroy_component(listitem0, detaching);
      destroy_component(listitem1, detaching);
      destroy_component(listitem2, detaching);
      destroy_component(listitem3, detaching);
      destroy_component(listitem4, detaching);
    }
  };
}
function create_default_slot_4(ctx) {
  let list;
  let current;
  list = new List({
    props: {
      $$slots: { default: [create_default_slot_5] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(list.$$.fragment);
    },
    m(target, anchor) {
      mount_component(list, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const list_changes = {};
      if (dirty & /*$$scope, $t, $settings*/
      524353) {
        list_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list.$set(list_changes);
    },
    i(local) {
      if (current) return;
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list, detaching);
    }
  };
}
function create_if_block_3$1(ctx) {
  let transition;
  let current;
  transition = new Transition({
    props: {
      direction: (
        /*$transitionDirection*/
        ctx[4]
      ),
      $$slots: { default: [create_default_slot_3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(transition.$$.fragment);
    },
    m(target, anchor) {
      mount_component(transition, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const transition_changes = {};
      if (dirty & /*$transitionDirection*/
      16) transition_changes.direction = /*$transitionDirection*/
      ctx2[4];
      if (dirty & /*$$scope, animationOptions*/
      524296) {
        transition_changes.$$scope = { dirty, ctx: ctx2 };
      }
      transition.$set(transition_changes);
    },
    i(local) {
      if (current) return;
      transition_in(transition.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(transition.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(transition, detaching);
    }
  };
}
function create_if_block_2$3(ctx) {
  let transition;
  let current;
  transition = new Transition({
    props: {
      direction: (
        /*$transitionDirection*/
        ctx[4]
      ),
      $$slots: { default: [create_default_slot_2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(transition.$$.fragment);
    },
    m(target, anchor) {
      mount_component(transition, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const transition_changes = {};
      if (dirty & /*$transitionDirection*/
      16) transition_changes.direction = /*$transitionDirection*/
      ctx2[4];
      if (dirty & /*$$scope, languageOptions*/
      524292) {
        transition_changes.$$scope = { dirty, ctx: ctx2 };
      }
      transition.$set(transition_changes);
    },
    i(local) {
      if (current) return;
      transition_in(transition.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(transition.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(transition, detaching);
    }
  };
}
function create_if_block_1$3(ctx) {
  let transition;
  let current;
  transition = new Transition({
    props: {
      direction: (
        /*$transitionDirection*/
        ctx[4]
      ),
      $$slots: { default: [create_default_slot_1$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(transition.$$.fragment);
    },
    m(target, anchor) {
      mount_component(transition, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const transition_changes = {};
      if (dirty & /*$transitionDirection*/
      16) transition_changes.direction = /*$transitionDirection*/
      ctx2[4];
      if (dirty & /*$$scope, themeOptions*/
      524290) {
        transition_changes.$$scope = { dirty, ctx: ctx2 };
      }
      transition.$set(transition_changes);
    },
    i(local) {
      if (current) return;
      transition_in(transition.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(transition.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(transition, detaching);
    }
  };
}
function create_if_block$4(ctx) {
  let transition;
  let current;
  transition = new Transition({
    props: {
      direction: (
        /*$transitionDirection*/
        ctx[4]
      ),
      $$slots: { default: [create_default_slot$3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(transition.$$.fragment);
    },
    m(target, anchor) {
      mount_component(transition, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const transition_changes = {};
      if (dirty & /*$transitionDirection*/
      16) transition_changes.direction = /*$transitionDirection*/
      ctx2[4];
      if (dirty & /*$$scope*/
      524288) {
        transition_changes.$$scope = { dirty, ctx: ctx2 };
      }
      transition.$set(transition_changes);
    },
    i(local) {
      if (current) return;
      transition_in(transition.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(transition.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(transition, detaching);
    }
  };
}
function create_default_slot_3(ctx) {
  let selector;
  let current;
  selector = new Selector({
    props: {
      setting: "animations",
      options: (
        /*animationOptions*/
        ctx[3]
      )
    }
  });
  return {
    c() {
      create_component(selector.$$.fragment);
    },
    m(target, anchor) {
      mount_component(selector, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const selector_changes = {};
      if (dirty & /*animationOptions*/
      8) selector_changes.options = /*animationOptions*/
      ctx2[3];
      selector.$set(selector_changes);
    },
    i(local) {
      if (current) return;
      transition_in(selector.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(selector.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(selector, detaching);
    }
  };
}
function create_default_slot_2(ctx) {
  let selector;
  let current;
  selector = new Selector({
    props: {
      setting: "language",
      options: (
        /*languageOptions*/
        ctx[2]
      ),
      onChange: (
        /*func_4*/
        ctx[15]
      )
    }
  });
  return {
    c() {
      create_component(selector.$$.fragment);
    },
    m(target, anchor) {
      mount_component(selector, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const selector_changes = {};
      if (dirty & /*languageOptions*/
      4) selector_changes.options = /*languageOptions*/
      ctx2[2];
      selector.$set(selector_changes);
    },
    i(local) {
      if (current) return;
      transition_in(selector.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(selector.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(selector, detaching);
    }
  };
}
function create_default_slot_1$2(ctx) {
  let selector;
  let current;
  selector = new Selector({
    props: {
      setting: "theme",
      options: (
        /*themeOptions*/
        ctx[1]
      )
    }
  });
  return {
    c() {
      create_component(selector.$$.fragment);
    },
    m(target, anchor) {
      mount_component(selector, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const selector_changes = {};
      if (dirty & /*themeOptions*/
      2) selector_changes.options = /*themeOptions*/
      ctx2[1];
      selector.$set(selector_changes);
    },
    i(local) {
      if (current) return;
      transition_in(selector.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(selector.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(selector, detaching);
    }
  };
}
function create_default_slot$3(ctx) {
  let about;
  let current;
  about = new About({});
  return {
    c() {
      create_component(about.$$.fragment);
    },
    m(target, anchor) {
      mount_component(about, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(about.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(about.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(about, detaching);
    }
  };
}
function create_fragment$8(ctx) {
  let div;
  let t_1;
  let current_block_type_index;
  let if_block1;
  let current;
  let if_block0 = !/*$settingsRouter*/
  ctx[5].path && create_if_block_4$1(ctx);
  const if_block_creators = [create_if_block$4, create_if_block_1$3, create_if_block_2$3, create_if_block_3$1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*$settingsRouter*/
      ctx2[5].path === "about"
    ) return 0;
    if (
      /*$settingsRouter*/
      ctx2[5].path === "theme"
    ) return 1;
    if (
      /*$settingsRouter*/
      ctx2[5].path === "language"
    ) return 2;
    if (
      /*$settingsRouter*/
      ctx2[5].path === "animations"
    ) return 3;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      div = element("div");
      if (if_block0) if_block0.c();
      t_1 = space();
      if (if_block1) if_block1.c();
      attr(div, "class", "settings-menu");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block0) if_block0.m(div, null);
      append(div, t_1);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!/*$settingsRouter*/
      ctx2[5].path) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*$settingsRouter*/
          32) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_4$1(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, t_1);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block1) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block1 = if_blocks[current_block_type_index];
          if (!if_block1) {
            if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block1.c();
          } else {
            if_block1.p(ctx2, dirty);
          }
          transition_in(if_block1, 1);
          if_block1.m(div, null);
        } else {
          if_block1 = null;
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block0) if_block0.d();
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
    }
  };
}
function instance$8($$self, $$props, $$invalidate) {
  let animationOptions;
  let languageOptions;
  let themeOptions;
  let $t;
  let $props;
  let $transitionDirection;
  let $settingsRouter;
  let $settings;
  component_subscribe($$self, props, ($$value) => $$invalidate(16, $props = $$value));
  component_subscribe($$self, transitionDirection, ($$value) => $$invalidate(4, $transitionDirection = $$value));
  component_subscribe($$self, settings$5, ($$value) => $$invalidate(6, $settings = $$value));
  const settingsRouter = initRouter();
  component_subscribe($$self, settingsRouter, (value) => $$invalidate(5, $settingsRouter = value));
  const { t: t2, setLocale } = getContext("i18n");
  component_subscribe($$self, t2, (value) => $$invalidate(0, $t = value));
  function closeSettings() {
    set_store_value(transitionDirection, $transitionDirection = "ltr", $transitionDirection);
    router.back();
    backAction.set(void 0);
  }
  function navigateTo(path) {
    set_store_value(transitionDirection, $transitionDirection = "rtl", $transitionDirection);
    settingsRouter.push(path);
    set_store_value(props, $props.subtitle = $t(`settings.${path}.title`), $props);
    backAction.set(() => {
      set_store_value(transitionDirection, $transitionDirection = "ltr", $transitionDirection);
      settingsRouter.back();
      backAction.set(closeSettings);
      set_store_value(props, $props.subtitle = void 0, $props);
    });
  }
  onMount(() => {
    backAction.set(closeSettings);
    set_store_value(props, $props.title = $t("settings.title"), $props);
    set_store_value(props, $props.subtitle = void 0, $props);
    set_store_value(transitionDirection, $transitionDirection = "rtl", $transitionDirection);
  });
  async function changeLanguage(locale) {
    const success = await setLocale(locale);
    if (success) {
      settings$5.set({ ...get_store_value(settings$5), language: locale });
      set_store_value(props, $props.title = $t("settings.title"), $props);
      set_store_value(props, $props.subtitle = $t("settings.language.title"), $props);
    }
  }
  const func = () => navigateTo("theme");
  const func_1 = () => navigateTo("language");
  const func_2 = () => navigateTo("animations");
  const func_3 = () => navigateTo("about");
  const func_4 = (locale) => changeLanguage(locale);
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$t*/
    1) {
      $$invalidate(3, animationOptions = [
        {
          label: $t("settings.animations.enabled"),
          value: true
        },
        {
          label: $t("settings.animations.disabled"),
          value: false
        }
      ]);
    }
    if ($$self.$$.dirty & /*$t*/
    1) {
      $$invalidate(1, themeOptions = [
        {
          label: $t("settings.theme.automatic"),
          value: void 0
        },
        {
          label: $t("settings.theme.light"),
          value: "light"
        },
        {
          label: $t("settings.theme.dark"),
          value: "dark"
        }
      ]);
    }
  };
  $$invalidate(2, languageOptions = Object.keys(lang).map((lang$1) => ({ label: lang[lang$1], value: lang$1 })));
  return [
    $t,
    themeOptions,
    languageOptions,
    animationOptions,
    $transitionDirection,
    $settingsRouter,
    $settings,
    settingsRouter,
    t2,
    navigateTo,
    changeLanguage,
    func,
    func_1,
    func_2,
    func_3,
    func_4
  ];
}
class Settings extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$8, create_fragment$8, safe_not_equal, {});
  }
}
function create_fragment$7(ctx) {
  let countdown;
  let current;
  countdown = new Countdown({
    props: {
      data: {
        label: (
          /*$t*/
          ctx[0]("transact.processing", { default: "Performing transaction..." })
        )
      }
    }
  });
  return {
    c() {
      create_component(countdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(countdown, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const countdown_changes = {};
      if (dirty & /*$t*/
      1) countdown_changes.data = {
        label: (
          /*$t*/
          ctx2[0]("transact.processing", { default: "Performing transaction..." })
        )
      };
      countdown.$set(countdown_changes);
    },
    i(local) {
      if (current) return;
      transition_in(countdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(countdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(countdown, detaching);
    }
  };
}
function instance$7($$self, $$props, $$invalidate) {
  let $t;
  const { t: t2 } = getContext("i18n");
  component_subscribe($$self, t2, (value) => $$invalidate(0, $t = value));
  createEventDispatcher();
  return [$t, t2];
}
class Transact extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$7, create_fragment$7, safe_not_equal, {});
  }
}
function add_css$4(target) {
  append_styles(target, "svelte-1d8fcdl", "section.svelte-1d8fcdl{display:flex;flex-direction:column;gap:var(--space-s)}");
}
function get_each_context(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[4] = list[i2];
  return child_ctx;
}
function create_if_block$3(ctx) {
  let section;
  let bodytitle;
  let t2;
  let list;
  let current;
  bodytitle = new BodyTitle({
    props: {
      $$slots: { default: [create_default_slot_1$1] },
      $$scope: { ctx }
    }
  });
  list = new List({
    props: {
      $$slots: { default: [create_default_slot$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      section = element("section");
      create_component(bodytitle.$$.fragment);
      t2 = space();
      create_component(list.$$.fragment);
      attr(section, "class", "svelte-1d8fcdl");
    },
    m(target, anchor) {
      insert(target, section, anchor);
      mount_component(bodytitle, section, null);
      append(section, t2);
      mount_component(list, section, null);
      current = true;
    },
    p(ctx2, dirty) {
      const bodytitle_changes = {};
      if (dirty & /*$$scope, title*/
      130) {
        bodytitle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      bodytitle.$set(bodytitle_changes);
      const list_changes = {};
      if (dirty & /*$$scope, plugins*/
      129) {
        list_changes.$$scope = { dirty, ctx: ctx2 };
      }
      list.$set(list_changes);
    },
    i(local) {
      if (current) return;
      transition_in(bodytitle.$$.fragment, local);
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(bodytitle.$$.fragment, local);
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(section);
      }
      destroy_component(bodytitle);
      destroy_component(list);
    }
  };
}
function create_default_slot_1$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*title*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*title*/
      2) set_data(
        t2,
        /*title*/
        ctx2[1]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_each_block(ctx) {
  let listitem;
  let current;
  function func() {
    return (
      /*func*/
      ctx[3](
        /*plugin*/
        ctx[4]
      )
    );
  }
  listitem = new ListItem({
    props: {
      label: (
        /*plugin*/
        ctx[4].name
      ),
      onClick: func,
      leadingIcon: "wharf",
      logo: getThemedLogo(
        /*plugin*/
        ctx[4].metadata
      )
    }
  });
  return {
    c() {
      create_component(listitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(listitem, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const listitem_changes = {};
      if (dirty & /*plugins*/
      1) listitem_changes.label = /*plugin*/
      ctx[4].name;
      if (dirty & /*plugins*/
      1) listitem_changes.onClick = func;
      if (dirty & /*plugins*/
      1) listitem_changes.logo = getThemedLogo(
        /*plugin*/
        ctx[4].metadata
      );
      listitem.$set(listitem_changes);
    },
    i(local) {
      if (current) return;
      transition_in(listitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(listitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(listitem, detaching);
    }
  };
}
function create_default_slot$2(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*plugins*/
    ctx[0]
  );
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block(get_each_context(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        if (each_blocks[i2]) {
          each_blocks[i2].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*plugins, dispatch*/
      5) {
        each_value = ensure_array_like(
          /*plugins*/
          ctx2[0]
        );
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_fragment$6(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*plugins*/
    ctx[0] && create_if_block$3(ctx)
  );
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*plugins*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*plugins*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$3(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function instance$6($$self, $$props, $$invalidate) {
  let { plugins } = $$props;
  let { title } = $$props;
  const dispatch2 = createEventDispatcher();
  const func = (plugin) => dispatch2("select", plugin.id);
  $$self.$$set = ($$props2) => {
    if ("plugins" in $$props2) $$invalidate(0, plugins = $$props2.plugins);
    if ("title" in $$props2) $$invalidate(1, title = $$props2.title);
  };
  return [plugins, title, dispatch2, func];
}
class AccountPlugin extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$6, create_fragment$6, safe_not_equal, { plugins: 0, title: 1 }, add_css$4);
  }
}
function create_else_block_1$1(ctx) {
  let p2;
  let t_1_value = (
    /*$t*/
    ctx[2]("loading", { default: "Loading..." }) + ""
  );
  let t_1;
  return {
    c() {
      p2 = element("p");
      t_1 = text(t_1_value);
    },
    m(target, anchor) {
      insert(target, p2, anchor);
      append(p2, t_1);
    },
    p(ctx2, dirty) {
      if (dirty & /*$t*/
      4 && t_1_value !== (t_1_value = /*$t*/
      ctx2[2]("loading", { default: "Loading..." }) + "")) set_data(t_1, t_1_value);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(p2);
      }
    }
  };
}
function create_if_block$2(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1$2, create_if_block_2$2, create_else_block$1];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*$step*/
      ctx2[5] === /*Steps*/
      ctx2[0].selectPlugin
    ) return 0;
    if (
      /*$step*/
      ctx2[5] === /*Steps*/
      ctx2[0].selectChain && /*$chains*/
      ctx2[6]
    ) return 1;
    return 2;
  }
  current_block_type_index = select_block_type_1(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block$1(ctx) {
  let countdown;
  let current;
  countdown = new Countdown({
    props: {
      data: {
        label: (
          /*$t*/
          ctx[2]("accountCreation.countdown", { default: "Creating Account" })
        )
      }
    }
  });
  return {
    c() {
      create_component(countdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(countdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const countdown_changes = {};
      if (dirty & /*$t*/
      4) countdown_changes.data = {
        label: (
          /*$t*/
          ctx2[2]("accountCreation.countdown", { default: "Creating Account" })
        )
      };
      countdown.$set(countdown_changes);
    },
    i(local) {
      if (current) return;
      transition_in(countdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(countdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(countdown, detaching);
    }
  };
}
function create_if_block_2$2(ctx) {
  let transition;
  let current;
  transition = new Transition({
    props: {
      direction: (
        /*$transitionDirection*/
        ctx[1]
      ),
      $$slots: { default: [create_default_slot_1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(transition.$$.fragment);
    },
    m(target, anchor) {
      mount_component(transition, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const transition_changes = {};
      if (dirty & /*$transitionDirection*/
      2) transition_changes.direction = /*$transitionDirection*/
      ctx2[1];
      if (dirty & /*$$scope, $chains, $t*/
      4194372) {
        transition_changes.$$scope = { dirty, ctx: ctx2 };
      }
      transition.$set(transition_changes);
    },
    i(local) {
      if (current) return;
      transition_in(transition.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(transition.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(transition, detaching);
    }
  };
}
function create_if_block_1$2(ctx) {
  let transition;
  let current;
  transition = new Transition({
    props: {
      direction: (
        /*$transitionDirection*/
        ctx[1]
      ),
      $$slots: { default: [create_default_slot$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(transition.$$.fragment);
    },
    m(target, anchor) {
      mount_component(transition, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const transition_changes = {};
      if (dirty & /*$transitionDirection*/
      2) transition_changes.direction = /*$transitionDirection*/
      ctx2[1];
      if (dirty & /*$$scope, $accountCreationContext, $t*/
      4194324) {
        transition_changes.$$scope = { dirty, ctx: ctx2 };
      }
      transition.$set(transition_changes);
    },
    i(local) {
      if (current) return;
      transition_in(transition.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(transition.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(transition, detaching);
    }
  };
}
function create_default_slot_1(ctx) {
  let blockchain;
  let current;
  blockchain = new Blockchain({
    props: {
      chains: (
        /*$chains*/
        ctx[6]
      ),
      title: (
        /*$t*/
        ctx[2]("accountCreation.select.chain", { default: "Select a Blockchain" })
      )
    }
  });
  blockchain.$on(
    "select",
    /*selectChain*/
    ctx[11]
  );
  blockchain.$on(
    "cancel",
    /*unselectChain*/
    ctx[12]
  );
  return {
    c() {
      create_component(blockchain.$$.fragment);
    },
    m(target, anchor) {
      mount_component(blockchain, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const blockchain_changes = {};
      if (dirty & /*$chains*/
      64) blockchain_changes.chains = /*$chains*/
      ctx2[6];
      if (dirty & /*$t*/
      4) blockchain_changes.title = /*$t*/
      ctx2[2]("accountCreation.select.chain", { default: "Select a Blockchain" });
      blockchain.$set(blockchain_changes);
    },
    i(local) {
      if (current) return;
      transition_in(blockchain.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(blockchain.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(blockchain, detaching);
    }
  };
}
function create_default_slot$1(ctx) {
  let accountplugin;
  let current;
  accountplugin = new AccountPlugin({
    props: {
      plugins: (
        /*$accountCreationContext*/
        ctx[4].accountCreationPlugins
      ),
      title: (
        /*$t*/
        ctx[2]("accountCreation.select.plugin", { default: "Select a Service Provider" })
      )
    }
  });
  accountplugin.$on(
    "select",
    /*selectPlugin*/
    ctx[10]
  );
  accountplugin.$on(
    "cancel",
    /*cancel*/
    ctx[13]
  );
  return {
    c() {
      create_component(accountplugin.$$.fragment);
    },
    m(target, anchor) {
      mount_component(accountplugin, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const accountplugin_changes = {};
      if (dirty & /*$accountCreationContext*/
      16) accountplugin_changes.plugins = /*$accountCreationContext*/
      ctx2[4].accountCreationPlugins;
      if (dirty & /*$t*/
      4) accountplugin_changes.title = /*$t*/
      ctx2[2]("accountCreation.select.plugin", { default: "Select a Service Provider" });
      accountplugin.$set(accountplugin_changes);
    },
    i(local) {
      if (current) return;
      transition_in(accountplugin.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(accountplugin.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(accountplugin, detaching);
    }
  };
}
function create_fragment$5(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$2, create_else_block_1$1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*$props*/
      ctx2[3] && /*$accountCreationContext*/
      ctx2[4]
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function instance$5($$self, $$props, $$invalidate) {
  let $transitionDirection;
  let $backAction;
  let $accountCreationResponse;
  let $t;
  let $props;
  let $accountCreationContext;
  let $step;
  let $chains;
  component_subscribe($$self, transitionDirection, ($$value) => $$invalidate(1, $transitionDirection = $$value));
  component_subscribe($$self, backAction, ($$value) => $$invalidate(15, $backAction = $$value));
  component_subscribe($$self, accountCreationResponse, ($$value) => $$invalidate(16, $accountCreationResponse = $$value));
  component_subscribe($$self, props, ($$value) => $$invalidate(3, $props = $$value));
  component_subscribe($$self, accountCreationContext, ($$value) => $$invalidate(4, $accountCreationContext = $$value));
  const { t: t2 } = getContext("i18n");
  component_subscribe($$self, t2, (value) => $$invalidate(2, $t = value));
  let completed = false;
  const dispatch2 = createEventDispatcher();
  var Steps;
  (function(Steps2) {
    Steps2["done"] = "done";
    Steps2["selectPlugin"] = "selectPlugin";
    Steps2["selectChain"] = "selectChain";
  })(Steps || (Steps = {}));
  const accountPlugin = derived([accountCreationContext, accountCreationResponse], ([$currentContext, $currentResponse]) => {
    if (!$currentContext || !$currentResponse) {
      return void 0;
    }
    const plugin = $currentContext.accountCreationPlugins.find((plugin2) => plugin2.id === $currentResponse.pluginId);
    if (!$currentResponse.chain && plugin?.config.supportedChains?.length === 1) {
      $currentResponse.chain = plugin.config.supportedChains[0].id;
    }
    return plugin;
  });
  let chains = derived([accountCreationContext, accountPlugin], ([$currentContext, $currentAccountPlugin]) => {
    if ($currentContext && $currentAccountPlugin) {
      if ($currentAccountPlugin.config.supportedChains) {
        if ($currentContext.chains) {
          return $currentContext.chains.filter((chain) => {
            return (
              // If the chain is in the list of supported chains
              $currentAccountPlugin.config.supportedChains?.find((c2) => c2.id.equals(chain.id))
            );
          });
        }
      }
    } else if ($currentContext) {
      return $currentContext.chains;
    }
    return [];
  });
  component_subscribe($$self, chains, (value) => $$invalidate(6, $chains = value));
  const accountCreationContextUnsubscribe = accountCreationContext.subscribe((currentContext) => {
    if (currentContext) {
      set_store_value(
        props,
        $props.subtitle = $t("login.title-app", {
          appName: currentContext.appName,
          default: "Login to {{appName}}"
        }),
        $props
      );
      if (currentContext.accountCreationPlugins.length === 1) {
        set_store_value(accountCreationResponse, $accountCreationResponse.pluginId = currentContext.accountCreationPlugins[0].id, $accountCreationResponse);
      }
      if (currentContext.chain) {
        set_store_value(accountCreationResponse, $accountCreationResponse.chain = currentContext.chain.id, $accountCreationResponse);
      } else if (currentContext.chains && currentContext.chains.length === 1) {
        set_store_value(accountCreationResponse, $accountCreationResponse.chain = currentContext.chains[0].id, $accountCreationResponse);
      }
    }
  });
  onMount(() => {
    set_store_value(props, $props.title = $t("accountCreation.title", { default: "Create Account" }), $props);
  });
  onDestroy(accountCreationContextUnsubscribe);
  const complete = () => {
    if (!completed) {
      completed = true;
      setTimeout(
        () => {
          dispatch2("complete", $accountCreationResponse);
          backAction.set(void 0);
        },
        100
      );
    }
  };
  const step = derived([accountCreationContext, accountCreationResponse, accountPlugin, chains], ([$context, $currentResponse, $currentAccountPlugin, $chains2]) => {
    if (!$currentAccountPlugin && $context?.uiRequirements.requiresPluginSelect) {
      return Steps.selectPlugin;
    }
    let requiresChainSelect = $currentAccountPlugin?.config.requiresChainSelect;
    if (requiresChainSelect !== false) {
      requiresChainSelect = $context?.uiRequirements.requiresChainSelect;
    }
    if (!$currentResponse.chain && requiresChainSelect) {
      return Steps.selectChain;
    }
    complete();
  });
  component_subscribe($$self, step, (value) => $$invalidate(5, $step = value));
  const selectPlugin = (e) => {
    set_store_value(accountCreationResponse, $accountCreationResponse.pluginId = e.detail, $accountCreationResponse);
    set_store_value(backAction, $backAction = unselectPlugin, $backAction);
    set_store_value(transitionDirection, $transitionDirection = "rtl", $transitionDirection);
  };
  const unselectPlugin = (e) => {
    set_store_value(accountCreationResponse, $accountCreationResponse.pluginId = void 0, $accountCreationResponse);
    set_store_value(backAction, $backAction = void 0, $backAction);
    set_store_value(transitionDirection, $transitionDirection = "ltr", $transitionDirection);
  };
  const selectChain = (e) => {
    set_store_value(accountCreationResponse, $accountCreationResponse.chain = e.detail, $accountCreationResponse);
    set_store_value(backAction, $backAction = unselectChain, $backAction);
    set_store_value(transitionDirection, $transitionDirection = "rtl", $transitionDirection);
  };
  const unselectChain = (e) => {
    set_store_value(accountCreationResponse, $accountCreationResponse.chain = void 0, $accountCreationResponse);
    set_store_value(backAction, $backAction = unselectPlugin, $backAction);
    set_store_value(transitionDirection, $transitionDirection = "ltr", $transitionDirection);
  };
  const cancel2 = () => {
    dispatch2("cancel");
  };
  return [
    Steps,
    $transitionDirection,
    $t,
    $props,
    $accountCreationContext,
    $step,
    $chains,
    t2,
    chains,
    step,
    selectPlugin,
    selectChain,
    unselectChain,
    cancel2
  ];
}
class CreateAccount extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$5, create_fragment$5, safe_not_equal, {});
  }
}
function add_css$3(target) {
  append_styles(target, "svelte-mttle8", "button.svelte-mttle8.svelte-mttle8{--button-size:46px;--button-size:var(--space-2xl);position:relative;isolation:isolate;background:var(--header-button-background);border:1px solid var(--header-button-outline);border:none;box-shadow:inset 0 0 0 1px var(--header-button-outline);border-radius:var(--border-radius-inner);cursor:pointer;width:var(--button-size);height:var(--button-size);display:grid;place-content:center;color:var(--header-text-color);transition:transform 80ms ease}button.svelte-mttle8.svelte-mttle8:active{transform:scale(95%);transform-origin:center}@media(hover: hover){button.svelte-mttle8:hover .background.svelte-mttle8{opacity:1}}.background.svelte-mttle8.svelte-mttle8{position:absolute;border-radius:var(--border-radius-inner);inset:0;opacity:0;z-index:-1;transition:opacity 80ms ease;background:var(--header-button-outline)}.visually-hidden.svelte-mttle8.svelte-mttle8{border:0;clip:rect(0 0 0 0);height:auto;margin:0;overflow:hidden;padding:0;position:absolute;width:1px;white-space:nowrap}");
}
function create_fragment$4(ctx) {
  let button;
  let span0;
  let t0;
  let icon_1;
  let t1;
  let span1;
  let t2;
  let current;
  let mounted;
  let dispose;
  icon_1 = new Icon({ props: { name: (
    /*icon*/
    ctx[1]
  ) } });
  return {
    c() {
      button = element("button");
      span0 = element("span");
      t0 = space();
      create_component(icon_1.$$.fragment);
      t1 = space();
      span1 = element("span");
      t2 = text(
        /*icon*/
        ctx[1]
      );
      attr(span0, "class", "background svelte-mttle8");
      attr(span1, "class", "label visually-hidden svelte-mttle8");
      attr(button, "class", "svelte-mttle8");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, span0);
      append(button, t0);
      mount_component(icon_1, button, null);
      append(button, t1);
      append(button, span1);
      append(span1, t2);
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", function() {
          if (is_function(
            /*onClick*/
            ctx[0]
          )) ctx[0].apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      const icon_1_changes = {};
      if (dirty & /*icon*/
      2) icon_1_changes.name = /*icon*/
      ctx[1];
      icon_1.$set(icon_1_changes);
      if (!current || dirty & /*icon*/
      2) set_data(
        t2,
        /*icon*/
        ctx[1]
      );
    },
    i(local) {
      if (current) return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      destroy_component(icon_1);
      mounted = false;
      dispose();
    }
  };
}
function instance$4($$self, $$props, $$invalidate) {
  let { onClick } = $$props;
  let { icon } = $$props;
  $$self.$$set = ($$props2) => {
    if ("onClick" in $$props2) $$invalidate(0, onClick = $$props2.onClick);
    if ("icon" in $$props2) $$invalidate(1, icon = $$props2.icon);
  };
  return [onClick, icon];
}
class HeaderButton extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$4, create_fragment$4, safe_not_equal, { onClick: 0, icon: 1 }, add_css$3);
  }
}
function add_css$2(target) {
  append_styles(target, "svelte-ajt3u", ".wrapper.svelte-ajt3u{transform-origin:top;overflow:hidden;position:relative;height:var(--container-height);background-color:var(--header-background-color)}.clipped.svelte-ajt3u{clip-path:url(#wave-clip)}.container.svelte-ajt3u{position:absolute;left:0;bottom:0;width:200%;height:100%;transform-origin:bottom}@keyframes svelte-ajt3u-wave-slide{from{transform:translate(0)}to{transform:translate(-50%)}}.wave.svelte-ajt3u{position:absolute;bottom:-2px;opacity:0.9999;transform-origin:bottom}.wave.foreground.svelte-ajt3u{--swell:var(--foreground-swell);--swell-speed:var(--foreground-swell-speed);--swell-delay:var(--foreground-delay)}.wave.midground.svelte-ajt3u{--swell:var(--midground-swell);--swell-speed:var(--midground-swell-speed);--swell-delay:var(--midground-delay)}.wave.background.svelte-ajt3u{--swell:var(--background-swell);--swell-speed:var(--background-swell-speed);--swell-delay:var(--background-delay)}@keyframes svelte-ajt3u-wave-swell{from{transform:scaleY(1)}to{transform:scaleY(var(--swell))}}");
}
function create_fragment$3(ctx) {
  let div3;
  let svg0;
  let defs;
  let clipPath;
  let path;
  let t0;
  let div0;
  let svg1;
  let rect0;
  let t1;
  let div1;
  let svg2;
  let rect1;
  let t2;
  let div2;
  let svg3;
  let rect2;
  return {
    c() {
      div3 = element("div");
      svg0 = svg_element("svg");
      defs = svg_element("defs");
      clipPath = svg_element("clipPath");
      path = svg_element("path");
      t0 = space();
      div0 = element("div");
      svg1 = svg_element("svg");
      rect0 = svg_element("rect");
      t1 = space();
      div1 = element("div");
      svg2 = svg_element("svg");
      rect1 = svg_element("rect");
      t2 = space();
      div2 = element("div");
      svg3 = svg_element("svg");
      rect2 = svg_element("rect");
      attr(path, "d", "M 0 300 V 100 Q 100 0 200 100 Q 300 200 400 100 Q 500 0 600 100 Q 700 200 800 100 V 300");
      attr(clipPath, "id", "wave-clip");
      attr(svg0, "height", "0");
      attr(svg0, "width", "0");
      attr(rect0, "class", "clipped svelte-ajt3u");
      attr(rect0, "height", "100%");
      attr(rect0, "width", "100%");
      attr(rect0, "fill", backgroundFill);
      attr(svg1, "class", "wave background svelte-ajt3u");
      attr(svg1, "width", "100%");
      attr(svg1, "height", bgHeight + "%");
      attr(svg1, "viewBox", "0 0 800 300");
      attr(svg1, "preserveAspectRatio", "none");
      attr(div0, "class", "container background svelte-ajt3u");
      attr(rect1, "class", "clipped svelte-ajt3u");
      attr(rect1, "width", "100%");
      attr(rect1, "height", "100%");
      attr(rect1, "fill", midgroundFill);
      attr(svg2, "class", "wave midground svelte-ajt3u");
      attr(svg2, "width", "100%");
      attr(svg2, "height", mgHeight + "%");
      attr(svg2, "viewBox", "0 0 800 300");
      attr(svg2, "preserveAspectRatio", "none");
      attr(div1, "class", "container midground svelte-ajt3u");
      attr(rect2, "class", "clipped svelte-ajt3u");
      attr(rect2, "width", "100%");
      attr(rect2, "height", "100%");
      attr(rect2, "fill", foregroundFill);
      attr(svg3, "class", "wave foreground svelte-ajt3u");
      attr(svg3, "width", "100%");
      attr(svg3, "height", fgHeight + "%");
      attr(svg3, "viewBox", "0 0 800 300");
      attr(svg3, "preserveAspectRatio", "none");
      attr(div2, "class", "container foreground svelte-ajt3u");
      attr(div3, "class", "wrapper svelte-ajt3u");
      set_style(div3, "--frequency", frequency + "ms");
      set_style(div3, "--foreground-speed", fgFrequency + "ms");
      set_style(div3, "--midground-speed", mgFrequency + "ms");
      set_style(div3, "--background-speed", bgFrequency + "ms");
      set_style(div3, "--container-height", containerHeight + "px");
      set_style(div3, "--motion", motion);
      set_style(div3, "--foreground-swell", fgSwell);
      set_style(div3, "--midground-swell", mgSwell);
      set_style(div3, "--background-swell", bgSwell);
      set_style(div3, "--foreground-swell-speed", fgSwellSpeed + "ms");
      set_style(div3, "--midground-swell-speed", mgSwellSpeed + "ms");
      set_style(div3, "--background-swell-speed", bgSwellSpeed + "ms");
      set_style(div3, "--foreground-delay", fgSwellDelay + "ms");
      set_style(div3, "--midground-delay", mgSwellDelay + "ms");
      set_style(div3, "--background-delay", bgSwellDelay + "ms");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, svg0);
      append(svg0, defs);
      append(defs, clipPath);
      append(clipPath, path);
      append(div3, t0);
      append(div3, div0);
      append(div0, svg1);
      append(svg1, rect0);
      append(div3, t1);
      append(div3, div1);
      append(div1, svg2);
      append(svg2, rect1);
      append(div3, t2);
      append(div3, div2);
      append(div2, svg3);
      append(svg3, rect2);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div3);
      }
    }
  };
}
let motion = "linear";
let frequency = 7e3;
let fgFrequency = 1e4;
let mgFrequency = 9500;
let bgFrequency = 8600;
let containerHeight = 25;
let fgHeight = 50;
let mgHeight = 75;
let bgHeight = 100;
let fgSwell = 1.2;
let mgSwell = 1.4;
let bgSwell = 1.3;
let fgSwellSpeed = 3100;
let mgSwellSpeed = 2300;
let bgSwellSpeed = 1e3;
let fgSwellDelay = 9e3;
let mgSwellDelay = 7900;
let bgSwellDelay = 9100;
const foregroundFill = "var(--wave-foreground-color)";
const midgroundFill = "var(--wave-midground-color)";
const backgroundFill = "var(--wave-background-color)";
function instance$3($$self) {
  return [];
}
class HeaderWaves extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$3, create_fragment$3, safe_not_equal, {}, add_css$2);
  }
}
function add_css$1(target) {
  append_styles(target, "svelte-j6z3r6", ".modal-header.svelte-j6z3r6.svelte-j6z3r6{box-sizing:border-box;min-height:var(--header-height);color:var(--header-text-color);background:var(--header-background-color);display:grid;grid-template-columns:1fr auto 1fr;gap:var(--space-s);padding:var(--space-m)}.modal-header.svelte-j6z3r6 .slot.svelte-j6z3r6{display:flex;align-items:center}.modal-header.svelte-j6z3r6 .center.svelte-j6z3r6{flex-direction:column;justify-content:space-around;text-align:center}.modal-header.svelte-j6z3r6 .right.svelte-j6z3r6{justify-content:flex-end}.modal-header.svelte-j6z3r6 .svelte-j6z3r6:is(h2, p){color:var(--header-text-color);margin:0;line-height:1.1em}.modal-header.svelte-j6z3r6 h2.svelte-j6z3r6{font-size:var(--fs-3);font-weight:700}.modal-header.svelte-j6z3r6 p.svelte-j6z3r6{font-size:var(--fs-0)}");
}
const get_right_slot_changes = (dirty) => ({});
const get_right_slot_context = (ctx) => ({});
const get_center_slot_changes = (dirty) => ({});
const get_center_slot_context = (ctx) => ({});
const get_left_slot_changes = (dirty) => ({});
const get_left_slot_context = (ctx) => ({});
function create_if_block_2$1(ctx) {
  let headerbutton;
  let current;
  headerbutton = new HeaderButton({
    props: {
      icon: "settings",
      onClick: (
        /*func*/
        ctx[8]
      )
    }
  });
  return {
    c() {
      create_component(headerbutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(headerbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const headerbutton_changes = {};
      if (dirty & /*$transitionDirection*/
      16) headerbutton_changes.onClick = /*func*/
      ctx2[8];
      headerbutton.$set(headerbutton_changes);
    },
    i(local) {
      if (current) return;
      transition_in(headerbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(headerbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(headerbutton, detaching);
    }
  };
}
function create_if_block_1$1(ctx) {
  let headerbutton;
  let current;
  headerbutton = new HeaderButton({
    props: {
      icon: "chevron-left",
      onClick: (
        /*$backAction*/
        ctx[2]
      )
    }
  });
  return {
    c() {
      create_component(headerbutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(headerbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const headerbutton_changes = {};
      if (dirty & /*$backAction*/
      4) headerbutton_changes.onClick = /*$backAction*/
      ctx2[2];
      headerbutton.$set(headerbutton_changes);
    },
    i(local) {
      if (current) return;
      transition_in(headerbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(headerbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(headerbutton, detaching);
    }
  };
}
function fallback_block_2(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1$1, create_if_block_2$1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*$backAction*/
      ctx2[2]
    ) return 0;
    if (
      /*$allowSettings*/
      ctx2[3]
    ) return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        } else {
          if_block = null;
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
    }
  };
}
function create_if_block$1(ctx) {
  let p2;
  let t2;
  return {
    c() {
      p2 = element("p");
      t2 = text(
        /*subtitle*/
        ctx[1]
      );
      attr(p2, "class", "svelte-j6z3r6");
    },
    m(target, anchor) {
      insert(target, p2, anchor);
      append(p2, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*subtitle*/
      2) set_data(
        t2,
        /*subtitle*/
        ctx2[1]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(p2);
      }
    }
  };
}
function fallback_block_1(ctx) {
  let h2;
  let t0;
  let t1;
  let if_block_anchor;
  let if_block = (
    /*subtitle*/
    ctx[1] && create_if_block$1(ctx)
  );
  return {
    c() {
      h2 = element("h2");
      t0 = text(
        /*title*/
        ctx[0]
      );
      t1 = space();
      if (if_block) if_block.c();
      if_block_anchor = empty();
      attr(h2, "class", "svelte-j6z3r6");
    },
    m(target, anchor) {
      insert(target, h2, anchor);
      append(h2, t0);
      insert(target, t1, anchor);
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*title*/
      1) set_data(
        t0,
        /*title*/
        ctx2[0]
      );
      if (
        /*subtitle*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$1(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(h2);
        detach(t1);
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function fallback_block(ctx) {
  let headerbutton;
  let current;
  headerbutton = new HeaderButton({
    props: {
      icon: "close",
      onClick: (
        /*func_1*/
        ctx[9]
      )
    }
  });
  return {
    c() {
      create_component(headerbutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(headerbutton, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current) return;
      transition_in(headerbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(headerbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(headerbutton, detaching);
    }
  };
}
function create_fragment$2(ctx) {
  let div3;
  let div0;
  let t0;
  let div1;
  let t1;
  let div2;
  let t2;
  let headerwaves;
  let current;
  const left_slot_template = (
    /*#slots*/
    ctx[7].left
  );
  const left_slot = create_slot(
    left_slot_template,
    ctx,
    /*$$scope*/
    ctx[6],
    get_left_slot_context
  );
  const left_slot_or_fallback = left_slot || fallback_block_2(ctx);
  const center_slot_template = (
    /*#slots*/
    ctx[7].center
  );
  const center_slot = create_slot(
    center_slot_template,
    ctx,
    /*$$scope*/
    ctx[6],
    get_center_slot_context
  );
  const center_slot_or_fallback = center_slot || fallback_block_1(ctx);
  const right_slot_template = (
    /*#slots*/
    ctx[7].right
  );
  const right_slot = create_slot(
    right_slot_template,
    ctx,
    /*$$scope*/
    ctx[6],
    get_right_slot_context
  );
  const right_slot_or_fallback = right_slot || fallback_block(ctx);
  headerwaves = new HeaderWaves({});
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      if (left_slot_or_fallback) left_slot_or_fallback.c();
      t0 = space();
      div1 = element("div");
      if (center_slot_or_fallback) center_slot_or_fallback.c();
      t1 = space();
      div2 = element("div");
      if (right_slot_or_fallback) right_slot_or_fallback.c();
      t2 = space();
      create_component(headerwaves.$$.fragment);
      attr(div0, "class", "slot left svelte-j6z3r6");
      attr(div1, "class", "slot center svelte-j6z3r6");
      attr(div2, "class", "slot right svelte-j6z3r6");
      attr(div3, "class", "modal-header svelte-j6z3r6");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      if (left_slot_or_fallback) {
        left_slot_or_fallback.m(div0, null);
      }
      append(div3, t0);
      append(div3, div1);
      if (center_slot_or_fallback) {
        center_slot_or_fallback.m(div1, null);
      }
      append(div3, t1);
      append(div3, div2);
      if (right_slot_or_fallback) {
        right_slot_or_fallback.m(div2, null);
      }
      insert(target, t2, anchor);
      mount_component(headerwaves, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (left_slot) {
        if (left_slot.p && (!current || dirty & /*$$scope*/
        64)) {
          update_slot_base(
            left_slot,
            left_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[6],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[6]
            ) : get_slot_changes(
              left_slot_template,
              /*$$scope*/
              ctx2[6],
              dirty,
              get_left_slot_changes
            ),
            get_left_slot_context
          );
        }
      } else {
        if (left_slot_or_fallback && left_slot_or_fallback.p && (!current || dirty & /*$backAction, $transitionDirection, $allowSettings*/
        28)) {
          left_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
      if (center_slot) {
        if (center_slot.p && (!current || dirty & /*$$scope*/
        64)) {
          update_slot_base(
            center_slot,
            center_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[6],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[6]
            ) : get_slot_changes(
              center_slot_template,
              /*$$scope*/
              ctx2[6],
              dirty,
              get_center_slot_changes
            ),
            get_center_slot_context
          );
        }
      } else {
        if (center_slot_or_fallback && center_slot_or_fallback.p && (!current || dirty & /*subtitle, title*/
        3)) {
          center_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
      if (right_slot) {
        if (right_slot.p && (!current || dirty & /*$$scope*/
        64)) {
          update_slot_base(
            right_slot,
            right_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[6],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[6]
            ) : get_slot_changes(
              right_slot_template,
              /*$$scope*/
              ctx2[6],
              dirty,
              get_right_slot_changes
            ),
            get_right_slot_context
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(left_slot_or_fallback, local);
      transition_in(center_slot_or_fallback, local);
      transition_in(right_slot_or_fallback, local);
      transition_in(headerwaves.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(left_slot_or_fallback, local);
      transition_out(center_slot_or_fallback, local);
      transition_out(right_slot_or_fallback, local);
      transition_out(headerwaves.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div3);
        detach(t2);
      }
      if (left_slot_or_fallback) left_slot_or_fallback.d(detaching);
      if (center_slot_or_fallback) center_slot_or_fallback.d(detaching);
      if (right_slot_or_fallback) right_slot_or_fallback.d(detaching);
      destroy_component(headerwaves, detaching);
    }
  };
}
function instance$2($$self, $$props, $$invalidate) {
  let $backAction;
  let $allowSettings;
  let $transitionDirection;
  component_subscribe($$self, backAction, ($$value) => $$invalidate(2, $backAction = $$value));
  component_subscribe($$self, allowSettings, ($$value) => $$invalidate(3, $allowSettings = $$value));
  component_subscribe($$self, transitionDirection, ($$value) => $$invalidate(4, $transitionDirection = $$value));
  let { $$slots: slots = {}, $$scope } = $$props;
  let { title } = $$props;
  let { subtitle } = $$props;
  const dispatch2 = createEventDispatcher();
  const func = () => {
    router.push("settings");
    set_store_value(transitionDirection, $transitionDirection = "rtl", $transitionDirection);
  };
  const func_1 = () => dispatch2("cancel");
  $$self.$$set = ($$props2) => {
    if ("title" in $$props2) $$invalidate(0, title = $$props2.title);
    if ("subtitle" in $$props2) $$invalidate(1, subtitle = $$props2.subtitle);
    if ("$$scope" in $$props2) $$invalidate(6, $$scope = $$props2.$$scope);
  };
  return [
    title,
    subtitle,
    $backAction,
    $allowSettings,
    $transitionDirection,
    dispatch2,
    $$scope,
    slots,
    func,
    func_1
  ];
}
class Header extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$2, create_fragment$2, safe_not_equal, { title: 0, subtitle: 1 }, add_css$1);
  }
}
function add_css(target) {
  append_styles(target, "svelte-1ime0ob", ':host dialog.svelte-1ime0ob{color-scheme:light;--body-background-color:white;--body-text-color:var(--color-primary-700);--body-text-color-variant:var(--color-neutral-700);--header-background-color:var(--color-primary-700);--header-text-color:var(--color-primary-50);--header-button-background:var(--header-background-color);--header-button-outline:var(--color-primary-900);--button-text-color:var(--wharf-blue);--button-text-color-active:var(--wharf-blue);--button-outline-active:inset 0 0 0 2px var(--button-text-color);--button-primary-background:var(--color-secondary-200);--button-primary-background-hover:var(--color-secondary-200);--button-primary-background-active:linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1)),\n      var(--color-secondary-200);--button-primary-outline-hover:inset 0 0 0 1px #00000030,\n      inset 0 0 0 1px var(--color-secondary-200);--button-secondary-background:var(--color-custom-1);--button-secondary-background-hover:var(--color-custom-1);--button-secondary-background-active:var(--color-secondary-200);--button-secondary-outline-hover:inset 0 0 0 1px #00000020,\n      inset 0 0 0 1px var(--color-secondary-200);--button-outlined-background-active:var(--color-secondary-200);--button-outlined-outline:inset 0 0 0 1px var(--color-secondary-200);--button-outlined-outline-hover:inset 0 0 0 1px #00000020,\n      inset 0 0 0 1px var(--color-secondary-200);--input-placeholder-color:var(--color-neutral-500);--input-background-focus:var(--color-neutral-100);--input-border-color:#00000030;--input-border-color-hover:var(--color-custom-5);--input-border-color-focus:var(--wharf-blue);--qr-border-color:inset 0 0 0 1px rgba(0 0 0 / 0.3), inset 0 0 0 1px var(--seafoam-mint);--checkbox-stroke:var(--wharf-blue);--checkbox-fill:var(--reef-turquoise);--error-color:var(--color-error-1);--list-item-background-color-hover:var(--color-custom-9);--list-item-text-color-hover:var(--color-secondary-500);--list-divider-color:#00000010;--text-area-background:var(--swell-mist);--text-area-text-color:#242424;--loading-circle-color:var(--reef-turquoise);--loading-circle-track-color:rgba(0 0 0 / 0.05);--wave-foreground-color:var(--body-background-color);--wave-midground-color:var(--seafoam-mint);--wave-background-color:var(--reef-turquoise)}:host dialog[data-theme=dark].svelte-1ime0ob{color-scheme:dark;--body-background-color:var(--color-primary-990);--body-text-color:white;--body-text-color-variant:var(--color-neutral-300);--header-background-color:var(--color-primary-700);--header-text-color:var(--color-primary-50);--header-button-background:var(--header-background-color);--header-button-outline:var(--color-primary-900);--button-text-color:var(--body-text-color);--button-text-color-active:var(--reef-turquoise);--button-outline-active:inset 0 0 0 2px var(--reef-turquoise);--button-primary-background:var(--color-secondary-500);--button-primary-background-hover:var(--color-secondary-500);--button-primary-background-active:var(--color-custom-2);--button-primary-outline-hover:inset 0 0 0 1px white;--button-secondary-background:var(--color-primary-800);--button-secondary-background-hover:var(--color-primary-800);--button-secondary-background-active:var(--color-primary-900);--button-secondary-outline-hover:inset 0 0 0 1px #ffffff30;--button-outlined-background-active:var(--color-primary-900);--button-outlined-outline:inset 0 0 0 1px #00000030;--button-outlined-outline-hover:inset 0 0 0 1px #ffffff30;--input-placeholder-color:#ffffff75;--input-background-focus:var(--color-custom-4);--input-border-color:#ffffff30;--input-border-color-hover:var(--color-custom-6);--input-border-color-focus:var(--reef-turquoise);--qr-border-color:inset 0 0 0 1px rgba(0 0 0 / 0.3);--checkbox-stroke:var(--reef-turquoise);--checkbox-fill:var(--color-custom-3);--error-color:var(--color-error-3);--list-item-background-color-hover:var(--color-custom-8);--list-item-text-color-hover:var(--color-secondary-400);--list-divider-color:#ffffff10;--text-area-background:var(--color-primary-900);--text-area-text-color:#ffffff;--loading-circle-color:var(--seafoam-mint);--loading-circle-track-color:rgba(0 0 0 / 0.05);--wave-foreground-color:var(--body-background-color);--wave-midground-color:#2f3445;--wave-background-color:#3e4356}@media(prefers-color-scheme: dark){:host dialog.svelte-1ime0ob{color-scheme:dark;--body-background-color:var(--color-primary-990);--body-text-color:white;--body-text-color-variant:var(--color-neutral-300);--header-background-color:var(--color-primary-700);--header-text-color:var(--color-primary-50);--header-button-background:var(--header-background-color);--header-button-outline:var(--color-primary-900);--button-text-color:var(--body-text-color);--button-text-color-active:var(--reef-turquoise);--button-outline-active:inset 0 0 0 2px var(--reef-turquoise);--button-primary-background:var(--color-secondary-500);--button-primary-background-hover:var(--color-secondary-500);--button-primary-background-active:var(--color-custom-2);--button-primary-outline-hover:inset 0 0 0 1px white;--button-secondary-background:var(--color-primary-800);--button-secondary-background-hover:var(--color-primary-800);--button-secondary-background-active:var(--color-primary-900);--button-secondary-outline-hover:inset 0 0 0 1px #ffffff30;--button-outlined-background-active:var(--color-primary-900);--button-outlined-outline:inset 0 0 0 1px #00000030;--button-outlined-outline-hover:inset 0 0 0 1px #ffffff30;--input-placeholder-color:#ffffff75;--input-background-focus:var(--color-custom-4);--input-border-color:#ffffff30;--input-border-color-hover:var(--color-custom-6);--input-border-color-focus:var(--reef-turquoise);--qr-border-color:inset 0 0 0 1px rgba(0 0 0 / 0.3);--checkbox-stroke:var(--reef-turquoise);--checkbox-fill:var(--color-custom-3);--error-color:var(--color-error-3);--list-item-background-color-hover:var(--color-custom-8);--list-item-text-color-hover:var(--color-secondary-400);--list-divider-color:#ffffff10;--text-area-background:var(--color-primary-900);--text-area-text-color:#ffffff;--loading-circle-color:var(--seafoam-mint);--loading-circle-track-color:rgba(0 0 0 / 0.05);--wave-foreground-color:var(--body-background-color);--wave-midground-color:#2f3445;--wave-background-color:#3e4356}:host dialog[data-theme=light].svelte-1ime0ob{color-scheme:light;--body-background-color:white;--body-text-color:var(--color-primary-700);--body-text-color-variant:var(--color-neutral-700);--header-background-color:var(--color-primary-700);--header-text-color:var(--color-primary-50);--header-button-background:var(--header-background-color);--header-button-outline:var(--color-primary-900);--button-text-color:var(--wharf-blue);--button-text-color-active:var(--wharf-blue);--button-outline-active:inset 0 0 0 2px var(--button-text-color);--button-primary-background:var(--color-secondary-200);--button-primary-background-hover:var(--color-secondary-200);--button-primary-background-active:linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1)),\n        var(--color-secondary-200);--button-primary-outline-hover:inset 0 0 0 1px #00000030,\n        inset 0 0 0 1px var(--color-secondary-200);--button-secondary-background:var(--color-custom-1);--button-secondary-background-hover:var(--color-custom-1);--button-secondary-background-active:var(--color-secondary-200);--button-secondary-outline-hover:inset 0 0 0 1px #00000020,\n        inset 0 0 0 1px var(--color-secondary-200);--button-outlined-background-active:var(--color-secondary-200);--button-outlined-outline:inset 0 0 0 1px var(--color-secondary-200);--button-outlined-outline-hover:inset 0 0 0 1px #00000020,\n        inset 0 0 0 1px var(--color-secondary-200);--input-placeholder-color:var(--color-neutral-500);--input-background-focus:var(--color-neutral-100);--input-border-color:#00000030;--input-border-color-hover:var(--color-custom-5);--input-border-color-focus:var(--wharf-blue);--qr-border-color:inset 0 0 0 1px rgba(0 0 0 / 0.3), inset 0 0 0 1px var(--seafoam-mint);--checkbox-stroke:var(--wharf-blue);--checkbox-fill:var(--reef-turquoise);--error-color:var(--color-error-1);--list-item-background-color-hover:var(--color-custom-9);--list-item-text-color-hover:var(--color-secondary-500);--list-divider-color:#00000010;--text-area-background:var(--swell-mist);--text-area-text-color:#242424;--loading-circle-color:var(--reef-turquoise);--loading-circle-track-color:rgba(0 0 0 / 0.05);--wave-foreground-color:var(--body-background-color);--wave-midground-color:var(--seafoam-mint);--wave-background-color:var(--reef-turquoise)}}:host dialog.svelte-1ime0ob{--wharf-blue:var(--color-primary-700);--reef-turquoise:var(--color-secondary-300);--seafoam-mint:var(--color-secondary-200);--swell-mist:var(--color-accent-50);--color-primary-50:#f6f7f9;--color-primary-100:#ededf1;--color-primary-200:#d6d8e1;--color-primary-300:#b3b8c6;--color-primary-400:#8991a7;--color-primary-500:#6b738c;--color-primary-600:#565c73;--color-primary-700:#494e62;--color-primary-800:#3c4050;--color-primary-900:#363944;--color-primary-990:#252835;--color-secondary-50:#f1fcf9;--color-secondary-100:#cef9ed;--color-secondary-200:#b2f2e1;--color-secondary-300:#7be7ce;--color-secondary-400:#35ccae;--color-secondary-500:#1cb095;--color-secondary-600:#148d79;--color-secondary-700:#147163;--color-secondary-800:#155a51;--color-secondary-900:#164b43;--color-accent-50:#f4faf4;--color-accent-100:#e4f4e5;--color-accent-200:#cae8cc;--color-accent-300:#a1d4a3;--color-accent-400:#70b874;--color-accent-500:#4c9b51;--color-accent-600:#3a7f3e;--color-accent-700:#306534;--color-accent-800:#2a512d;--color-accent-900:#244326;--color-neutral-100:#f7f7f7;--color-neutral-200:#e3e3e3;--color-neutral-300:#c8c8c8;--color-neutral-400:#a4a4a4;--color-neutral-500:#818181;--color-neutral-600:#666666;--color-neutral-700:#515151;--color-neutral-800:#434343;--color-neutral-900:#383838;--color-custom-1:#f3f8f3;--color-custom-2:#415e60;--color-custom-3:#344b4d;--color-custom-4:#3d435a;--color-custom-5:#8ec2b4;--color-custom-6:#777b8b;--color-custom-7:#35ccae10;--color-custom-8:#575c6e;--color-custom-9:#f4f5f7;--color-error-1:#cd3939;--color-error-2:#ff5454;--color-error-3:#ffacac;font-family:system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;--measure:35ch;--fs-0:calc(var(--fs-2) * 0.75);--fs-1:calc(var(--fs-2) * 0.875);--fs-2:var(--wharfkit-font-base, 1rem);--fs-3:calc(var(--fs-2) * 1.25);--ratio:1.5;--space-4xs:calc(var(--space-3xs) / var(--ratio));--space-3xs:calc(var(--space-2xs) / var(--ratio));--space-2xs:calc(var(--space-xs) / var(--ratio));--space-xs:calc(var(--space-s) / var(--ratio));--space-s:calc(var(--space-m) / var(--ratio));--space-m:var(--wharfkit-space-base, 1rem);--space-l:calc(var(--space-m) * var(--ratio));--space-xl:calc(var(--space-l) * var(--ratio));--space-2xl:calc(var(--space-xl) * var(--ratio));--space-3xl:calc(var(--space-2xl) * var(--ratio));--space-4xl:calc(var(--space-3xl) * var(--ratio));--space-5xl:calc(var(--space-4xl) * var(--ratio));--space-6xl:calc(var(--space-5xl) * var(--ratio));--space-7xl:calc(var(--space-6xl) * var(--ratio));--space-8xl:calc(var(--space-7xl) * var(--ratio));--space-9xl:calc(var(--space-8xl) * var(--ratio));--border-radius-outer:1.5rem;--border-radius-inner:0.75rem;--header-height:var(--space-3xl)}.svelte-1ime0ob{box-sizing:border-box}.svelte-1ime0ob::selection{color:var(--wharf-blue);background-color:var(--seafoam-mint)}dialog.svelte-1ime0ob{--margin-top:var(--space-xl);font-family:system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;margin-bottom:0;margin-top:var(--margin-top);margin-inline:auto;border:none !important;border-radius:var(--border-radius-outer);padding:0;width:min(var(--space-7xl), 100vw - var(--space-m));box-shadow:0px 4px 154px rgba(0, 0, 0, 0.35);background:none}dialog.svelte-1ime0ob::backdrop{background:rgba(0, 0, 0, 0.75)}.modal-content.svelte-1ime0ob{--max-modal-content-height:calc(\n      100svh - var(--header-height) - var(--margin-top) - var(--margin-top)\n  );padding:var(--space-m);padding-bottom:var(--space-l);background-color:var(--body-background-color);overflow:hidden;overflow-y:scroll;max-height:var(--max-modal-content-height);scrollbar-gutter:stable both-edges;scrollbar-color:var(--header-background-color)}.modal-content.svelte-1ime0ob::-webkit-scrollbar{width:2px;background-color:var(--body-background-color)}.modal-content.svelte-1ime0ob::-webkit-scrollbar-thumb{background:var(--header-background-color)}');
}
function create_fragment$1(ctx) {
  let dialog_1;
  let header;
  let t2;
  let div;
  let dialog_1_data_theme_value;
  let current;
  let mounted;
  let dispose;
  header = new Header({
    props: {
      title: (
        /*$props*/
        ctx[2].title
      ),
      subtitle: (
        /*$props*/
        ctx[2].subtitle
      )
    }
  });
  header.$on(
    "cancel",
    /*cancelRequest*/
    ctx[3]
  );
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    null
  );
  return {
    c() {
      dialog_1 = element("dialog");
      create_component(header.$$.fragment);
      t2 = space();
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "class", "modal-content svelte-1ime0ob");
      attr(dialog_1, "data-theme", dialog_1_data_theme_value = /*$settings*/
      ctx[1].theme);
      attr(dialog_1, "class", "svelte-1ime0ob");
    },
    m(target, anchor) {
      insert(target, dialog_1, anchor);
      mount_component(header, dialog_1, null);
      append(dialog_1, t2);
      append(dialog_1, div);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[7](dialog_1);
      current = true;
      if (!mounted) {
        dispose = listen(dialog_1, "mousedown", self$1(prevent_default(
          /*backgroundClose*/
          ctx[4]
        )), { passive: false, capture: true });
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const header_changes = {};
      if (dirty & /*$props*/
      4) header_changes.title = /*$props*/
      ctx2[2].title;
      if (dirty & /*$props*/
      4) header_changes.subtitle = /*$props*/
      ctx2[2].subtitle;
      header.$set(header_changes);
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*$settings*/
      2 && dialog_1_data_theme_value !== (dialog_1_data_theme_value = /*$settings*/
      ctx2[1].theme)) {
        attr(dialog_1, "data-theme", dialog_1_data_theme_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(header.$$.fragment, local);
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(header.$$.fragment, local);
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(dialog_1);
      }
      destroy_component(header);
      if (default_slot) default_slot.d(detaching);
      ctx[7](null);
      mounted = false;
      dispose();
    }
  };
}
function instance$1($$self, $$props, $$invalidate) {
  let $cancelablePromises;
  let $settings;
  let $props;
  component_subscribe($$self, cancelablePromises, ($$value) => $$invalidate(8, $cancelablePromises = $$value));
  component_subscribe($$self, settings$5, ($$value) => $$invalidate(1, $settings = $$value));
  component_subscribe($$self, props, ($$value) => $$invalidate(2, $props = $$value));
  let { $$slots: slots = {}, $$scope } = $$props;
  let dialog;
  const unsubscribe = active.subscribe((current) => {
    if (dialog) {
      if (current && !dialog.open) {
        dialog.showModal();
      } else if (!current && dialog.open) {
        dialog.close();
        resetState();
      }
    }
  });
  onDestroy(unsubscribe);
  function cancelRequest() {
    $cancelablePromises.map((f2) => f2("Modal closed", true));
    active.set(false);
  }
  function backgroundClose(event) {
    var rect = dialog.getBoundingClientRect();
    var isInDialog = rect.top <= event.clientY && event.clientY <= rect.top + rect.height && rect.left <= event.clientX && event.clientX <= rect.left + rect.width;
    if (!isInDialog) {
      cancelRequest();
    }
  }
  document.addEventListener("keydown", (event) => {
    if (event.key === "Escape" && dialog.open) {
      cancelRequest();
    }
  });
  function dialog_1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      dialog = $$value;
      $$invalidate(0, dialog);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2) $$invalidate(5, $$scope = $$props2.$$scope);
  };
  return [
    dialog,
    $settings,
    $props,
    cancelRequest,
    backgroundClose,
    $$scope,
    slots,
    dialog_1_binding
  ];
}
class Modal extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1, create_fragment$1, safe_not_equal, {}, add_css);
  }
}
function create_else_block_1(ctx) {
  let p2;
  return {
    c() {
      p2 = element("p");
      p2.textContent = "Modal inactive";
    },
    m(target, anchor) {
      insert(target, p2, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(p2);
      }
    }
  };
}
function create_if_block(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [
    create_if_block_1,
    create_if_block_2,
    create_if_block_3,
    create_if_block_4,
    create_if_block_5,
    create_if_block_6,
    create_else_block
  ];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*$errorDetails*/
      ctx2[2]
    ) return 0;
    if (
      /*$prompt*/
      ctx2[0]
    ) return 1;
    if (
      /*$router*/
      ctx2[3].path === "login"
    ) return 2;
    if (
      /*$router*/
      ctx2[3].path === "transact"
    ) return 3;
    if (
      /*$router*/
      ctx2[3].path === "settings"
    ) return 4;
    if (
      /*$router*/
      ctx2[3].path === "create-account"
    ) return 5;
    return 6;
  }
  current_block_type_index = select_block_type_1(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_else_block(ctx) {
  let countdown;
  let current;
  countdown = new Countdown({});
  return {
    c() {
      create_component(countdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(countdown, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current) return;
      transition_in(countdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(countdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(countdown, detaching);
    }
  };
}
function create_if_block_6(ctx) {
  let createaccount;
  let current;
  createaccount = new CreateAccount({});
  createaccount.$on(
    "cancel",
    /*cancel*/
    ctx[4]
  );
  createaccount.$on(
    "complete",
    /*complete*/
    ctx[5]
  );
  return {
    c() {
      create_component(createaccount.$$.fragment);
    },
    m(target, anchor) {
      mount_component(createaccount, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current) return;
      transition_in(createaccount.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(createaccount.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(createaccount, detaching);
    }
  };
}
function create_if_block_5(ctx) {
  let settings2;
  let current;
  settings2 = new Settings({});
  settings2.$on(
    "cancel",
    /*cancel*/
    ctx[4]
  );
  settings2.$on(
    "complete",
    /*complete*/
    ctx[5]
  );
  return {
    c() {
      create_component(settings2.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settings2, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current) return;
      transition_in(settings2.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settings2.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settings2, detaching);
    }
  };
}
function create_if_block_4(ctx) {
  let transact2;
  let current;
  transact2 = new Transact({});
  transact2.$on(
    "cancel",
    /*cancel*/
    ctx[4]
  );
  transact2.$on(
    "complete",
    /*complete*/
    ctx[5]
  );
  return {
    c() {
      create_component(transact2.$$.fragment);
    },
    m(target, anchor) {
      mount_component(transact2, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current) return;
      transition_in(transact2.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(transact2.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(transact2, detaching);
    }
  };
}
function create_if_block_3(ctx) {
  let login2;
  let current;
  login2 = new Login({});
  login2.$on(
    "cancel",
    /*cancel*/
    ctx[4]
  );
  login2.$on(
    "complete",
    /*complete*/
    ctx[5]
  );
  return {
    c() {
      create_component(login2.$$.fragment);
    },
    m(target, anchor) {
      mount_component(login2, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current) return;
      transition_in(login2.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(login2.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(login2, detaching);
    }
  };
}
function create_if_block_2(ctx) {
  let prompt_1;
  let current;
  prompt_1 = new Prompt({});
  prompt_1.$on(
    "cancel",
    /*cancel*/
    ctx[4]
  );
  prompt_1.$on(
    "complete",
    /*complete*/
    ctx[5]
  );
  return {
    c() {
      create_component(prompt_1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(prompt_1, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current) return;
      transition_in(prompt_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(prompt_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(prompt_1, detaching);
    }
  };
}
function create_if_block_1(ctx) {
  let error2;
  let current;
  error2 = new Error$1({});
  error2.$on(
    "cancel",
    /*cancel*/
    ctx[4]
  );
  error2.$on(
    "complete",
    /*complete*/
    ctx[5]
  );
  return {
    c() {
      create_component(error2.$$.fragment);
    },
    m(target, anchor) {
      mount_component(error2, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current) return;
      transition_in(error2.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(error2.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(error2, detaching);
    }
  };
}
function create_default_slot(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block, create_else_block_1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*$active*/
      ctx2[1]
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
}
function create_fragment(ctx) {
  let modal;
  let current;
  modal = new Modal({
    props: {
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(modal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(modal, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const modal_changes = {};
      if (dirty & /*$$scope, $errorDetails, $prompt, $router, $active*/
      1039) {
        modal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      modal.$set(modal_changes);
    },
    i(local) {
      if (current) return;
      transition_in(modal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(modal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(modal, detaching);
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let $prompt;
  let $accountCreationPromise;
  let $loginPromise;
  let $active;
  let $errorDetails;
  let $router;
  component_subscribe($$self, prompt, ($$value) => $$invalidate(0, $prompt = $$value));
  component_subscribe($$self, accountCreationPromise, ($$value) => $$invalidate(7, $accountCreationPromise = $$value));
  component_subscribe($$self, loginPromise, ($$value) => $$invalidate(8, $loginPromise = $$value));
  component_subscribe($$self, active, ($$value) => $$invalidate(1, $active = $$value));
  component_subscribe($$self, errorDetails, ($$value) => $$invalidate(2, $errorDetails = $$value));
  component_subscribe($$self, router, ($$value) => $$invalidate(3, $router = $$value));
  let { i18n } = $$props;
  setContext("i18n", i18n);
  function cancel2({ detail }) {
    if ($loginPromise) {
      $loginPromise.reject(detail);
    }
    if ($prompt) {
      $prompt.reject(detail);
      prompt.reset();
    }
    router.back();
  }
  function complete({ detail }) {
    if ($loginPromise) {
      $loginPromise.resolve(detail);
    }
    if ($accountCreationPromise) {
      $accountCreationPromise.resolve(detail);
    }
    if ($prompt) {
      $prompt.resolve(detail);
      prompt.reset();
      router.back();
    }
  }
  const unsubscribe = router.subscribe((current) => {
    if (current && current.path === "login") {
      allowSettings.set(true);
    } else {
      allowSettings.set(false);
    }
  });
  onDestroy(unsubscribe);
  $$self.$$set = ($$props2) => {
    if ("i18n" in $$props2) $$invalidate(6, i18n = $$props2.i18n);
  };
  return [$prompt, $active, $errorDetails, $router, cancel2, complete, i18n];
}
class App extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, { i18n: 6 });
  }
}
var H$1 = Object.defineProperty, q = Object.defineProperties;
var B$1 = Object.getOwnPropertyDescriptors;
var S$1 = Object.getOwnPropertySymbols;
var A$1 = Object.prototype.hasOwnProperty, N$1 = Object.prototype.propertyIsEnumerable;
var j$1 = (o, t2, e) => t2 in o ? H$1(o, t2, { enumerable: true, configurable: true, writable: true, value: e }) : o[t2] = e, n$1 = (o, t2) => {
  for (var e in t2 || (t2 = {})) A$1.call(t2, e) && j$1(o, e, t2[e]);
  if (S$1) for (var e of S$1(t2)) N$1.call(t2, e) && j$1(o, e, t2[e]);
  return o;
}, u$2 = (o, t2) => q(o, B$1(t2));
var T$1 = (o, t2) => {
  var e = {};
  for (var a in o) A$1.call(o, a) && t2.indexOf(a) < 0 && (e[a] = o[a]);
  if (o != null && S$1) for (var a of S$1(o)) t2.indexOf(a) < 0 && N$1.call(o, a) && (e[a] = o[a]);
  return e;
};
var C$1 = ["error", "warn", "debug"], z$1 = ({ logger: o = console, level: t2 = C$1[1], prefix: e = "[i18n]: " }) => C$1.reduce((a, r, s2) => u$2(n$1({}, a), { [r]: (i2) => C$1.indexOf(t2) >= s2 && o[r](`${e}${i2}`) }), {}), d$1 = z$1({}), V$1 = (o) => {
  d$1 = o;
};
var F$1 = (l2) => {
  var c2 = l2, { parser: o, key: t2, params: e, translations: a, locale: r, fallbackLocale: s2 } = c2, i2 = T$1(c2, ["parser", "key", "params", "translations", "locale", "fallbackLocale"]);
  if (!t2) return d$1.warn(`No translation key provided ('${r}' locale). Skipping translation...`), "";
  if (!r) return d$1.warn(`No locale provided for '${t2}' key. Skipping translation...`), "";
  let f2 = (a[r] || {})[t2];
  return s2 && f2 === void 0 && (f2 = (a[s2] || {})[t2]), i2.hasOwnProperty("fallbackValue") && f2 === void 0 ? i2.fallbackValue : o.parse(f2, e, r, t2);
}, h$1 = (...o) => o.length ? o.filter((t2) => !!t2).map((t2) => {
  let e = `${t2}`.toLowerCase();
  try {
    let [a] = Intl.Collator.supportedLocalesOf(t2);
    if (!a) throw new Error();
    e = a;
  } catch (a) {
    d$1.warn(`'${t2}' locale is non-standard.`);
  }
  return e;
}) : [], x$1 = (o, t2, e) => Object.keys(o || {}).reduce((a, r) => {
  let s2 = o[r], i2 = e ? `${e}.${r}` : `${r}`;
  return t2 && Array.isArray(s2) ? u$2(n$1({}, a), { [i2]: s2.map((l2) => x$1(l2, t2)) }) : s2 && typeof s2 == "object" ? n$1(n$1({}, a), x$1(s2, t2, i2)) : u$2(n$1({}, a), { [i2]: s2 });
}, {}), G$1 = (o) => o.reduce((t2, { key: e, data: a, locale: r }) => {
  if (!a) return t2;
  let [s2] = h$1(r), i2 = u$2(n$1({}, t2[s2] || {}), { [e]: a });
  return u$2(n$1({}, t2), { [s2]: i2 });
}, {}), E$1 = async (o) => {
  try {
    let t2 = await Promise.all(o.map((r) => {
      var s2 = r, { loader: e } = s2, a = T$1(s2, ["loader"]);
      return new Promise(async (i2) => {
        let l2;
        try {
          l2 = await e();
        } catch (c2) {
          d$1.error(`Failed to load translation. Verify your '${a.locale}' > '${a.key}' Loader.`), d$1.error(c2);
        }
        i2(u$2(n$1({ loader: e }, a), { data: l2 }));
      });
    }));
    return G$1(t2);
  } catch (t2) {
    d$1.error(t2);
  }
  return {};
}, W$1 = (o) => (t2) => {
  try {
    if (typeof t2 == "string") return t2 === o;
    if (typeof t2 == "object") return t2.test(o);
  } catch (e) {
    d$1.error("Invalid route config!");
  }
  return false;
}, O$1 = (o, t2) => {
  let e = true;
  try {
    e = Object.keys(o).filter((a) => o[a] !== void 0).every((a) => o[a] === t2[a]);
  } catch (a) {
  }
  return e;
};
var D$2 = 1e3 * 60 * 60 * 24, K = class {
  constructor(t2) {
    this.cachedAt = 0;
    this.loadedKeys = {};
    this.currentRoute = writable();
    this.config = writable();
    this.isLoading = writable(false);
    this.promises = /* @__PURE__ */ new Set();
    this.loading = { subscribe: this.isLoading.subscribe, toPromise: (t3, e) => {
      let { fallbackLocale: a } = get_store_value(this.config), r = Array.from(this.promises).filter((s2) => {
        let i2 = O$1({ locale: h$1(t3)[0], route: e }, s2);
        return a && (i2 = i2 || O$1({ locale: h$1(a)[0], route: e }, s2)), i2;
      }).map(({ promise: s2 }) => s2);
      return Promise.all(r);
    }, get: () => get_store_value(this.isLoading) };
    this.privateRawTranslations = writable({});
    this.rawTranslations = { subscribe: this.privateRawTranslations.subscribe, get: () => get_store_value(this.rawTranslations) };
    this.privateTranslations = writable({});
    this.translations = { subscribe: this.privateTranslations.subscribe, get: () => get_store_value(this.translations) };
    this.locales = u$2(n$1({}, derived([this.config, this.privateTranslations], ([t3, e]) => {
      if (!t3) return [];
      let { loaders: a = [] } = t3, r = a.map(({ locale: i2 }) => i2), s2 = Object.keys(e).map((i2) => i2);
      return Array.from(/* @__PURE__ */ new Set([...h$1(...r), ...h$1(...s2)]));
    }, [])), { get: () => get_store_value(this.locales) });
    this.internalLocale = writable();
    this.loaderTrigger = derived([this.internalLocale, this.currentRoute], ([t3, e], a) => {
      var r, s2;
      t3 !== void 0 && e !== void 0 && !(t3 === ((r = get_store_value(this.loaderTrigger)) == null ? void 0 : r[0]) && e === ((s2 = get_store_value(this.loaderTrigger)) == null ? void 0 : s2[1])) && (d$1.debug("Triggering translation load..."), a([t3, e]));
    }, []);
    this.localeHelper = writable();
    this.locale = { subscribe: this.localeHelper.subscribe, forceSet: this.localeHelper.set, set: this.internalLocale.set, update: this.internalLocale.update, get: () => get_store_value(this.locale) };
    this.initialized = derived([this.locale, this.currentRoute, this.privateTranslations], ([t3, e, a], r) => {
      get_store_value(this.initialized) || r(t3 !== void 0 && e !== void 0 && !!Object.keys(a).length);
    });
    this.translation = derived([this.privateTranslations, this.locale, this.isLoading], ([t3, e, a], r) => {
      let s2 = t3[e];
      s2 && Object.keys(s2).length && !a && r(s2);
    }, {});
    this.t = u$2(n$1({}, derived([this.config, this.translation], (r) => {
      var [s2] = r, i2 = s2, { parser: t3, fallbackLocale: e } = i2, a = T$1(i2, ["parser", "fallbackLocale"]);
      return (l2, ...c2) => F$1(n$1({ parser: t3, key: l2, params: c2, translations: this.translations.get(), locale: this.locale.get(), fallbackLocale: e }, a.hasOwnProperty("fallbackValue") ? { fallbackValue: a.fallbackValue } : {}));
    })), { get: (t3, ...e) => get_store_value(this.t)(t3, ...e) });
    this.l = u$2(n$1({}, derived([this.config, this.translations], (s2) => {
      var [i2, ...l2] = s2, c2 = i2, { parser: t3, fallbackLocale: e } = c2, a = T$1(c2, ["parser", "fallbackLocale"]), [r] = l2;
      return (f2, b, ...R2) => F$1(n$1({ parser: t3, key: b, params: R2, translations: r, locale: f2, fallbackLocale: e }, a.hasOwnProperty("fallbackValue") ? { fallbackValue: a.fallbackValue } : {}));
    })), { get: (t3, e, ...a) => get_store_value(this.l)(t3, e, ...a) });
    this.getLocale = (t3) => {
      let { fallbackLocale: e } = get_store_value(this.config) || {}, a = t3 || e;
      if (!a) return;
      let r = this.locales.get();
      return r.find((i2) => h$1(a).includes(i2)) || r.find((i2) => h$1(e).includes(i2));
    };
    this.setLocale = (t3) => {
      if (t3 && t3 !== get_store_value(this.internalLocale)) return d$1.debug(`Setting '${t3}' locale.`), this.internalLocale.set(t3), this.loading.toPromise(t3, get_store_value(this.currentRoute));
    };
    this.setRoute = (t3) => {
      if (t3 !== get_store_value(this.currentRoute)) {
        d$1.debug(`Setting '${t3}' route.`), this.currentRoute.set(t3);
        let e = get_store_value(this.internalLocale);
        return this.loading.toPromise(e, t3);
      }
    };
    this.loadConfig = async (t3) => {
      await this.configLoader(t3);
    };
    this.getTranslationProps = async (t3 = this.locale.get(), e = get_store_value(this.currentRoute)) => {
      let a = get_store_value(this.config);
      if (!a || !t3) return [];
      let r = this.translations.get(), { loaders: s2, fallbackLocale: i2 = "", cache: l2 = D$2 } = a || {}, c2 = Number.isNaN(+l2) ? D$2 : +l2;
      this.cachedAt ? Date.now() > c2 + this.cachedAt && (d$1.debug("Refreshing cache."), this.loadedKeys = {}, this.cachedAt = 0) : (d$1.debug("Setting cache timestamp."), this.cachedAt = Date.now());
      let [f2, b] = h$1(t3, i2), R2 = r[f2], I = r[b], k = (s2 || []).map(($2) => {
        var L2 = $2, { locale: p2 } = L2, y = T$1(L2, ["locale"]);
        return u$2(n$1({}, y), { locale: h$1(p2)[0] });
      }).filter(({ routes: p2 }) => !p2 || (p2 || []).some(W$1(e))).filter(({ key: p2, locale: y }) => y === f2 && (!R2 || !(this.loadedKeys[f2] || []).includes(p2)) || i2 && y === b && (!I || !(this.loadedKeys[b] || []).includes(p2)));
      if (k.length) {
        this.isLoading.set(true), d$1.debug("Fetching translations...");
        let p2 = await E$1(k);
        this.isLoading.set(false);
        let y = Object.keys(p2).reduce((L2, P2) => u$2(n$1({}, L2), { [P2]: Object.keys(p2[P2]) }), {}), $2 = k.filter(({ key: L2, locale: P2 }) => (y[P2] || []).some((w) => `${w}`.startsWith(L2))).reduce((L2, { key: P2, locale: w }) => u$2(n$1({}, L2), { [w]: [...L2[w] || [], P2] }), {});
        return [p2, $2];
      }
      return [];
    };
    this.addTranslations = (t3, e) => {
      if (!t3) return;
      let a = get_store_value(this.config), { preprocess: r } = a || {};
      d$1.debug("Adding translations...");
      let s2 = Object.keys(t3 || {});
      this.privateRawTranslations.update((i2) => s2.reduce((l2, c2) => u$2(n$1({}, l2), { [c2]: n$1(n$1({}, l2[c2] || {}), t3[c2]) }), i2)), this.privateTranslations.update((i2) => s2.reduce((l2, c2) => {
        let f2 = true, b = t3[c2];
        return typeof r == "function" && (b = r(b)), (typeof r == "function" || r === "none") && (f2 = false), u$2(n$1({}, l2), { [c2]: n$1(n$1({}, l2[c2] || {}), f2 ? x$1(b, r === "preserveArrays") : b) });
      }, i2)), s2.forEach((i2) => {
        let l2 = Object.keys(t3[i2]).map((c2) => `${c2}`.split(".")[0]);
        e && (l2 = e[i2]), this.loadedKeys[i2] = Array.from(/* @__PURE__ */ new Set([...this.loadedKeys[i2] || [], ...l2 || []]));
      });
    };
    this.loader = async ([t3, e]) => {
      let a = this.getLocale(t3) || void 0;
      d$1.debug(`Adding loader promise for '${a}' locale and '${e}' route.`);
      let r = (async () => {
        let s2 = await this.getTranslationProps(a, e);
        s2.length && this.addTranslations(...s2);
      })();
      this.promises.add({ locale: a, route: e, promise: r }), r.then(() => {
        a && this.locale.get() !== a && this.locale.forceSet(a);
      });
    };
    this.loadTranslations = (t3, e = get_store_value(this.currentRoute) || "") => {
      let a = this.getLocale(t3);
      if (a) return this.setRoute(e), this.setLocale(a), this.loading.toPromise(a, e);
    };
    this.loaderTrigger.subscribe(this.loader), this.isLoading.subscribe(async (e) => {
      e && this.promises.size && (await this.loading.toPromise(), this.promises.clear(), d$1.debug("Loader promises have been purged."));
    }), t2 && this.loadConfig(t2);
  }
  async configLoader(t2) {
    if (!t2) return d$1.error("No config provided!");
    let l2 = t2, { initLocale: e, fallbackLocale: a, translations: r, log: s2 } = l2, i2 = T$1(l2, ["initLocale", "fallbackLocale", "translations", "log"]);
    s2 && V$1(z$1(s2)), [e] = h$1(e), [a] = h$1(a), d$1.debug("Setting config."), this.config.set(n$1({ initLocale: e, fallbackLocale: a, translations: r }, i2)), r && this.addTranslations(r), e && await this.loadTranslations(e);
  }
};
var R = Object.defineProperty, A = Object.defineProperties;
var E = Object.getOwnPropertyDescriptors;
var x = Object.getOwnPropertySymbols;
var C = Object.prototype.hasOwnProperty, O = Object.prototype.propertyIsEnumerable;
var p$1 = (t2, e, r) => e in t2 ? R(t2, e, { enumerable: true, configurable: true, writable: true, value: r }) : t2[e] = r, u$1 = (t2, e) => {
  for (var r in e || (e = {})) C.call(e, r) && p$1(t2, r, e[r]);
  if (x) for (var r of x(e)) O.call(e, r) && p$1(t2, r, e[r]);
  return t2;
}, T = (t2, e) => A(t2, E(e));
var c = (t2, e) => {
  var r = {};
  for (var i2 in t2) C.call(t2, i2) && e.indexOf(i2) < 0 && (r[i2] = t2[i2]);
  if (t2 != null && x) for (var i2 of x(t2)) e.indexOf(i2) < 0 && O.call(t2, i2) && (r[i2] = t2[i2]);
  return r;
};
var j = (t2, e) => {
  for (var r in e) R(t2, r, { get: e[r], enumerable: true });
};
var h = {};
j(h, { ago: () => Q, currency: () => W, date: () => G, eq: () => $, gt: () => L, gte: () => z, lt: () => V, lte: () => v, ne: () => S, number: () => B });
var g = (t2, e) => {
  let { modifierDefaults: r } = e || {}, { [t2]: i2 } = r || {};
  return i2 || {};
};
var $ = ({ value: t2, options: e = [], defaultValue: r = "" }) => (e.find(({ key: i2 }) => `${i2}`.toLowerCase() === `${t2}`.toLowerCase()) || {}).value || r, S = ({ value: t2, options: e = [], defaultValue: r = "" }) => (e.find(({ key: i2 }) => `${i2}`.toLowerCase() !== `${t2}`.toLowerCase()) || {}).value || r, V = ({ value: t2, options: e = [], defaultValue: r = "" }) => (e.sort((o, n2) => +o.key - +n2.key).find(({ key: o }) => +t2 < +o) || {}).value || r, L = ({ value: t2, options: e = [], defaultValue: r = "" }) => (e.sort((o, n2) => +n2.key - +o.key).find(({ key: o }) => +t2 > +o) || {}).value || r, v = ({ value: t2, options: e = [], defaultValue: r = "" }) => $({ value: t2, options: e, defaultValue: V({ value: t2, options: e, defaultValue: r }) }), z = ({ value: t2, options: e = [], defaultValue: r = "" }) => $({ value: t2, options: e, defaultValue: L({ value: t2, options: e, defaultValue: r }) }), B = ({ value: t2, props: e, defaultValue: r = "", locale: i2 = "", parserOptions: o }) => {
  if (!i2) return "";
  let s2 = g("number", o), { maximumFractionDigits: n2 } = s2, m2 = c(s2, ["maximumFractionDigits"]), d2 = (e == null ? void 0 : e.number) || {}, { maximumFractionDigits: f2 = n2 || 2 } = d2, a = c(d2, ["maximumFractionDigits"]);
  return new Intl.NumberFormat(i2, u$1(T(u$1({}, m2), { maximumFractionDigits: f2 }), a)).format(+t2 || +r);
}, G = ({ value: t2, props: e, defaultValue: r = "", locale: i2 = "", parserOptions: o }) => {
  if (!i2) return "";
  let n2 = c(g("date", o), []), m2 = c((e == null ? void 0 : e.date) || {}, []);
  return new Intl.DateTimeFormat(i2, u$1(u$1({}, n2), m2)).format(+t2 || +r);
}, D$1 = [{ key: "second", multiplier: 1e3 }, { key: "minute", multiplier: 60 }, { key: "hour", multiplier: 60 }, { key: "day", multiplier: 24 }, { key: "week", multiplier: 7 }, { key: "month", multiplier: 13 / 3 }, { key: "year", multiplier: 12 }], N = (t2 = "", e = "") => new RegExp(`^${t2}s?$`).test(e), H = (t2) => D$1.indexOf(D$1.find(({ key: e }) => N(e, t2))), J = (t2, e) => D$1.reduce(([r, i2], { key: o, multiplier: n2 }, m2) => {
  if (N(i2, e)) return [r, i2];
  if (!i2 || m2 === H(i2) + 1) {
    let f2 = Math.round(r / n2);
    if (!i2 || Math.abs(f2) >= 1 || e !== "auto") return [f2, o];
  }
  return [r, i2];
}, [t2, ""]), Q = ({ value: t2, defaultValue: e = "", locale: r = "", props: i2, parserOptions: o }) => {
  if (!r) return "";
  let k = g("ago", o), { format: n2, numeric: m2 } = k, f2 = c(k, ["format", "numeric"]), y = (i2 == null ? void 0 : i2.ago) || {}, { format: a = n2 || "auto", numeric: s2 = m2 || "auto" } = y, d2 = c(y, ["format", "numeric"]), M2 = +t2 || +e, l2 = J(M2, a);
  return new Intl.RelativeTimeFormat(r, u$1(T(u$1({}, f2), { numeric: s2 }), d2)).format(...l2);
}, W = ({ value: t2, defaultValue: e = "", locale: r = "", props: i2, parserOptions: o }) => {
  if (!r) return "";
  let M2 = g("currency", o), { ratio: n2, currency: m2 } = M2, f2 = c(M2, ["ratio", "currency"]), l2 = (i2 == null ? void 0 : i2.currency) || {}, { ratio: a = n2 || 1, currency: s2 = m2 } = l2, d2 = c(l2, ["ratio", "currency"]);
  return new Intl.NumberFormat(r, u$1(T(u$1({}, f2), { style: "currency", currency: s2 }), d2)).format(a * (t2 || e));
};
var X = (t2) => typeof t2 == "string" && /{{(?:(?!{{|}}).)+}}/.test(t2), F = (t2) => typeof t2 == "string" ? t2.replace(/\\(?=:|;|{|})/g, "") : t2, Y = ({ value: t2, props: e, payload: r, parserOptions: i2, locale: o }) => `${t2}`.replace(/{{\s*(?:(?!{{|}}).)+\s*}}/g, (n2) => {
  let m2 = F(`${n2.match(/(?!{|\s).+?(?!\\[:;]).(?=\s*(?:[:;]|}}$))/)}`), f2 = r == null ? void 0 : r[m2], [, a = ""] = n2.match(/.+?(?!\\;).;\s*default\s*:\s*([^\s:;].+?(?:\\[:;]|[^;}])*)(?=\s*(?:;|}}$))/i) || [];
  a = a || (r == null ? void 0 : r.default) || "";
  let [, s2 = ""] = n2.match(/{{\s*(?:[^;]|(?:\\;))+\s*(?:(?!\\:).[:])\s*(?!\s)((?:\\;|[^;])+?)(?=\s*(?:[;]|}}$))/i) || [];
  if (f2 === void 0 && s2 !== "ne") return a;
  let d2 = !!s2, { customModifiers: M2 } = i2 || {}, l2 = u$1(u$1({}, h), M2 || {});
  s2 = Object.keys(l2).includes(s2) ? s2 : "eq";
  let k = l2[s2], y = (n2.match(/[^\s:;{](?:[^;]|\\[;])+[^:;}]/gi) || []).reduce((b, I, q2) => {
    if (q2 > 0) {
      let P2 = F(`${I.match(/(?:(?:\\:)|[^:])+/)}`.trim()), w = `${I.match(/(?:(?:\\:)|[^:])+$/)}`.trimStart();
      if (P2 && P2 !== "default" && w) return [...b, { key: P2, value: w }];
    }
    return b;
  }, []);
  return !d2 && !y.length ? f2 : k({ value: f2, options: y, props: e, defaultValue: a, locale: o, parserOptions: i2 });
}), U = ({ value: t2, props: e, payload: r, parserOptions: i2, locale: o }) => {
  if (X(t2)) {
    let n2 = Y({ value: t2, payload: r, props: e, parserOptions: i2, locale: o });
    return U({ value: n2, payload: r, props: e, parserOptions: i2, locale: o });
  } else return F(t2);
}, Z = (t2) => ({ parse: (e, [r, i2], o, n2) => (r != null && r.default && e === void 0 && (e = r.default), e === void 0 && (e = n2), U({ value: e, payload: r, props: i2, parserOptions: t2, locale: o })) }), rt = Z;
var n = Object.defineProperty, M = Object.defineProperties;
var u = Object.getOwnPropertyDescriptors;
var s = Object.getOwnPropertySymbols;
var f = Object.prototype.hasOwnProperty, P = Object.prototype.propertyIsEnumerable;
var i = (r, o, e) => o in r ? n(r, o, { enumerable: true, configurable: true, writable: true, value: e }) : r[o] = e, p = (r, o) => {
  for (var e in o || (o = {})) f.call(o, e) && i(r, e, o[e]);
  if (s) for (var e of s(o)) P.call(o, e) && i(r, e, o[e]);
  return r;
}, d = (r, o) => M(r, u(o));
var l = (r, o) => {
  var e = {};
  for (var a in r) f.call(r, a) && o.indexOf(a) < 0 && (e[a] = r[a]);
  if (r != null && s) for (var a of s(r)) o.indexOf(a) < 0 && P.call(r, a) && (e[a] = r[a]);
  return e;
};
var m = (e) => {
  var a = e, { parserOptions: r = {} } = a, o = l(a, ["parserOptions"]);
  return d(p({}, o), { parser: rt(r) });
}, t = class extends K {
  constructor(e) {
    super(e && m(e));
    this.loadConfig = (e2) => super.configLoader(m(e2));
  }
}, D = t;
var accept$4 = "Accept";
var cancel$4 = "Cancel";
var close$4 = "Close";
var decline$4 = "Decline";
var error$4 = {
  title: "Error",
  subtitle: "An Error happened."
};
var loading$4 = "Loading…";
var login$4 = {
  complete: "Awaiting response from your wallet.",
  enter: {
    account: "Enter account name",
    lookup: "Lookup Account",
    not_found: "Unable to find account"
  },
  select: {
    account: "Select an available account",
    blockchain: "Select which blockchain to login with",
    wallet: "Connect your wallet to login",
    no_accounts: "No accounts found",
    no_match: "No accounts found matching {{publicKey}}"
  },
  title: "Login",
  "title-app": "{{appName}}"
};
var transact$4 = {
  title: "Transact",
  subtitle: " ",
  processing: "Processing transaction…",
  signing: "Signing transaction",
  signed: "Transaction signed",
  broadcasting: "Broadcasting transaction",
  broadcasted: "Transaction sent"
};
var settings$4 = {
  title: "Settings",
  language: {
    title: "Language"
  },
  theme: {
    title: "Theme",
    automatic: "Automatic",
    light: "Light",
    dark: "Dark"
  },
  animations: {
    title: "Animations",
    enabled: "Enabled",
    disabled: "Disabled"
  },
  github: "Report an issue on Github",
  about: {
    title: "About",
    version: "Version {{version}}",
    author: "An open source SDK for Antelope-based blockchains created by Greymass and made possible through funding by the Antelope Coalition (EOS, Telos, UX, and WAX).",
    link: "Read more about Wharf"
  }
};
var en = {
  accept: accept$4,
  cancel: cancel$4,
  close: close$4,
  decline: decline$4,
  error: error$4,
  loading: loading$4,
  login: login$4,
  transact: transact$4,
  settings: settings$4
};
var accept$3 = "받아들이다";
var cancel$3 = "취소";
var close$3 = "닫다";
var decline$3 = "거절하다";
var error$3 = {
  title: "오류",
  subtitle: "오류가 발생했습니다."
};
var loading$3 = "로드...";
var login$3 = {
  complete: "",
  enter: {
    account: "Enter account name",
    lookup: "Lookup Account",
    not_found: "Unable to find account"
  },
  select: {
    account: "계정 선택",
    blockchain: "블록체인 선택",
    wallet: "지갑 선택",
    no_match: "{{publicKey}}와 일치하는 계정을 찾을 수 없습니다."
  },
  title: "로그인",
  "title-app": "{{appName}}에 로그인"
};
var transact$3 = {
  title: "거래하다",
  subtitle: " ",
  processing: "Performing transaction...",
  signing: "서명 트랜잭션",
  signed: "트랜잭션 서명",
  broadcasting: "방송 거래",
  broadcasted: "거래 방송"
};
var settings$3 = {
  title: "설정",
  language: {
    title: "언어"
  },
  theme: {
    title: "테마",
    automatic: "자동",
    light: "밝은 테마",
    dark: "어두운 테마"
  },
  animations: {
    title: "애니메이션",
    enabled: "활성화",
    disabled: "비활성화"
  },
  github: "Github에서 문제 보고",
  about: {
    title: "정보",
    version: "{{version}} 버전",
    author: "",
    link: "부두에 대해 자세히 알아보기"
  }
};
var ko = {
  accept: accept$3,
  cancel: cancel$3,
  close: close$3,
  decline: decline$3,
  error: error$3,
  loading: loading$3,
  login: login$3,
  transact: transact$3,
  settings: settings$3
};
var accept$2 = "接受";
var cancel$2 = "取消";
var close$2 = "关闭";
var decline$2 = "下降";
var error$2 = {
  title: "错误",
  subtitle: "发生错误。"
};
var loading$2 = "加载中。。。";
var login$2 = {
  complete: "",
  enter: {
    account: "Enter account name",
    lookup: "Lookup Account",
    not_found: "Unable to find account"
  },
  select: {
    account: "选择一个帐户",
    blockchain: "选择一个区块链",
    wallet: "选择一个钱包",
    no_match: "未找到与 {{publicKey}} 匹配的帐户。"
  },
  title: "登陆",
  "title-app": "登陆到 {{appName}}"
};
var transact$2 = {
  title: "办理",
  subtitle: " ",
  processing: "Performing transaction...",
  signing: "签署交易",
  signed: "交易已签署",
  broadcasting: "广播交易",
  broadcasted: "交易广播"
};
var settings$2 = {
  title: "设置",
  language: {
    title: "语言"
  },
  theme: {
    title: "主题",
    automatic: "自动",
    light: "浅色",
    dark: "深色"
  },
  animations: {
    title: "动画",
    enabled: "启用",
    disabled: "禁用"
  },
  github: "在 Github 上报告问题",
  about: {
    title: "关于",
    version: "版本 {{version}}",
    author: "",
    link: "阅读更多关于码头的信息"
  }
};
var zh_hans = {
  accept: accept$2,
  cancel: cancel$2,
  close: close$2,
  decline: decline$2,
  error: error$2,
  loading: loading$2,
  login: login$2,
  transact: transact$2,
  settings: settings$2
};
var accept$1 = "接受";
var cancel$1 = "取消";
var close$1 = "關閉";
var decline$1 = "下降";
var error$1 = {
  title: "錯誤",
  subtitle: "發生錯誤。"
};
var loading$1 = "裝載。。。";
var login$1 = {
  complete: "",
  enter: {
    account: "Enter account name",
    lookup: "Lookup Account",
    not_found: "Unable to find account"
  },
  select: {
    account: "選擇一個帳戶",
    blockchain: "選擇一個區塊鏈",
    wallet: "選擇一個錢包",
    no_match: "未找到與 {{publicKey}} 匹配的帳戶。"
  },
  title: "登錄",
  "title-app": "登錄到 {{appName}}"
};
var transact$1 = {
  title: "辦理",
  subtitle: "",
  processing: "Performing transaction...",
  signing: "簽署交易",
  signed: "交易已簽署",
  broadcasting: "廣播交易",
  broadcasted: "交易廣播"
};
var settings$1 = {
  title: "設置",
  language: {
    title: "語言"
  },
  theme: {
    title: "主題",
    automatic: "自動",
    light: "光",
    dark: "暗"
  },
  animations: {
    title: "動畫",
    enabled: "啟用",
    disabled: "殘"
  },
  github: "在 Github 上報告問題",
  about: {
    title: "關於",
    version: "版本 {{version}}",
    author: "",
    link: "閱讀更多關於碼頭的資訊"
  }
};
var zh_hant = {
  accept: accept$1,
  cancel: cancel$1,
  close: close$1,
  decline: decline$1,
  error: error$1,
  loading: loading$1,
  login: login$1,
  transact: transact$1,
  settings: settings$1
};
var accept = "Kabul Et";
var cancel = "İptal";
var close = "Kapat";
var decline = "Reddet";
var error = {
  title: "Hata",
  subtitle: "Bir Hata meydana geldi."
};
var loading = "Yükleniyor...";
var login = {
  complete: "Cüzdanınızdan yanıt bekleniyor.",
  enter: {
    account: "Hesap adını girin",
    lookup: "Hesap Ara",
    not_found: "Hesap bulunamadı"
  },
  select: {
    account: "Mevcut bir hesap seçin",
    blockchain: "Hangi blockchain ile giriş yapılacağını seçin",
    wallet: "Cüzdanınızı bağlayarak giriş yapın",
    no_match: "{{publicKey}} ile eşleşen hesap bulunamadı"
  },
  title: "Giriş",
  "title-app": "{{appName}}"
};
var transact = {
  title: "İşlem",
  subtitle: " ",
  processing: "İşlem yapılıyor...",
  signing: "İşlem imzalanıyor",
  signed: "İşlem imzalandı",
  broadcasting: "İşlem yayınlanıyor",
  broadcasted: "İşlem gönderildi"
};
var settings = {
  title: "Ayarlar",
  language: {
    title: "Dil"
  },
  theme: {
    title: "Tema",
    automatic: "Otomatik",
    light: "Açık",
    dark: "Koyu"
  },
  animations: {
    title: "Animasyonlar",
    enabled: "Etkin",
    disabled: "Devre Dışı"
  },
  github: "Github üzerinde bir sorun bildir",
  about: {
    title: "Hakkında",
    version: "Sürüm {{version}}",
    author: "Greymass tarafından oluşturulan ve Antelope tabanlı blockchain'ler için bir açık kaynak SDK olan Wharf'ı, Antelope Koalisyonu (EOS, Telos, UX ve WAX) tarafından finanse edilerek mümkün kılınmıştır.",
    link: "Wharf hakkında daha fazla bilgi edinin"
  }
};
var tr = {
  accept,
  cancel,
  close,
  decline,
  error,
  loading,
  login,
  transact,
  settings
};
const translations = {
  en: { ...lang, ...en },
  ko: { ...lang, ...ko },
  "zh-Hans": { ...lang, ...zh_hans },
  "zh-Hant": { ...lang, ...zh_hant },
  tr: { ...lang, ...tr }
};
const ZH_LANGUAGE_MAPPINGS = {
  zh: "zh-Hans",
  "zh-cn": "zh-Hans",
  "zh-sg": "zh-Hans",
  "zh-hans": "zh-Hans",
  "zh-tw": "zh-Hant",
  "zh-hk": "zh-Hant",
  "zh-hant": "zh-Hant"
};
const config = {
  initLocale: "en",
  translations
};
const makeLocalization = (options = {}) => {
  const params = {
    ...config,
    ...options
  };
  return new D(params);
};
function mapChineseLanguage(lang2) {
  if (!lang2)
    return "zh-Hans";
  const lowerLang = lang2.toLowerCase().trim();
  return ZH_LANGUAGE_MAPPINGS[lowerLang] || "zh-Hans";
}
new D(config);
const defaultWebRendererOptions = {
  id: "wharfkit-web-ui",
  minimal: false
};
const getNavigatorLanguage = () => {
  const lang2 = navigator.languages && navigator.languages.length ? navigator.languages[0] : navigator.language || "en";
  let mainLang = lang2.split("-")[0];
  if ("zh" === mainLang) {
    mainLang = mapChineseLanguage(lang2);
  }
  return mainLang;
};
class WebRenderer extends AbstractUserInterface {
  constructor(options = defaultWebRendererOptions) {
    super();
    this.elementId = "wharfkit-web-ui";
    this.initialized = false;
    this.logging = false;
    this.minimal = false;
    this.addCancelablePromise = (promise2) => cancelablePromises.update((current) => [...current, promise2]);
    this.options = options;
    if (typeof document !== "undefined") {
      this.initialize();
    }
  }
  initialize() {
    if (this.initialized) {
      return;
    }
    const { options } = this;
    this.element = document.createElement("div");
    this.elementId = options.id || defaultWebRendererOptions.id;
    this.element.id = this.elementId;
    this.shadow = this.element.attachShadow({ mode: "closed" });
    this.i18n = makeLocalization();
    let lang2 = getNavigatorLanguage();
    this.minimal = options.minimal || false;
    const settingsLanguage = get_store_value(settings$5).language;
    if (settingsLanguage) {
      lang2 = settingsLanguage;
    }
    if (options.logging !== void 0) {
      this.logging = options.logging;
    }
    this.log(`Setting language to ${lang2}`);
    settings$5.update((current) => ({ ...current, language: lang2 }));
    this.i18n.loadTranslations(lang2);
    if (document.readyState === "complete" || document.readyState === "interactive") {
      this.appendDialogElement();
    } else {
      document.addEventListener("DOMContentLoaded", () => this.appendDialogElement());
    }
    this.initialized = true;
  }
  appendDialogElement() {
    const existing = document.getElementById(this.elementId);
    if (!this.element || !this.shadow) {
      throw new Error("The WebRenderer is not initialized. Call the initialize method first.");
    }
    if (!existing) {
      document.body.append(this.element);
      document.removeEventListener("DOMContentLoaded", () => this.appendDialogElement());
      new App({
        target: this.shadow,
        props: {
          i18n: this.i18n
        }
      });
    }
  }
  log(...args) {
    if (this.logging) {
      console.log("WebRenderer, LOG:", ...args);
    }
  }
  async login(context) {
    this.log("login", context);
    prompt.set(void 0);
    router.push("login");
    const promise2 = cancelable(new Promise((resolve, reject) => loginPromise.set({
      reject,
      resolve
    })));
    this.addCancelablePromise(promise2.cancel);
    loginContext.set(context);
    await promise2;
    if (this.minimal) {
      active.set(false);
    }
    return promise2;
  }
  async onError(error2) {
    const isCancelable = error2 instanceof Canceled;
    const isSilent = isCancelable && error2.silent === true;
    this.log("onError", {
      isCancelable,
      isSilent,
      error: error2
    });
    if (isSilent) {
      return;
    }
    if (this.minimal) {
      active.set(false);
    } else {
      active.set(true);
      errorDetails.set(String(error2));
      router.push("error");
    }
  }
  async onAccountCreate(context) {
    this.log("onAccountCreate", context);
    active.set(true);
    router.push("create-account");
    const promise2 = cancelable(new Promise((resolve, reject) => accountCreationPromise.set({
      reject,
      resolve
    })));
    this.addCancelablePromise(promise2.cancel);
    accountCreationContext.set(context);
    return promise2;
  }
  async onAccountCreateComplete() {
    this.log("onAccountCreateComplete");
    active.set(false);
    resetState();
  }
  async onLogin() {
    this.log("onLogin");
    active.set(true);
    props.update((current) => ({
      ...current,
      title: this.i18n.t.get("login.title", { default: "Login" }),
      subtitle: ""
    }));
    router.push("login");
  }
  async onLoginComplete() {
    this.log("onLoginResult");
    active.set(false);
    resetState();
  }
  async onTransact() {
    this.log("onTransact");
    if (!this.minimal) {
      active.set(true);
    }
    props.update((c2) => ({
      ...c2,
      title: this.i18n.t.get("transact.title", { default: "Transact" }),
      subtitle: ""
    }));
    router.push("transact");
  }
  async onTransactComplete() {
    this.log("onTransactResult");
    resetState();
    active.set(false);
  }
  async onSign() {
    this.log("onSign");
  }
  async onSignComplete() {
    this.log("onSignComplete");
  }
  async onBroadcast() {
    this.log("onBroadcast");
  }
  async onBroadcastComplete() {
    this.log("onBroadcastComplete");
  }
  prompt(args) {
    this.log("prompt", args);
    if (!this.minimal || this.minimal && !args.optional) {
      active.set(true);
      router.push("prompt");
    }
    const promise2 = cancelable(new Promise((resolve, reject) => {
      prompt.set({
        args,
        resolve,
        reject
      });
    }), (canceled) => {
      throw canceled;
    });
    this.addCancelablePromise(promise2.cancel);
    return promise2;
  }
  status(message) {
    if (!this.minimal) {
      active.set(true);
    }
    props.update((current) => ({
      ...current,
      subtitle: message
    }));
  }
  // Map the UserInterface translate call to our i18n instance
  translate(key2, options, namespace) {
    if (namespace) {
      return this.i18n.t.get(`${namespace}.${key2}`, options);
    }
    return this.i18n.t.get(key2, options);
  }
  addTranslations(translations2) {
    const normalizedTranslations = {};
    const seenLanguages = /* @__PURE__ */ new Set();
    for (const [lang2, data] of Object.entries(translations2)) {
      if (!lang2) {
        this.log(`Skipping invalid language: empty or null`);
        continue;
      }
      let normalizedLang = lang2;
      if (lang2.startsWith("zh")) {
        normalizedLang = mapChineseLanguage(lang2);
      }
      if (!seenLanguages.has(normalizedLang)) {
        normalizedTranslations[normalizedLang] = data;
        seenLanguages.add(normalizedLang);
      } else {
        this.log(`Skipping duplicate language: ${lang2} (normalized to ${normalizedLang})`);
      }
    }
    this.i18n.addTranslations(normalizedTranslations);
  }
}
WebRenderer.version = "1.4.2";
export {
  AbstractWalletPlugin as A,
  Bytes as B,
  Checksum256 as C,
  Action as D,
  prependAction as E,
  FetchProvider as F,
  WebRenderer as G,
  SessionKit as H,
  IdentityProof as I,
  Chains as J,
  Canceled as K,
  Logo as L,
  Name as N,
  PrivateKey as P,
  ResolvedSigningRequest as R,
  Serializer as S,
  TimePointSec as T,
  UInt64 as U,
  WalletPluginMetadata as W,
  __awaiter as _,
  Checksum512 as a,
  Struct as b,
  ChainId as c,
  SigningRequest as d,
  Signature as e,
  PublicKey as f,
  PermissionLevel as g,
  __generator as h,
  __values as i,
  __spreadArray as j,
  __read as k,
  __extends as l,
  __asyncGenerator as m,
  __await as n,
  __asyncValues as o,
  cancelable as p,
  Transaction as q,
  UInt32 as r,
  Asset$1 as s,
  APIClient as t,
  UInt128 as u,
  BN as v,
  Int64 as w,
  __decorate$1 as x,
  AbstractTransactPlugin as y,
  TransactHookTypes as z
};
//# sourceMappingURL=wharfkit-CgoYgCEG.js.map
